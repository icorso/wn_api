from faker import Factory

from constants import RoutingNumber, AccountType, SecCode, TerminalType, TransactionType, Currency, \
    StoredCredentialTxType, StoredCredentialUse
from model.gateway import PAYMENT, PREAUTH, PAYMENTACH, ACHSECUREREGISTRATION, SECURECARDREGISTRATION, \
    ADDSTOREDSUBSCRIPTION, REFUND, ACCOUNT_VERIFICATION, SECURECARDUPDATE, PAYMENTDIRECTDEBIT, \
    FOREIGNCURRENCYINFORMATION, ADDSUBSCRIPTION, SUBSCRIPTIONPAYMENT, LINE_ITEMSType, SUMMARYType, LEVEL_3_DATA, \
    LINE_ITEMType, UPDATE_TRANSACTION_ENHANCED_DATA, SHIPPING_ADDRESSType, LEVEL_2_DATA, OFFLINEPAYMENT, \
    UNREFERENCEDREFUND, CARDDETAILS, CUSTOMFIELD, CREDENTIALONFILE, UPDATESUBSCRIPTION, SEND_PAYMENT_LINK_EMAIL, \
    CREATE_PAYMENT_LINK
from utils import today, random_card, random_amount

fake = Factory.create()


def shipping_address():
    return SHIPPING_ADDRESSType(
        FULL_NAME=fake.name(),
        ADDRESS1=fake.street_address(),
        ADDRESS2=fake.secondary_address(),
        CITY=fake.city(),
        REGION=fake.state(),
        POSTCODE=fake.postcode(),
        COUNTRY=fake.country_code()
    )


def level_3_data(items_total=1):
    items = []
    total_freight = fake.pyfloat(1, 2, True)
    total_duty = fake.pyfloat(1, 2, True)
    authorised_amount = float(0)
    for i in range(items_total):
        item = line_item()
        items.append(item)
        authorised_amount += authorised_amount + float(item.TOTAL_AMOUNT)

    request = LEVEL_3_DATA(
        SUMMARY=SUMMARYType(
            TOTAL_DISCOUNT_AMOUNT=str(fake.pydecimal(1, 2, True)),
            TOTAL_FREIGHT_AMOUNT=str(total_freight),
            TOTAL_DUTY_AMOUNT=str(total_duty),
        ),
        LINE_ITEMS=LINE_ITEMSType(items)
    )
    return request


def level_2_data(tax_amount=None):
    return LEVEL_2_DATA(
        CUSTOMER_REF_NUMBER='CRN_%s' % str(fake.random_number(7, True)),
        TAX_AMOUNT=str(tax_amount) if tax_amount else str(fake.pyfloat(1, 2, True)),
        SHIPPING_ADDRESS=shipping_address()
    )


def transaction_enhanced_data(uniqueref, level_2=None, level_3=None):
    return UPDATE_TRANSACTION_ENHANCED_DATA(
        UNIQUEREF=uniqueref,
        OPERATOR=fake.name(),
        LEVEL_2_DATA=level_2,
        LEVEL_3_DATA=level_3,
        DATETIME=today()
    )


def line_item():
    quantity = fake.pyfloat(1, 2, True)
    unit_price = fake.pyfloat(1, 2, True)
    total_amount = round(float(quantity * unit_price), 2)
    item = LINE_ITEMType(
        COMMODITY_CODE='CC_{id}'.format(id=quantity),  # str 0-45
        PRODUCT_CODE='PC_{id}'.format(id=unit_price),  # str 0-45
        DESCRIPTION=fake.text(50),  # str 0-250
        QUANTITY=quantity,  # double
        UNIT_OF_MEASURE='UNIT_{txt}'.format(txt=fake.text(10)),  # str 0-250
        UNIT_PRICE=unit_price,  # dec 0-13 digits
        TOTAL_AMOUNT=str(total_amount),  # dec 0-13 digits
        DISCOUNT_RATE=fake.pydecimal(1, 2, True),  # dec 0-13 digits
        TAX_RATE=fake.pydecimal(1, 2, True),  # dec 0-13 digits
    )
    return item


def credential_on_file(
        stored_credential_tx_type=StoredCredentialTxType.SUBSEQUENT_MERCHANT_INITIATED_TXN.name,
        stored_credential_use=StoredCredentialUse.UNSCHEDULED.name):
    return CREDENTIALONFILE(
        BRANDTXIDENTIFIER='',
        ORIGINALBRANDTXIDENTIFIER='',
        STOREDCREDENTIALTXTYPE=stored_credential_tx_type,
        STOREDCREDENTIALUSE=stored_credential_use
    )


def custom_field(**kwargs):
    cf = []
    for k, v in kwargs.items():
        cf.append(CUSTOMFIELD(NAME=k, valueOf_=v))
    return cf


def payment(amount=None, cardtype='visa', cvv='999', currency=Currency.USD):
    ctype = None
    cnumber = None
    try:
        ctype = cardtype
        cnumber = fake.credit_card_number(cardtype)
    except KeyError:
        ctype = cardtype

    request = PAYMENT(
        ORDERID='XML_' + str(fake.random_number(7, False)),
        AMOUNT=amount if amount else random_amount(currency=currency),
        DATETIME=str(today()),
        CARDNUMBER=cnumber,
        CARDTYPE=ctype.upper(),
        CARDEXPIRY=fake.credit_card_expire(date_format='%m%y'),
        CARDHOLDERNAME=fake.name(),
        CURRENCY=currency.name,
        TERMINALTYPE=TerminalType.INTERNET,
        TRANSACTIONTYPE=TransactionType.INTERNET,
        AUTOREADY='Y',
        CVV=cvv,
        DESCRIPTION=fake.text(30),
        EMAIL=fake.free_email()
    )
    return request


def payment_level2(amount=None, cardtype='visa', cvv='999', level_2=None):
    request = payment(amount=amount, cardtype=cardtype, cvv=cvv)
    request.LEVEL_2_DATA = level_2 if level_2 else level_2_data()
    return request


def payment_level3(amount=None, cardtype='visa', cvv='999', line_items=1):
    items = []
    total_freight = fake.pyfloat(1, 2, True)
    total_duty = fake.pyfloat(1, 2, True)
    authorised_amount = float(0)
    for i in range(line_items):
        item = line_item()
        items.append(item)
        authorised_amount += authorised_amount + float(item.TOTAL_AMOUNT)
    authorised_amount = authorised_amount + total_freight + total_duty
    request = PAYMENT(
        ORDERID='XML_{id}'.format(id=fake.random_number(7, False)),
        AMOUNT=amount if amount else authorised_amount,
        DATETIME=today(),
        CARDNUMBER=fake.credit_card_number(cardtype),
        CARDTYPE=cardtype,
        CARDEXPIRY=fake.credit_card_expire(date_format='%m%y'),
        CARDHOLDERNAME=fake.name(),
        CURRENCY='USD',
        TERMINALTYPE=2,
        TRANSACTIONTYPE=7,
        AUTOREADY='Y',
        CVV=cvv,
        DESCRIPTION=fake.text(30),
        LEVEL_3_DATA=LEVEL_3_DATA(
            SUMMARY=SUMMARYType(
                TOTAL_DISCOUNT_AMOUNT=str(fake.pydecimal(1, 2, True)),
                TOTAL_FREIGHT_AMOUNT=str(total_freight),
                TOTAL_DUTY_AMOUNT=str(total_duty),
            ),
            LINE_ITEMS=LINE_ITEMSType(items)
        )
    )
    return request


def payment_chp(amount=None, cardtype='visa', currency=Currency.USD):
    request = PAYMENT(
        ORDERID='XML_' + str(fake.random_number(7, False)),
        AMOUNT=amount if amount else fake.pydecimal(1, 2, True),
        DATETIME=str(today()),
        TRACKDATA=';%s=%s10114991888?' % (fake.credit_card_number(cardtype), fake.credit_card_expire(date_format='%y%m')),
        CARDTYPE=cardtype,
        CARDHOLDERNAME=fake.name(),
        CURRENCY=currency.name,
        TERMINALTYPE=TerminalType.CHP,
        TRANSACTIONTYPE=TransactionType.CHP,
        AUTOREADY='Y',
        DESCRIPTION=fake.text(30)
    )
    return request


def payment_chp_jets(amount=None, currency=Currency.JMD):
    request = payment_chp(amount=amount, currency=currency)
    request.TRACKDATA=';%s=%s10114991888?' % ('6013430190000001', fake.credit_card_expire(date_format='%y%m'))
    request.CARDTYPE='JETS'
    return request


def payment_chp_ncb(amount=None, currency=Currency.JMD):
    request = payment_chp(amount=amount, currency=currency)
    request.TRACKDATA=';%s=%s10114991888?' % ('6690010115397334', fake.credit_card_expire(date_format='%y%m'))
    request.CARDTYPE='NCB DEBIT'
    return request


def payment_chp_cibc(amount=None, currency=Currency.USD):
    request = payment_chp(amount=amount, currency=currency)
    request.TRACKDATA=';%s=%s10114991888?' % ('6007602801003837964', fake.credit_card_expire(date_format='%y%m'))
    request.CARDTYPE='CIBC'
    return request


def payment_avs(amount=None, cardtype='visa', cvv='999', currency=Currency.USD):
    request = payment(amount=amount, cardtype=cardtype, cvv=cvv, currency=currency)
    request.EMAIL = fake.free_email()
    request.ADDRESS1 = fake.street_address()
    request.ADDRESS2 = fake.secondary_address()
    request.POSTCODE = fake.postcode()
    request.DESCRIPTION = fake.text(30)
    request.IPADDRESS = fake.ipv4()
    request.CITY = fake.city()
    request.REGION = fake.state_abbr()
    request.COUNTRY = 'US'
    request.BILLTOFIRSTNAME = fake.first_name()
    request.BILLTOLASTNAME = fake.last_name()
    request.PHONE = str(fake.random_number(10))
    return request


def payment_androidpay(amount=25.00, cardtype='GOOGLEPAY', cvv='999', currency=Currency.EUR):
    request = payment(amount=amount, cardtype=cardtype, cvv=cvv, currency=currency)
    request.GOOGLEPAYLOAD = '7b2263617264496e666f223a7b22636172644e6574776f726b223a2256495341222c226361726444657461696c73223a2231343332222c2263617264496d616765557269223a2268747470733a2f2f6c68362e67677068742e636f6d2f4e7659665f33334d6c65593177614a6657364f39387762334b55365865696e776961686d765549797534364c6357655164544d476d375759653831755a59574c55626b6a767a3045222c2262696c6c696e6741646472657373223a7b226164647265737333223a22222c226164647265737332223a22222c226164647265737331223a223420576f6f64736964652044656d65736e65222c22706f7374616c436f6465223a224431382045414638222c22636f6d70616e794e616d65223a22222c226c6f63616c697479223a22537465706173696465222c2261646d696e69737472617469766541726561223a22436f2e204475626c696e222c2270686f6e654e756d626572223a222b333533203837203737352035333835222c22736f7274696e67436f6465223a22222c22636f756e747279436f6465223a224945222c226e616d65223a22416e64726577204f27446f7764222c226164647265737335223a22222c226164647265737334223a22227d2c22636172644465736372697074696f6e223a2256697361e28086e280a2e280a2e280a2e280a2e2808631343332222c2263617264436c617373223a224445424954227d2c227061796d656e744d6574686f64546f6b656e223a7b22746f6b656e697a6174696f6e54797065223a225041594d454e545f47415445574159222c22746f6b656e223a227b5c227369676e61747572655c223a5c224d45514349434675306c7162675330357a36697170424333625568626d37702f5461796837734b627a3961716b58597541694249394b36756a6c4b5774444179506c59596a42304b38636d374f79352f6154704d36564f514e6a6b3330515c5c75303033645c5c75303033645c222c5c2270726f746f636f6c56657273696f6e5c223a5c22454376315c222c5c227369676e65644d6573736167655c223a5c227b5c5c5c22656e637279707465644d6573736167655c5c5c223a5c5c5c225350567449563050366b32593356376f634a614c655777474a67554e654c6877675363507a48356d566a343641376e6d744e70596641357245514d64476161763172396c4461313367703376383537694b425a2b367a45633768655a4c622b6e7074596430383878485469577852394338746d77324d4e4773777a58583031436655776e394432717935756d5543304449634d6963763861656876526c6e74424c3172524c3131623445534c6d30654252487a65345862353932684555734962516257734f545436783376544248462b4a41616a5832784c5177575570492b56753534684a54564261633046536a677246365231535939456873655844637968484f4b3569795834375354347344546d4670336e37623336686e46335749464477685050574a306c4e5677426b2b7336747a2f57486650416336617a2f5663446561754737345568674a5a3052344d63696b664d6564522b3374564454304269436a792f744c686153354a4151723452546d746b797776302f33662f544e63537a536a7a7656577a79654132324a38634c53525a745772742b57593651432b4649506f57526c3735307845524c74422b54376f4e7739724a4f3647674a775c5c5c5c75303033645c5c5c5c75303033645c5c5c222c5c5c5c22657068656d6572616c5075626c69634b65795c5c5c223a5c5c5c22424d57544b7451327634417435724c2b34307859346e4778717a6e616235555a4f776232532f4342647959443958375556474575313976554149453171585264456c6965646c424c552f5741445144515878646e754d515c5c5c5c75303033645c5c5c222c5c5c5c227461675c5c5c223a5c5c5c224c506f4469534a713849316459652b665a2f393143756c664e72446b505a396a3176626e416c73416857385c5c5c5c75303033645c5c5c227d5c227d227d2c22656d61696c223a22616e64796f646f77643139383140676d61696c2e636f6d227d'
    request.CARDTYPE = cardtype
    request.CARNUMBER = None
    request.POSTCODE = '12345'
    return request


def payment_applepay_visa():
    request = payment(amount=66.00, cardtype='APPLEPAY', currency=Currency.USD)
    request.APPLEPAYLOAD = '7b2276657273696f6e223a2245435f7631222c2264617461223a2266384e54484e664e5156556158732f623473476a4c4b52692b756b5a44416f7045344e734b73715246706a736c33536442334963564a4b6a646d65526f4b38516357724f5835642b584766436e4e414863504f6d7541627845486656344855784778533030345863764d36484958544d6133476a77375a547a72484d5137567970324b35726d774f6b6b70386b426f6a3933567862336857474644736a337274614d4d4d5761692b764b4851307734757034313556644a4473614239375857693445394d71506c46497632574f686430704c6c7665366b67745a5a64543575315a504d2b59596c373448383854317a65637a726f662f6b763271486c6d6651375857384a7a356251564d54663363323136456247426d55796b6e42455a59684f6b78653461364d59446a652b343666304a646e5734736f5773342b4f75697a32505768483176375141655a304e2f575a35524657386758786b314e34426131542f616f3876517954582b71374c636c6a4165687831586158396c72765a36664f61667a376677764e78563043622b314f504a55624945635a6e33686265315376484c6f48777145586649733d222c227369676e6174757265223a224d494147435371475349623344514548417143414d49414341514578447a414e42676c67686b67425a514d45416745464144434142676b71686b69473977304242774541414b43414d494944356a4343413475674177494241674949614744326d646e4d70773877436759494b6f5a497a6a304541774977656a45754d437747413155454177776c51584277624755675158427762476c6a5958527062323467535735305a5764795958527062323467513045674c5342484d7a456d4d435147413155454377776451584277624755675132567964476c6d61574e6864476c76626942426458526f62334a7064486b78457a415242674e5642416f4d436b46776347786c49456c7559793478437a414a42674e5642415954416c56544d423458445445324d4459774d7a45344d5459304d466f58445449784d4459774d6a45344d5459304d466f77596a456f4d43594741315545417777665a574e6a4c584e7463433169636d39725a58497463326c6e626c3956517a51745530464f52454a50574445554d424947413155454377774c6155395449464e356333526c62584d78457a415242674e5642416f4d436b46776347786c49456c7559793478437a414a42674e5642415954416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a30444151634451674145676a443971384f63393134674c46445a6d305553356a666971514864624c50677363314c556d65592b4d394f766567614a616a43486b777a3363364f4b70624339712b686b774e46784f68365243624f6c5273536c614f43416845776767494e4d45554743437347415155464277454242446b774e7a4131426767724267454642516377415959706148523063446f764c32396a633341755958427762475575593239744c32396a633341774e433168634842735a5746705932457a4d444977485159445652304f424259454641496b4d417561377531474d5a656b706c6f706e6b4a78676878464d41774741315564457745422f7751434d414177487759445652306a42426777466f4155492f4a4a78452b54354f386e357354324b47772f6f7276394c6b73776767456442674e5648534145676745554d4949424544434341517747435371475349623359325146415443422f6a4342777759494b77594242515548416749776762594d67624e535a5778705957356a5a5342766269423061476c7a49474e6c636e52705a6d6c6a5958526c49474a35494746756553427759584a306553426863334e316257567a4947466a593256776447467559325567623259676447686c4948526f5a5734675958427762476c6a59574a735a53427a644746755a4746795a4342305a584a7463794268626d5167593239755a476c3061573975637942765a6942316332557349474e6c636e52705a6d6c6a5958526c4948427662476c6a65534268626d51675932567964476c6d61574e6864476c7662694277636d466a64476c6a5a53427a644746305a57316c626e527a4c6a4132426767724267454642516343415259716148523063446f764c33643364793568634842735a53356a623230765932567964476c6d61574e68644756686458526f62334a7064486b764d44514741315564487751744d4373774b61416e6f43574749326830644841364c79396a636d77755958427762475575593239744c3246776347786c59576c6a59544d7559334a734d41344741315564447745422f775145417749486744415042676b71686b694739324e6b42683045416755414d416f4743437147534d343942414d4341306b414d4559434951446148474f75692b583254343452364756704e376d326e456372365436734d6a4f685a354e75536f316567774968414c31612b2f68703838444b4a3073763365543346785763733731786d624c4b442f514a336d576167724a4e4d494943376a4343416e5767417749424167494953573076767a715932706377436759494b6f5a497a6a3045417749775a7a45624d426b4741315545417777535158427762475567556d397664434244515341744945637a4d5359774a4159445651514c44423142634842735a5342445a584a3061575a7059324630615739754945463164476876636d6c30655445544d424547413155454367774b51584277624755675357356a4c6a454c4d416b474131554542684d4356564d774868634e4d5451774e5441324d6a4d304e6a4d775768634e4d6a6b774e5441324d6a4d304e6a4d77576a42364d5334774c4159445651514444435642634842735a5342426348427361574e6864476c766269424a626e526c5a334a6864476c7662694244515341744945637a4d5359774a4159445651514c44423142634842735a5342445a584a3061575a7059324630615739754945463164476876636d6c30655445544d424547413155454367774b51584277624755675357356a4c6a454c4d416b474131554542684d4356564d775754415442676371686b6a4f5051494242676771686b6a4f50514d4242774e4341415477467847454764646b68645561586957424233626f674b4c76336e75755465434e2f45755434544e5731575a624e613469304a643244534a4f65376f492f5859587a6f6a4c6472746d634c374936436d452f3152466f3448334d4948304d45594743437347415155464277454242446f774f444132426767724267454642516377415959716148523063446f764c32396a633341755958427762475575593239744c32396a633341774e433168634842735a584a766233526a5957637a4d42304741315564446751574242516a386b6e455435506b3779666d7850596f62442b69752f3075537a415042674e5648524d4241663845425441444151482f4d42384741315564497751594d426141464c7577337146594d3469617049715a3372363936362f61797953724d44634741315564487751774d4334774c4b41716f4369474a6d6830644841364c79396a636d77755958427762475575593239744c3246776347786c636d397664474e685a7a4d7559334a734d41344741315564447745422f77514541774942426a415142676f71686b694739324e6b4267494f424149464144414b42676771686b6a4f5051514441674e6e4144426b416a41367a334b445552615a735962374e634e57796d4b2f394266743251393154614b4f767647636756354374346e346d506562575a2b593155454e6a353370777634434d44497431555168734b4d4664327864387a67376b476639463377734957325754385a796159495362315434656e30626d63756243596b685951615a44776d53485141414d594942697a4343415963434151457767595977656a45754d437747413155454177776c51584277624755675158427762476c6a5958527062323467535735305a5764795958527062323467513045674c5342484d7a456d4d435147413155454377776451584277624755675132567964476c6d61574e6864476c76626942426458526f62334a7064486b78457a415242674e5642416f4d436b46776347786c49456c7559793478437a414a42674e5642415954416c56544167686f5950615a3263796e447a414e42676c67686b67425a514d4541674546414b43426c54415942676b71686b69473977304243514d784377594a4b6f5a496876634e415163424d42774743537147534962334451454a42544550467730784e7a41784d7a45784d5451354e5468614d436f4743537147534962334451454a4e4445644d4273774451594a59495a49415755444241494242514368436759494b6f5a497a6a3045417749774c77594a4b6f5a496876634e41516b454d53494549416e5a464775364b723878456c2f67464356596d6a6d5338464449674b485776427841655257436c6272574d416f4743437147534d343942414d434245597752414967597a3059355333614a3238466b6368544c6f636a344a454d744c693567794256564245416a5869644c2b51434944574a576a62594132703054756239712f77616c6b322f723551765870765871554b64365748332f5a4e4d4141414141414141222c22686561646572223a7b22657068656d6572616c5075626c69634b6579223a224d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a3044415163445167414530566232395839514934747059776a2f4d486d31486e666f4179434744474e765575303058646272566d46614e6b336834344a2b3065507435316736586e3847525a74434c6f43472f6b515a71577a567730574c54413d3d222c227075626c69634b657948617368223a22524c7632446b6844683266313032654c615866636558677a417643476c4c6f426f73524a674a376971674d3d222c227472616e73616374696f6e4964223a2232353666303035313061656136303536393263643062383630363362363536353464643065363965643462626539633432386331383234383262656137326533227d7d'
    request.CVV = None
    return request


def payment_applepay_mastercard_3ds():
    request = payment(amount=76.00, cardtype='APPLEPAY', currency=Currency.USD)
    request.APPLEPAYLOAD = '7b2276657273696f6e223a2245435f7631222c2264617461223a226d5a4935384c5a494f414e3356766755784d426633516552706841665943437079795530554f5172544656663951442f2b396e594943455336433371694647417a65323269346850476f727765734161355972615a43644d4b61473371456c537246705a376c67655a6a535264525248415854777a4e7345784444694572644b4c6e423648366e7163337563593364434e4933747647556d6d494d7553706539342f654337303072795431365277344968413535786b344b354937592f52746c78695a7475324778496c6c63716f4e327258565238734e51447a344533704b6a6842475a306762734934486866466932394662587455383732784677462f6248493238687778356767316762457031675638556363615a57376979446f513039554e4e4f634b4a463747326677576e447554703656334a416d304d79674963522f5475596d42692b694a64536b4c306a6c3570426b756554306866536e73384a5047354a7462367a5944733156704638462b312b474d4549734b6b7a6e4f644c624e45392f6e47387a467a397136395037513d3d222c227369676e6174757265223a224d494147435371475349623344514548417143414d49414341514578447a414e42676c67686b67425a514d45416745464144434142676b71686b69473977304242774541414b43414d494944356a4343413475674177494241674949614744326d646e4d70773877436759494b6f5a497a6a304541774977656a45754d437747413155454177776c51584277624755675158427762476c6a5958527062323467535735305a5764795958527062323467513045674c5342484d7a456d4d435147413155454377776451584277624755675132567964476c6d61574e6864476c76626942426458526f62334a7064486b78457a415242674e5642416f4d436b46776347786c49456c7559793478437a414a42674e5642415954416c56544d423458445445324d4459774d7a45344d5459304d466f58445449784d4459774d6a45344d5459304d466f77596a456f4d43594741315545417777665a574e6a4c584e7463433169636d39725a58497463326c6e626c3956517a51745530464f52454a50574445554d424947413155454377774c6155395449464e356333526c62584d78457a415242674e5642416f4d436b46776347786c49456c7559793478437a414a42674e5642415954416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a30444151634451674145676a443971384f63393134674c46445a6d305553356a666971514864624c50677363314c556d65592b4d394f766567614a616a43486b777a3363364f4b70624339712b686b774e46784f68365243624f6c5273536c614f43416845776767494e4d45554743437347415155464277454242446b774e7a4131426767724267454642516377415959706148523063446f764c32396a633341755958427762475575593239744c32396a633341774e433168634842735a5746705932457a4d444977485159445652304f424259454641496b4d417561377531474d5a656b706c6f706e6b4a78676878464d41774741315564457745422f7751434d414177487759445652306a42426777466f4155492f4a4a78452b54354f386e357354324b47772f6f7276394c6b73776767456442674e5648534145676745554d4949424544434341517747435371475349623359325146415443422f6a4342777759494b77594242515548416749776762594d67624e535a5778705957356a5a5342766269423061476c7a49474e6c636e52705a6d6c6a5958526c49474a35494746756553427759584a306553426863334e316257567a4947466a593256776447467559325567623259676447686c4948526f5a5734675958427762476c6a59574a735a53427a644746755a4746795a4342305a584a7463794268626d5167593239755a476c3061573975637942765a6942316332557349474e6c636e52705a6d6c6a5958526c4948427662476c6a65534268626d51675932567964476c6d61574e6864476c7662694277636d466a64476c6a5a53427a644746305a57316c626e527a4c6a4132426767724267454642516343415259716148523063446f764c33643364793568634842735a53356a623230765932567964476c6d61574e68644756686458526f62334a7064486b764d44514741315564487751744d4373774b61416e6f43574749326830644841364c79396a636d77755958427762475575593239744c3246776347786c59576c6a59544d7559334a734d41344741315564447745422f775145417749486744415042676b71686b694739324e6b42683045416755414d416f4743437147534d343942414d4341306b414d4559434951446148474f75692b583254343452364756704e376d326e456372365436734d6a4f685a354e75536f316567774968414c31612b2f68703838444b4a3073763365543346785763733731786d624c4b442f514a336d576167724a4e4d494943376a4343416e5767417749424167494953573076767a715932706377436759494b6f5a497a6a3045417749775a7a45624d426b4741315545417777535158427762475567556d397664434244515341744945637a4d5359774a4159445651514c44423142634842735a5342445a584a3061575a7059324630615739754945463164476876636d6c30655445544d424547413155454367774b51584277624755675357356a4c6a454c4d416b474131554542684d4356564d774868634e4d5451774e5441324d6a4d304e6a4d775768634e4d6a6b774e5441324d6a4d304e6a4d77576a42364d5334774c4159445651514444435642634842735a5342426348427361574e6864476c766269424a626e526c5a334a6864476c7662694244515341744945637a4d5359774a4159445651514c44423142634842735a5342445a584a3061575a7059324630615739754945463164476876636d6c30655445544d424547413155454367774b51584277624755675357356a4c6a454c4d416b474131554542684d4356564d775754415442676371686b6a4f5051494242676771686b6a4f50514d4242774e4341415477467847454764646b68645561586957424233626f674b4c76336e75755465434e2f45755434544e5731575a624e613469304a643244534a4f65376f492f5859587a6f6a4c6472746d634c374936436d452f3152466f3448334d4948304d45594743437347415155464277454242446f774f444132426767724267454642516377415959716148523063446f764c32396a633341755958427762475575593239744c32396a633341774e433168634842735a584a766233526a5957637a4d42304741315564446751574242516a386b6e455435506b3779666d7850596f62442b69752f3075537a415042674e5648524d4241663845425441444151482f4d42384741315564497751594d426141464c7577337146594d3469617049715a3372363936362f61797953724d44634741315564487751774d4334774c4b41716f4369474a6d6830644841364c79396a636d77755958427762475575593239744c3246776347786c636d397664474e685a7a4d7559334a734d41344741315564447745422f77514541774942426a415142676f71686b694739324e6b4267494f424149464144414b42676771686b6a4f5051514441674e6e4144426b416a41367a334b445552615a735962374e634e57796d4b2f394266743251393154614b4f767647636756354374346e346d506562575a2b593155454e6a353370777634434d44497431555168734b4d4664327864387a67376b476639463377734957325754385a796159495362315434656e30626d63756243596b685951615a44776d53485141414d594942697a4343415963434151457767595977656a45754d437747413155454177776c51584277624755675158427762476c6a5958527062323467535735305a5764795958527062323467513045674c5342484d7a456d4d435147413155454377776451584277624755675132567964476c6d61574e6864476c76626942426458526f62334a7064486b78457a415242674e5642416f4d436b46776347786c49456c7559793478437a414a42674e5642415954416c56544167686f5950615a3263796e447a414e42676c67686b67425a514d4541674546414b43426c54415942676b71686b69473977304243514d784377594a4b6f5a496876634e415163424d42774743537147534962334451454a42544550467730784e7a41784d7a45784d5455314d7a56614d436f4743537147534962334451454a4e4445644d4273774451594a59495a49415755444241494242514368436759494b6f5a497a6a3045417749774c77594a4b6f5a496876634e41516b454d53494549467064584461716e695377316d4576584d552b53713968643545412b745836765339324461563049372f694d416f4743437147534d343942414d434245597752414967625071685874744f4a706c6b694d54754536646a6857346e38473155354a304e39447a686b6c4c6f3368634349464c364a6b5872757345356a2f45663177704374457767324945764c32766c4d5044796941484e383335774141414141414141222c22686561646572223a7b22657068656d6572616c5075626c69634b6579223a224d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a30444151634451674145316a2b6837474a767141764853485a706849632f42634d37586b734a5979792f696f5876425630542f2b4d66653049783974453039426333594c59337a7a6e754f76554f6e476c6d5a394271396a4d72424333484c413d3d222c227075626c69634b657948617368223a22524c7632446b6844683266313032654c615866636558677a417643476c4c6f426f73524a674a376971674d3d222c227472616e73616374696f6e4964223a2238343338353735303431343437306131613633323131643564633337333266616263313363346230303739613435326162313132666264643531343861373363227d7d'
    request.CVV = None
    return request


def payment_google_pay():
    request = payment(cardtype='GOOGLEPAY', currency=Currency.USD)
    request.GOOGLEPAYLOAD = '7b2261706956657273696f6e4d696e6f72223a302c2261706956657273696f6e223a322c227061796d656e744d6574686f6444617461223a7b226465736372697074696f6e223a2256697361e28086e280a2e280a2e280a2e280a2e2808639313035222c22746f6b656e697a6174696f6e44617461223a7b2274797065223a225041594d454e545f47415445574159222c22746f6b656e223a227b5c227369676e61747572655c223a5c224d45594349514332753967546635646e597565315a70582b2f706f5a4b6256654137386565304777572b2f4b576c773851514968414a49594e66726e466b6e7544677653636141656d4265416e52695249336d5358686337745344364f684b6f5c222c5c2270726f746f636f6c56657273696f6e5c223a5c22454376315c222c5c227369676e65644d6573736167655c223a5c227b5c5c5c22656e637279707465644d6573736167655c5c5c223a5c5c5c22712f2b596a634b35514576386b41374f5555593749704e45354f547065556742616b4b374d2f6e6667794979466c39766d71666b33546e564366742b4530756743792b733849717659366a376479614f6357664d67386a65502b66395456486636793272777a64494d69464e5433474a52703742455631664c7755374a544d4a427a6d5062526f4b75624f416673584775786e35326365556e656b5a6637483342336e5a516c73373163325666767a6e6c68744c2f4c754176396d6a63764255762f32306c6a552b46783255532b7a782f435031496a66794f423571374e594b436e4f517332414837744550786a564167516862734c49534f6270445275766f2b6779415748494c57304d375775384b5a324164387a5a7a7868797347636b766e447754666e7278506c6e424c772b592f5351524c43335057736e7a31556e69716e6c684b7057714d3662376467415364732f776b5565414c4e34734c517a2f497666745965563148366148317376723679474b4d7875594f5a4d51546f4e4b6b7748394b495949596c74376563704650314947444339736178494d6e64436f39676457476a4f3652523952326a3362484e644c386251773575526c5c5c5c222c5c5c5c22657068656d6572616c5075626c69634b65795c5c5c223a5c5c5c22424b6347762b2f35485a664c474668707442462f517266344467796d394e4f753952534a2b534f7458334942306844556e4f3056326178535832475a55566b6d7568396c4c5761456f374c664751644e3945594c7a4b495c5c5c5c75303033645c5c5c222c5c5c5c227461675c5c5c223a5c5c5c2250714a6b42433341465753726c456636734d536f3050634c394c70457732515336726a4d473230436642385c5c5c5c75303033645c5c5c227d5c227d227d2c2274797065223a2243415244222c22696e666f223a7b22636172644e6574776f726b223a2256495341222c226361726444657461696c73223a2239313035222c2262696c6c696e6741646472657373223a7b2270686f6e654e756d626572223a222b333533203837203230342039323939222c226164647265737333223a22222c22736f7274696e67436f6465223a22222c226164647265737332223a22222c22636f756e747279436f6465223a224945222c226164647265737331223a223231204b696c6b656e6e7920526f6164222c22706f7374616c436f6465223a22222c226e616d65223a22526f62626965204c796e6368222c226c6f63616c697479223a22436173746c65636f6d6572222c2261646d696e69737472617469766541726561223a22436f2e204b696c6b656e6e79227d7d7d7d'
    request.CVV = None
    return request


def payment_edcc(amount, cardnumber, conversion_rate, card_currency: Currency, terminal_currency: Currency = Currency.USD):
    card_amount = round(float(amount) * conversion_rate, card_currency.minorunits)
    request = payment(amount=amount)
    request.FOREIGNCURRENCYINFORMATION = FOREIGNCURRENCYINFORMATION(
        CARDCURRENCY=card_currency.name,
        CARDAMOUNT=card_amount,
        CONVERSIONRATE=conversion_rate
    )
    request.CURRENCY = terminal_currency.name
    request.CARDTYPE = 'VISA'
    request.CARDNUMBER = cardnumber
    return request


def payment_subscription(subscription_ref, amount=None):
    request = SUBSCRIPTIONPAYMENT(
        ORDERID='XML_' + str(fake.random_number(7, False)),
        AMOUNT=amount if amount else fake.pydecimal(1, 2, True),
        SUBSCRIPTIONREF=subscription_ref,
        DESCRIPTION=fake.text(30),
        EMAIL=fake.free_email(),
        DATETIME=str(today())
    )
    return request


def payment_securecard(cardreference, amount=None, cvv=None, currency=Currency.USD):
    request = payment(amount=amount, currency=currency)
    request.ORDERID = str(fake.random_number(7, True))
    request.CARDNUMBER = cardreference
    request.CARDTYPE = 'SECURECARD'
    request.CVV = cvv
    request.AUTOREADY = 'C'
    request.ADDRESS1 = fake.street_address()
    request.ADDRESS2 = fake.secondary_address()
    request.POSTCODE = fake.postcode()
    request.DESCRIPTION = fake.text(30)
    request.CITY = fake.city()
    request.REGION = fake.state()
    request.COUNTRY = 'US'
    return request


def offlinepayment(amount=None, cardtype='visa', cvv='999', approval_code: int = None):
    request = OFFLINEPAYMENT()
    request.APPROVALCODE = approval_code if approval_code is not None else str(fake.random_number(5))
    request.__dict__.update(payment(amount=amount, cardtype=cardtype, cvv=cvv).__dict__)
    return request


def offlinepayment_level3(amount=None, cardtype='visa', cvv='999', line_items=1):
    request = OFFLINEPAYMENT()
    request.APPROVALCODE = str(fake.random_number(5))
    request.__dict__.update(payment_level3(amount=amount, cardtype=cardtype, cvv=cvv, line_items=line_items).__dict__)
    return request


def preauth(amount=None, currency=Currency.USD, cardtype='visa', cvv='999'):
    request = PREAUTH()
    request.__dict__.update(payment(currency=currency, amount=amount, cardtype=cardtype, cvv=cvv).__dict__)
    return request


def preauth_level3(amount=None, cardtype='visa', cvv='999', line_items=1):
    request = PREAUTH()
    request.__dict__.update(payment_level3(amount=amount, cardtype=cardtype, cvv=cvv, line_items=line_items).__dict__)
    return request


def preauth_level2(amount=None, cardtype='visa', cvv='999'):
    request = PREAUTH()
    request.__dict__.update(payment_level2(amount=amount, cardtype=cardtype, cvv=cvv).__dict__)
    return request


def securecard_registration(cardtype='visa', cvv=''):
    creditcard = random_card(cardtype)
    cvv = creditcard.cvv if not cvv else cvv
    return SECURECARDREGISTRATION(
        MERCHANTREF='XML_' + str(fake.random_number(7, False)),
        DATETIME=str(today()),
        CARDNUMBER=creditcard.cardnumber,
        CARDEXPIRY=creditcard.cardexpiry,
        CARDTYPE=creditcard.cardtype,
        CARDHOLDERNAME=creditcard.cardholder,
        CVV=cvv,
        POSTCODE=fake.postcode(),
        PHONE=str(fake.random_number(10)),
        EMAIL=fake.free_email(),
    )


def securecard_update(merchantref, cardtype='visa', cvv='', dontcheck_security='N'):
    creditcard = random_card(cardtype)
    cvv = creditcard.cvv if not cvv else cvv
    return SECURECARDUPDATE(
        MERCHANTREF=merchantref,
        DATETIME=str(today()),
        CARDNUMBER=creditcard.cardnumber,
        CARDEXPIRY=creditcard.cardexpiry,
        CARDTYPE=creditcard.cardtype,
        CARDHOLDERNAME=creditcard.cardholder,
        CVV=cvv,
        DONTCHECKSECURITY=dontcheck_security,
        PHONE=str(fake.random_number(10)),
        EMAIL=fake.free_email(),
    )


def refund(uniqueref, amount):
    return REFUND(
        UNIQUEREF=uniqueref,
        AMOUNT=amount,
        DATETIME=str(today()),
        OPERATOR=fake.name(),
        REASON=fake.text(15),
        AUTOREADY='C'
    )


def unreferenced_refund(amount=None, cardtype='visa', cvv='', currency: Currency=Currency.USD):
    creditcard = random_card(cardtype)
    cvv = creditcard.cvv if not cvv else cvv

    request = UNREFERENCEDREFUND(
        ORDERID='XML_' + str(fake.random_number(7, False)),
        AMOUNT=amount if amount else fake.pydecimal(1, 2, True),
        DATETIME=str(today()),
        CURRENCY=currency.name,
        CARDDETAILS=CARDDETAILS(
            CARDNUMBER=creditcard.cardnumber,
            CARDEXPIRY=creditcard.cardexpiry,
            CARDTYPE=creditcard.cardtype,
            CARDHOLDERNAME=creditcard.cardholder,
        ),
        AUTOREADY='Y',
        OPERATOR=fake.name(),
        DESCRIPTION=fake.text(30)
    )
    return request


def stored_subscription():
    return ADDSTOREDSUBSCRIPTION(
        MERCHANTREF='XML_' + str(fake.random_number(7, False)),
        DATETIME=str(today()),
        NAME=fake.company(),
        DESCRIPTION=fake.text(20),
        PERIODTYPE='MONTHLY',
        LENGTH=1,
        CURRENCY=Currency.USD.name,
        RECURRINGAMOUNT=fake.pydecimal(1, 2, True),
        INITIALAMOUNT=fake.pydecimal(1, 2, True),
        TYPE='AUTOMATIC',
        ONUPDATE='CONTINUE',
        ONDELETE='CANCEL'
    )


def subscription(stored_subscriptionref, start_date=str(today(format='%d-%m-%Y'))):
    return ADDSUBSCRIPTION(
        MERCHANTREF='XML_' + str(fake.random_number(7, False)),
        DATETIME=str(today()),
        STOREDSUBSCRIPTIONREF=stored_subscriptionref,
        STARTDATE=start_date,
        ENDDATE=str(today(days=1500, format='%d-%m-%Y'))
    )


def update_subscription(merchant_ref, securecard_ref, start_date=str(today(format='%d-%m-%Y')),
                        end_date=str(today(days=5, format='%d-%m-%Y'))):
    return UPDATESUBSCRIPTION(
        MERCHANTREF=merchant_ref,
        SECURECARDMERCHANTREF=securecard_ref,
        DATETIME=str(today()),
        STARTDATE=start_date,
        RECURRINGAMOUNT=random_amount(),
        ENDDATE=end_date
    )


def ach_payment(amount=None):
    request = PAYMENTACH(
        ORDERID='XML_' + str(fake.random_number(7, False)),
        AMOUNT=amount if amount else fake.pydecimal(1, 2, True),
        DATETIME=str(today()),
        CURRENCY=Currency.USD.name,
        TERMINALTYPE=TerminalType.INTERNET,
        SEC_CODE=SecCode.rand(),
        ACCOUNT_TYPE=AccountType.rand().description,
        ACCOUNT_NUMBER=str(fake.random_number(17, True)),
        ROUTING_NUMBER=RoutingNumber.rand_rn(),
        ACCOUNT_NAME=fake.company(),
        CHECK_NUMBER=str(fake.random_number(17)),
        ADDRESS1=fake.street_address(),
        ADDRESS2=fake.secondary_address(),
        CITY=fake.city(),
        REGION=fake.state(),
        POSTCODE=fake.postcode(),
        COUNTRY=fake.country_code(),
        PHONE=str(fake.random_number(10, True)),
        IPADDRESS=fake.ipv4(),
        EMAIL=fake.free_email(),
        DESCRIPTION=fake.text(30),
        DL_STATE=fake.state_abbr(),
        DL_NUMBER=fake.license_plate()
    )
    return request


def ach_secure_payment(account_number, amount=None):
    request = PAYMENTACH(
        ORDERID='XML_' + str(fake.random_number(7, False)),
        AMOUNT=amount if amount else fake.pydecimal(1, 2, True),
        DATETIME=str(today()),
        CURRENCY=Currency.USD.name,
        TERMINALTYPE=TerminalType.INTERNET,
        ACH_SECURE='Y',
        SEC_CODE=SecCode.rand(),
        ACCOUNT_NUMBER=account_number,
        DESCRIPTION=fake.text(30),
    )
    return request


def direct_debit_payment(amount=None):
    request = PAYMENTDIRECTDEBIT(
        ORDERID='XML_DD_' + str(fake.random_number(5, False)),
        AMOUNT=amount if amount else fake.pydecimal(1, 2, True),
        CURRENCY=Currency.AUD.name,
        DATETIME=str(today()),
        TERMINALTYPE=TerminalType.INTERNET,
        DEBIT_DATE=str(today(format='%d-%m-%Y')),
        ACH_SECURE='N',
        ACCOUNT_TYPE=AccountType.rand().description,
        ACCOUNT_NUMBER=str(fake.random_number(13, True)),
        BSB_NUMBER=str(fake.random_number(6, True)),  # 3-7
        ACCOUNT_NAME=fake.name(),
        ADDRESS1=fake.street_address(),
        ADDRESS2=fake.secondary_address(),
        CITY=fake.city(),
        REGION=fake.state(),
        POSTCODE=fake.postcode(),
        COUNTRY=fake.country_code(),
        # PHONE=str(fake.random_number(9, True)),
        PHONE=fake.msisdn(),
        IPADDRESS=fake.ipv4(),
        EMAIL=fake.free_email(),
        DESCRIPTION=fake.text(30),
    )
    return request


def ach_secure_registration():
    request = ACHSECUREREGISTRATION(
        MERCHANTREF='XML_' + str(fake.random_number(7, False)),
        DATETIME=str(today()),
        ACCOUNT_TYPE=AccountType.rand().description,
        ACCOUNT_NUMBER=str(fake.random_number(17, True)),
        ROUTING_NUMBER=RoutingNumber.rand_rn(),
        ACCOUNT_NAME=fake.company(),
        ADDRESS1=fake.street_address(),
        ADDRESS2=fake.secondary_address(),
        CITY=fake.city(),
        REGION=fake.state(),
        POSTCODE=fake.postcode(),
        COUNTRY=fake.country_code(),
        PHONE=str(fake.random_number(10, True)),
        IPADDRESS=fake.ipv4(),
        EMAIL=fake.free_email(),
        DL_STATE=fake.state_abbr(),
        DL_NUMBER=fake.license_plate()
    )
    return request


def account_verification_request(cardtype='visa', cardnumber=None, cvv='999'):
    cardnum = cardnumber if cardnumber is not None else fake.credit_card_number(cardtype)
    request = ACCOUNT_VERIFICATION(
        CARDNUMBER=cardnum,
        CARDEXPIRY=fake.credit_card_expire(date_format='%m%y'),
        CARDHOLDERNAME=fake.name(),
        CVV=cvv,
        ADDRESS1=fake.street_address(),
        ADDRESS2=fake.secondary_address(),
        POSTCODE=fake.postcode(),
        DATETIME=str(today())
    )
    return request


def send_payment_link_request(merchantref, email_body=None):
    return SEND_PAYMENT_LINK_EMAIL(
        MERCHANTREF=merchantref,
        CUSTOMER_NAME=fake.name(),
        CUSTOMER_EMAIL=fake.free_email(),
        EMAIL_BODY=email_body,
        DATETIME=str(today())
    )


def create_payment_link_request(merchantref=None, amount=None, currency: Currency = Currency.USD, auth_type=1):
    return CREATE_PAYMENT_LINK(
        ORDERID='XPL' + str(fake.random_number(digits=6, fix_len=True)),
        CURRENCY=currency.name,
        SUBTOTAL=None,
        DISCOUNT=None,
        TAX=None,
        TOTAL_DUTY_AMOUNT=None,
        TOTAL_FREIGHT_AMOUNT=None,
        AMOUNT=amount if amount else random_amount(digits=2, currency=currency),
        DESCRIPTION=fake.text(20),
        MERCHANTREF=merchantref if merchantref else 'XMR' + str(fake.random_number(digits=6, fix_len=True)),
        CREATION_DATE=today(format='%d-%m-%Y'),
        EXPIRATION_DATE=today(days=1, format='%d-%m-%Y'),
        AUTH_TYPE=1,  # PAYMENT = 1 or PRE-AUTH = 2
        LEVEL_2_DATA=level_2_data(),
        # ITEMS=None,
        DATETIME=today()
    )
