openapi: 3.0.1
info:
  title: Merchant API
  description: "# Introduction\nThe Merchant API enables you to connect seamlessly\
    \ and securely to our [Omni-Channel Payments Platform](https://www.worldnetpayments.com/).\n\
    \nOur APIs are built around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer)\
    \ principles and [OpenAPI Specification](https://www.openapis.org/) definitions.\n\
    Complying to such industry standards means that we can offer developers a much\
    \ better experience by exposing predictable resource-oriented URL's as well as\
    \ a comprehensive range of HTTP response codes and verbs.\nMoreover, you have\
    \ the possibility to enable and take full advantage of [HATEOAS](https://en.wikipedia.org/wiki/HATEOAS)\
    \ controls to provide out-of-the-box `Discoverability` and `Functional-Awareness`\
    \ for your integrations.\n\nGet started on building full-featured payment applications\
    \ and join us in the Revolution of Intelligent Retail.\n\n# Authentication\nThe\
    \ Merchant API uses a combination of API Keys and [Java Web Tokens (JWT)](https://jwt.io/)\
    \ to authenticate requests.\nAPI Key's hold all the necessary information for\
    \ issuing JWT access tokens which in turn are required to access protected resources\
    \ and operations.\nTherefore, before you can start making any calls, you must\
    \ generate an API Key and use it to obtain access tokens.\n\nPlease, make yourself\
    \ familiar with the following security schemes before proceeding:\n<!-- ReDoc-Inject:\
    \ <security-definitions> -->\n## Generating an API Key\nThe API supports two levels\
    \ of authentication. Our consumers can either authenticate on a merchant level\
    \ and have their API Keys limited to the scope of a specific merchant or, if you\
    \ are one of our ISV (Independent Software Vendor) partners, you can have only\
    \ one API Key for a whole integration which may consist of more than one merchant.\n\
    \nAlthough it is handy for ISVs to have one key that can authenticate in multiple\
    \ merchant accounts, they can still use merchant-level authentication if they\
    \ want to have more control and keep their merchant authentication separate.\n\
    In this case, the gateway will require an extra header called `X-Integration-ID`\
    \ - containing the integration's identifier - to be sent in every request.\n\n\
    **How to generate Merchant-Level API Keys?**\n\n1. [Log into the SelfCare System](https://testpayments.worldnettps.com/merchant/selfcare)\
    \ with the credentials you received in the welcome email.\n2. Under *Settings*,\
    \ navigate to *API Keys*, and then click the `NEW API KEY` button.\n4. Enter an\
    \ alias and set the permission modes for each Sub-API.\n5. Select the terminals\
    \ that you want the API Key to be allowed to operate.\n6. Back on the list, choose\
    \ the action `View Authentication Key` to be able to see your Key's authentication\
    \ token.\n\n**How to generate Integration-Level API Keys?**\n\nISV integrations\
    \ are managed by our support and integration teams. Our team will be happy to\
    \ create your API Key when requested.<br />\nOnce created, the authentication\
    \ token is sent by email in an encrypted file and our team will guide you on how\
    \ to access its content.\n\nNote: Since ISV developers are not able to create\
    \ their own keys, we recommend Merchant-Level authentication during integration\
    \ and test phases as a way to speed up development and avoid the overhead of contacting\
    \ members of the support team.\n\n## Obtaining an Access Token\nIn order to obtain\
    \ an access token you must use the [authenticate](#operation/authenticate) operation\
    \ passing your API Key in the `HTTP Authorization` header with `Basic` authentication\
    \ scheme.\n\nIn the snippet below we show how to achieve that using [cURL](https://github.com/curl/curl).\
    \ However, if you are not familiar with command line tools we recommend [Postman](https://www.getpostman.com/).\n\
    \n```\ncurl https://testpayments.worldnettps.com/merchant/api/v1/account/authenticate\
    \ \\\n  -H \"Authorization: Basic <Merchant API Key>\"\n```\n\nFor every successful\
    \ request you should receive a response just like the one below containing the\
    \ information associated with your credentials, such as hours to expiry and privileges.\n\
    Include the JWT Token from the `token` property in the `Authorization` header\
    \ with `Bearer` authentication scheme for following requests to prove your identity\
    \ and access protected resources.\n\n```\n{\n    \"audience\": \"testpayments.worldnettps.com\"\
    ,\n    \"boundTo\": \"My API Key\",\n    \"tokenType\": \"Bearer\",\n    \"token\"\
    : \"<JWT Access Token>\",\n    \"expiresIn\": 1,\n    \"enableHypermedia\": true,\n\
    \    \"roles\": [],\n    \"allowedTerminals\": []\n}\n```\n\nFor security reasons,\
    \ access tokens expire after a certain amount of time.\nTherefore, your application\
    \ must implement a mechanism to keep track of the `expiresIn` property which is\
    \ the number of hours the token is valid for.\n\n**Note:** The lifespan of a token\
    \ must not be hard-coded on the client-side as the value of `expiresIn` property\
    \ is subject to change without prior notice.\n\n## Making Authenticated Calls\n\
    Apart from the [authenticate](#operation/authenticate) operation, the entire API\
    \ requires `Bearer` authentication scheme and expects a valid JWT token as proof\
    \ of identity.\nThe [cURL](https://github.com/curl/curl) snippet below is an example\
    \ of how to use your access token, in this specific case, to request the list\
    \ of available terminals in your account.\n\n```\ncurl https://testpayments.worldnettps.com/merchant/api/v1/account/terminals?pageSize=10\
    \ \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer\
    \ <JWT Token>\"\n```\n\n**Note:** The API will issue a response with status `401\
    \ Unauthorized` for requests carrying an expired JWT.\n\n# API Requests\nWe provide\
    \ developers looking to integrate with our solutions with a full-featured **Sandbox**.\n\
    \n- Sandbox URL: https://testpayments.worldnettps.com/merchant/\n\nIn order to\
    \ perform actions on the API's resources you must combine your requests with the\
    \ proper [HTTP Request Method](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods).\n\
    \nThe Merchant API supports the following HTTP Methods which are sometimes referred\
    \ as *HTTP Verbs*:\n\nHTTP Method  | Description\n------------ | -------------\n\
    [GET](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET) | It requests\
    \ a representation of the specified resource. Requests using `GET` are read-only.\n\
    [POST](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) | It is\
    \ used to submit an entity to the specified resource, often causing a change in\
    \ state on the server.\n[PATCH](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH)\
    \ | It is used to apply partial modifications to a resource.\n[DELETE](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE)\
    \ | It deletes / cancels / reverts the specified resource.\n\n## Request Identifiers\n\
    The Merchant API assigns a unique identifier for every request that comes in.\
    \ You can find your requests' identifiers either in the `X-Request-Id` header\
    \ or in the Error field `debugIdentifier`.\n\nRequest ID's are part of an effort\
    \ to speed troubleshooting by facilitating communication between clients and our\
    \ support team.\nSince we keep track of all request identifiers in our log files,\
    \ you just need to inform the request's identifier when asking us to assist you\
    \ with problems that might come up during your integrations.\n\n## Customer Account\
    \ Payloads\n\nClient applications need to be able to send the customers' account\
    \ details when generating payments, initiating unreferenced refunds and registering\
    \ secure credentials. \nThis information is expected in the form of payloads which\
    \ varies based on the mechanism used to capture the account/card details.\n\n\
    For instance, when the card details are manually inputted, a `KEYED` payload is\
    \ expected. However, an `EMV` payload is always expected for contact and contactless\
    \ EMV transactions.\nIt is worth mentioning that the proper use of payloads also\
    \ depend on the channel over which your terminal is operating. In the table below\
    \ we show the supported payloads for each of the three available channels:\n\n\
    Channel                      | Supported Payloads\n----------------------------\
    \ | -------------------------\nWEB (eCommerce)              | `KEYED`, `SECURE_CREDENTIALS`,\
    \ `DIGITAL_WALLET`\nPOS (Cardholder Present)     | `KEYED`, `EMV`, `RAW`, `MAG_STRIPE`\n\
    MOTO (Mail/Telephone Order)  | `KEYED`, `SECURE_CREDENTIALS`\n\n## Request Headers\n\
    HTTP Header  | Description\n------------ | -------------\n[Accept](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept)\
    \ | The response format expected by your application.<br />The Merchant API only\
    \ produces `application/json` response format.\n[Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language)\
    \ | It advertises which languages the client is able to understand, and which\
    \ locale variant is preferred.<br />The Merchant API fully supports English `en`\
    \ and French `fr` languages.\n[Content-Type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type)\
    \ | The body format of the request your application is sending to the API.<br\
    \ />The Merchant API only consumes `application/json` content type.\n[Authorization](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization)\
    \ | It must contain the credentials (API Key or JWT Access Token) to authenticate\
    \ your application.<br />The API will issue a `401 Unauthorized` response with\
    \ the `WWW-Authenticate` header attached if your application fails to use this\
    \ header properly.\n[X-Integration-ID](#) | It should be sent in every call by\
    \ ISV integrations that use Merchant-Level API Keys for authentication\n\n## Partial\
    \ Updates\nPartial update requests are signaled with the HTTP method `PATCH`.\n\
    To perform partial updates, clients must specify only the properties that have\
    \ changed.\n\n**Note:** To clear the content of a property, supply an empty value.\n\
    \n## Testing Requests\nEventually it will be necessary to perform some transactions.\n\
    For resources such as testing credit cards and simulated responses, see [Testing\
    \ Resources](https://docs.worldnettps.com/doku.php?id=developer:integration_docs:testing-guide#testing_resources).\n\
    \n# API Responses\nClient applications must be able to handle JSON body format\
    \ as well as a range of [HTTP status codes](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status)\
    \ when processing responses.\nSome resources might also include contextual hypermedia\
    \ links. We strongly recommend that clients use these links to request more information\
    \ or perform additional actions on a given resource.\n\n## HTTP Status Codes\n\
    The Merchant API has adopted a comprehensive range of status codes where `2XX`\
    \ statuses are returned for successful requests and `4XX` or `5XX` for failed\
    \ requests.\n\nThe full range of status codes supported by this API:\n\nHTTP Status\
    \ Code  | Description\n----------------- | -------------\n[200 OK](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200)\
    \ | Indicates that the request has succeeded.\n[201 Created](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/201)\
    \ | Indicates that the request has succeeded and has led to the creation of a\
    \ resource.\n[204 No Content](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204)\
    \ | Indicates that the server successfully executed the method but returns no\
    \ response body.<br />This status is sent specifically to respond to `DELETE`\
    \ requests.\n[400 Bad Request](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400)\
    \ | Indicates that the server cannot or will not process the request due to malformed\
    \ request syntax or schema violation.\n[401 Unauthorized](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401)\
    \ | Indicates that the request has not been applied because it lacks valid authentication\
    \ credentials.<br />This status is sent with a `WWW-Authenticate` header that\
    \ contains information on how to authorize correctly.\n[403 Forbidden](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)\
    \ | Indicates that the server understood the request but refuses to authorize\
    \ it due to the lack of permissions.<br />Re-authenticating will make no difference\
    \ until the proper permissions and terminals are added to the API Key.\n[404 Not\
    \ Found](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404) | Indicates\
    \ that the server cannot find the requested resource.\n[405 Method Not Allowed](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/405)\
    \ | Indicates that the request method is known by the server but is not supported\
    \ by the target resource.\n[406 Not Acceptable](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/406)\
    \ | Indicates that the server cannot produce a response matching the value from\
    \ `Accept` header.\n[415 Unsupported Media Type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/415)\
    \ | Indicates that the server refuses to accept the request because the payload\
    \ format described by the `Content-Type` is unsupported.\n[422 Unprocessable Entity](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/422)\
    \ | Indicates that the server understands the content type of the request entity,\
    \ and the syntax of the request entity is correct, but it was unable to proceed\
    \ due to semantic errors or failed business validations.\n[500 Internal Server\
    \ Error](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500) | Indicates\
    \ that the server encountered an unexpected condition that prevented it from fulfilling\
    \ the request.\n[501 Not Implemented](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/501)\
    \ | Indicates that the server does not yet support the functionality required\
    \ to fulfill the request, but might in the future.\n\n## Error Handling\nIn the\
    \ event of a failure, the Merchant API returns an error response body that includes\
    \ additional details in the format below:\n\n```\n{\n    \"debugIdentifier\":\
    \ \"ae6d75eb-381b-4a01-9f49-fdff12e3848b\",\n    \"details\": [\n        {\n \
    \           \"errorCode\": \"X_400_002\",\n            \"errorMessage\": \"Unable\
    \ to deserialize value\",\n            \"source\": {\n                \"location\"\
    : \"BODY\",\n                \"resource\": \"TipType\",\n                \"property\"\
    : \"type\",\n                \"value\": \"VARIABLE\",\n                \"expected\"\
    : \"Acceptable values: [PERCENTAGE, FIXED_AMOUNT]\"\n            }\n        }\n\
    \    ]\n}\n```\n\nError messages are intended to help developers to fix any problems\
    \ that may come up during integration.<br />However, if you ever have a hard time\
    \ troubleshooting an issue or even wish to make a suggestion, do not hesitate\
    \ to [contact us](https://worldnetpayments.com/contact/).\nDo not forget to send\
    \ us the `debugIdentifier` along with your inquiries.\n\n## HATEOAS (Hypermedia\
    \ Links)\n[HATEOAS](https://en.wikipedia.org/wiki/HATEOAS) is a powerful mechanism\
    \ when it comes to enabling self-discoverability, reducing invalid state transition\
    \ calls and protecting your application against unexpected changes on resources\
    \ URL's.\n\nThis snippet from a sample `payments` response shows the list of hypermedia\
    \ controls that represent the operations available for the newly created payment\
    \ resource.\n\n```\n\"links\": [\n    {\n        \"rel\": \"capture\",\n     \
    \   \"method\": \"PATCH\"\n        \"href\": \"https://testpayments.worldnettps.com/merchant/api/v1/transaction/payments/GH2AERQEJS/capture\"\
    \n    },\n    {\n        \"rel\": \"refund\",\n        \"method\": \"POST\"\n\
    \        \"href\": \"https://testpayments.worldnettps.com/merchant/api/v1/transaction/payments/GH2AERQEJS/refunds\"\
    \n    },\n    {\n        \"rel\": \"update\",\n        \"method\": \"PATCH\"\n\
    \        \"href\": \"https://testpayments.worldnettps.com/merchant/api/v1/transaction/payments/GH2AERQEJS\"\
    \n    },\n    {\n        \"rel\": \"self\",\n        \"method\": \"GET\"\n   \
    \     \"href\": \"https://testpayments.worldnettps.com/merchant/api/v1/transaction/payments/GH2AERQEJS\"\
    \n    },\n    {\n        \"rel\": \"reverse\",\n        \"method\": \"DELETE\"\
    \n        \"href\": \"https://testpayments.worldnettps.com/merchant/api/v1/transaction/payments/GH2AERQEJS\"\
    \n    }\n]\n```\n\n# Pagination\nThe Merchant API features a cursor-based pagination\
    \ which is sometimes referred as continuation token pagination.\nThis pagination\
    \ approach works by returning a pointer to a specific item in the dataset. On\
    \ subsequent requests, the server returns results after the given pointer.\n\n\
    Clients don't need to worry about implementing complex pagination mechanism in\
    \ their applications as we return, for all paginated resources, the total count\
    \ and a hypermedia link that can be used to load more results.\nIt is important\
    \ to mention that the response containing the last elements will not contain a\
    \ `next` hyperlink. We do that so you know that there are no more elements to\
    \ load.\n```\n\"links\": [\n    {\n        \"rel\": \"next\",\n        \"method\"\
    : \"GET\"\n        \"href\": \"https://testpayments.worldnettps.com/merchant/api/v1/account/terminals?next=CWY4XRGUUY\"\
    \n    }\n]\n```\n\nThe default number of elements per page is `10` and the maximum\
    \ is `100`, but it can be changed by adding the query parameter `pageSize` to\
    \ requests as follows:\n```\ncurl https://testpayments.worldnettps.com/merchant/api/v1/account/terminals?pageSize=5\
    \ \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer\
    \ <JWT Token>\"\n```\n\n**Note:** For performance reasons, the elements inside\
    \ of a paginated list only represent a compact version of the resource listed.\n\
    To retrieve the full version of a given resource, client applications must make\
    \ a subsequent request using the proper hypermedia link.\n\n# Versioning\nVersioning\
    \ ensures that changes are backward compatible. The Merchant API uses a major\
    \ and minor version nomenclature to manage changes.\n\n## Major Versions\nMajor\
    \ version numbers will reflect in the REST URL, for example `/api/v1/transaction/payments`.\n\
    \nCurrently, **v1** is the only supported major version.\n\n## Minor Versions\n\
    Minor and backward-compatible changes will be advertised via `X-API-Version` response\
    \ header, for example `X-API-Version: 2020-01-01`.\n\nDevelopers should use this\
    \ header to keep track of new features and optimizations that might benefit their\
    \ applications.\n"
  contact:
    name: Support Team
    url: https://worldnetpayments.com/contact/
    email: support@worldnettps.com
  version: v1
  x-logo:
    url: blank.png
servers:
- url: https://testpayments.worldnettps.com/merchant
  description: Sandbox Server
tags:
- name: tokens
  description: |
    Access tokens are issued every time a valid API Key is provided by using the [authenticate](#operation/authenticate) endpoint.<br />
    Once the API consumer gets hold of an access token, he can immediately start consuming the resources to which his key has been granted access.
  x-displayName: Access Tokens
- name: settings
  description: |
    In this section, you will find the operations to manage the processing terminals and POS devices available in your account. <br />
    The following endpoints allow API consumers to check terminal and device capabilities beforehand in order to tailor their application to prevent unnecessary API calls to non-supported features.
  x-displayName: Settings
- name: cards
  description: |
    The endpoints in this section provide services related to the customer's card, such as balance checks.
  x-displayName: Cards
- name: credentials
  description: |
    The Secure Credentials feature was designed to provide online merchants with the ability to store payment credentials for subsequent use in a secure and PCI-compliant manner within our platform.
    It eliminates the need for merchants to store customer cards and accounts locally on their own systems, avoiding the significant systems and financial overhead of managing their own PCI compliance and registration processes.

    By using the Secure Credentials feature a merchant can access the stored payment details through a ‘token’ number to generate payments on behalf of the cardholder for both ad-hoc and recurring payments.

    ### How it works

    When registering payment credentials, clients may provide a reference value to identify the stored credentials on both sides.
    Although the `Merchant Reference` is optional and auto-generated by our gateway when not provided, clients must still be able to store it on their side to perform CRUD operations on existing credentials.
    In fact, all information from secure credentials registration responses can be stored without any PCI security implications.

    To perform transactions with stored credentials, clients must provide the unique token number generated by our platform.<br />
    This token looks just like a regular card number and can be easily recognized by its BIN "296753".

    The Secure Credentials feature was designed for merchants who want to:

    - Allow customers to make subsequent purchases without having to re-enter card details.
    - Retain cardholder details without the overhead of managing their own PCI compliance.
    - Provide subscription-based payments.
    - Facilitate recurring transactions.
  x-displayName: Secure Credentials
- name: payments
  description: |
    The Payments feature comprehends a set of operations that can be used to take and manage payments. They are useful in a scenario where your application needs full control of the payment cycle.

    Our team has primarily focused on flexibility and usability when building this feature in order to offer the right solutions for our clients' needs.<br />
    Here are a few items to highlight what can be achieved by consuming the Payments API:

    - Authorize and capture payments using various types of payloads through different channels.
    - Cancel and refund payments (Fully or Partially).
    - Perform offline payments.
  x-displayName: Payments
- name: refunds
  description: |
    The Refunds feature provides the ability to issue and manage refund transactions.

    Our platform supports two types of refunds:

    - [Referenced refunds](#operation/refundPayment) which are bound to a previously authorized payment.
    - [Unreferenced refunds](#operation/unreferencedRefund) which do not require a previous payment transaction to be referenced.
  x-displayName: Refunds
- name: transactions
  description: |
    This feature provides the ability for merchants to search for transactions within a certain period
    of time based on a wide set of filters such as order id, customer's name, operator, card number's first six or last four digits, and others.

    API consumers can use the `batchType` parameter to indicate where the search should take place.
    In other words, whether they intend to search for transactions sitting in the current open batch or for captured and settled transactions in one of the closed batches.
  x-displayName: Transactions
paths:
  /api/v1/account/authenticate:
    get:
      tags:
      - tokens
      summary: Authenticate
      description: Use this operation to exchange your `API Key` for a `JWT Token`
        that will give you access to the API.
      operationId: authenticate
      parameters:
      - name: Authorization
        in: header
        required: true
        schema:
          type: string
        example: Basic <Merchant API Key>
      responses:
        200:
          description: JWT Access Token has been issued successfully
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        401:
          description: Authentication failed, the API Key has either been revoked
            or not found
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Authorization failed, the requester's host is not allowed to
            use the API Key
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Basic: []
  /api/v1/account/terminals:
    get:
      tags:
      - settings
      summary: List Terminals
      description: Returns a paginated list of basic information about the terminals
        assigned to the access token via API Key. Use the `load` hypermedia link to
        retrieve the full configuration of a terminal.
      operationId: listTerminals
      parameters:
      - name: pageSize
        in: query
        description: The max number of elements per page.
        schema:
          type: integer
          format: int32
          default: 10
      - name: next
        in: query
        description: The cursor pointing to the next set of elements. You can either
          use the value returned in the response or the hypermedia link to retrieve
          the next page of your search.
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TerminalPaginatedResult'
        400:
          description: 'Bad Request : Indicates that the server cannot or will not
            process the request due to a malformed request syntax.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: 'Unauthorized : Indicates that the request has not been applied
            because it lacks valid authentication credentials.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 'Forbidden : Indicates that the server refuses to authorize
            the request because it lacks the required permissions.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Not Found : Indicates that the server cannot find the requested
            resource.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: 'Unprocessable Entity : Indicates that the request is syntactically
            correct but semantically incorrect.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error : Server encountered an unexpected condition
            that prevented it from fulfilling the request.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        501:
          description: 'Not Implemented : Indicates that the server does not support
            the requested functionality, but it might in future.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer:
        - account-api:full-access
        - account-api:read-only
      x-position: "0"
  /api/v1/customer/cards/balance:
    post:
      tags:
      - cards
      summary: Balance Inquiry
      description: |-
        This feature allows merchants to perform balance inquiries for their customers right at the point of sale.

        **Note:** Currently, we only support balance checks for Electronic Benefits Transfer (EBT) Cards.
      operationId: balanceInquiry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BalanceInquiryRequest'
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Balance'
        400:
          description: 'Bad Request : Indicates that the server cannot or will not
            process the request due to a malformed request syntax.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: 'Unauthorized : Indicates that the request has not been applied
            because it lacks valid authentication credentials.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 'Forbidden : Indicates that the server refuses to authorize
            the request because it lacks the required permissions.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Not Found : Indicates that the server cannot find the requested
            resource.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: 'Unprocessable Entity : Indicates that the request is syntactically
            correct but semantically incorrect.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error : Server encountered an unexpected condition
            that prevented it from fulfilling the request.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        501:
          description: 'Not Implemented : Indicates that the server does not support
            the requested functionality, but it might in future.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer:
        - customer-api:full-access
  /api/v1/customer/credentials:
    post:
      tags:
      - credentials
      summary: Store Credentials
      description: Stores payment credentials of a customer for future use.
      operationId: storeCredentials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreCredentialsRequest'
        required: true
      responses:
        201:
          description: Created
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecureCredentials'
        400:
          description: 'Bad Request : Indicates that the server cannot or will not
            process the request due to a malformed request syntax.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: 'Unauthorized : Indicates that the request has not been applied
            because it lacks valid authentication credentials.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 'Forbidden : Indicates that the server refuses to authorize
            the request because it lacks the required permissions.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Not Found : Indicates that the server cannot find the requested
            resource.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: 'Unprocessable Entity : Indicates that the request is syntactically
            correct but semantically incorrect.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error : Server encountered an unexpected condition
            that prevented it from fulfilling the request.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        501:
          description: 'Not Implemented : Indicates that the server does not support
            the requested functionality, but it might in future.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer:
        - customer-api:full-access
      x-position: "0"
  /api/v1/transaction/payments:
    post:
      tags:
      - payments
      summary: Make a Payment
      description: Processes online or offline authorizations and pre-authorizations
        over POS, eCommerce and MoTo channels.
      operationId: payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
        required: true
      responses:
        201:
          description: Created
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        400:
          description: 'Bad Request : Indicates that the server cannot or will not
            process the request due to a malformed request syntax.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: 'Unauthorized : Indicates that the request has not been applied
            because it lacks valid authentication credentials.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 'Forbidden : Indicates that the server refuses to authorize
            the request because it lacks the required permissions.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Not Found : Indicates that the server cannot find the requested
            resource.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: 'Unprocessable Entity : Indicates that the request is syntactically
            correct but semantically incorrect.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error : Server encountered an unexpected condition
            that prevented it from fulfilling the request.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        501:
          description: 'Not Implemented : Indicates that the server does not support
            the requested functionality, but it might in future.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer:
        - transaction-api:full-access
      x-position: "0"
  /api/v1/transaction/refunds:
    post:
      tags:
      - refunds
      summary: Unreferenced Refund
      description: Unreferenced refunds are refunds that do not require a payment
        transaction to be referenced.<br />They are only available on certain accounts
        upon request to our support team and must also be approved by your Acquiring
        (merchant) bank.<br />As an Unreferenced Refund does not refer to a payment
        transaction, merchants need to provide the card or account to which the refunded
        amount must be transferred.
      operationId: unreferencedRefund
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
        required: true
      responses:
        201:
          description: Created
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
        400:
          description: 'Bad Request : Indicates that the server cannot or will not
            process the request due to a malformed request syntax.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: 'Unauthorized : Indicates that the request has not been applied
            because it lacks valid authentication credentials.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 'Forbidden : Indicates that the server refuses to authorize
            the request because it lacks the required permissions.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Not Found : Indicates that the server cannot find the requested
            resource.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: 'Unprocessable Entity : Indicates that the request is syntactically
            correct but semantically incorrect.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error : Server encountered an unexpected condition
            that prevented it from fulfilling the request.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        501:
          description: 'Not Implemented : Indicates that the server does not support
            the requested functionality, but it might in future.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer:
        - transaction-api:full-access
      x-position: "0"
  /api/v1/transaction/transactions:
    get:
      tags:
      - transactions
      summary: Search Transactions
      description: Search for payments and refunds within a certain period. You can
        narrow down the results by using any combination of the available filters.
      operationId: searchTransactions
      parameters:
      - name: terminal
        in: query
        description: Search for transactions performed by a specific terminal.
        required: true
        schema:
          maxLength: 50
          minLength: 1
          type: string
      - name: afterDate
        in: query
        description: The start date of the search period represented as per [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
          standard.
        schema:
          type: string
          format: date-time
      - name: beforeDate
        in: query
        description: The end date of the search period represented as per [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
          standard.
        schema:
          type: string
          format: date-time
      - name: batchType
        in: query
        description: |-
          Indicates where the search should take place:

          - **OPEN:** Search for transactions sitting in the open batch, i.e. transactions waiting to be settled.
          - **CLOSED:** Search for transactions in one of the terminal's closed batches, i.e. settled transactions.

          Do not use this filter if you want to search both batches in one go.
        schema:
          type: string
          enum:
          - OPEN
          - CLOSED
      - name: settlementDate
        in: query
        description: Search transactions by the date on which they were settled.<br
          />This filter is not compatible with the value **OPEN** of the `batchType`
          filter as only the terminal's closed batches will get searched.
        schema:
          type: string
          format: date
      - name: resourceType
        in: query
        description: This field is optional and should only be used when consumers
          want to search either payments or refunds, but not both.
        schema:
          type: string
          enum:
          - PAYMENT
          - REFUND
      - name: orderId
        in: query
        description: Search transactions by specific order identifiers.
        schema:
          maxLength: 24
          minLength: 1
          type: string
      - name: uniqueReference
        in: query
        description: Search transactions by their unique reference.
        schema:
          maxLength: 10
          minLength: 10
          type: string
      - name: operator
        in: query
        description: Search by the operator that initiated the transactions.
        schema:
          maxLength: 50
          minLength: 1
          type: string
      - name: customerName
        in: query
        description: Search transactions by their cardholder name.
        schema:
          maxLength: 50
          minLength: 1
          type: string
      - name: panFirstSix
        in: query
        description: Search by the first six digits of the primary account number
          (PAN).
        schema:
          pattern: '[0-9]{6}'
          type: string
      - name: panLastFour
        in: query
        description: Search by the last four digits of the primary account number
          (PAN).
        schema:
          pattern: '[0-9]{4}'
          type: string
      - name: statusGroup
        in: query
        description: |
          Search transactions by their status by using the status groups below:

          - **APPROVAL:** Encompasses `PENDING`, `READY` and `COMPLETE` statuses.
          - **REVERSAL:** Encompasses `VOID` and `REVERSAL` statuses.
          - **ACCEPTED:** Refers to `IN_PROGRESS` status only.
          - **DECLINED:** Refers to `DECLINED` status only.
          - **REFERRAL:** Refers to `REFERRAL` status only.
        schema:
          type: string
          enum:
          - APPROVAL
          - DECLINED
          - REVERSAL
          - REFERRAL
          - ACCEPTED
      - name: pageSize
        in: query
        description: The max number of elements per page.
        schema:
          type: integer
          format: int32
          default: 10
      - name: next
        in: query
        description: The cursor pointing to the next set of elements. You can either
          use the value returned in the response or the hypermedia link to retrieve
          the next page of your search.
        schema:
          type: string
      responses:
        200:
          description: OK
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionPaginatedResult'
        400:
          description: 'Bad Request : Indicates that the server cannot or will not
            process the request due to a malformed request syntax.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: 'Unauthorized : Indicates that the request has not been applied
            because it lacks valid authentication credentials.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 'Forbidden : Indicates that the server refuses to authorize
            the request because it lacks the required permissions.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Not Found : Indicates that the server cannot find the requested
            resource.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: 'Unprocessable Entity : Indicates that the request is syntactically
            correct but semantically incorrect.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error : Server encountered an unexpected condition
            that prevented it from fulfilling the request.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        501:
          description: 'Not Implemented : Indicates that the server does not support
            the requested functionality, but it might in future.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer:
        - transaction-api:full-access
        - transaction-api:read-only
  /api/v1/account/terminals/{terminalNumber}:
    get:
      tags:
      - settings
      summary: Load Terminal
      description: Loads the full details about the terminal's configuration. Supply
        the number of one of the terminals returned by the list operation.
      operationId: loadTerminal
      parameters:
      - name: terminalNumber
        in: path
        description: Unique number assigned by the gateway.
        required: true
        schema:
          maxLength: 50
          minLength: 1
          type: string
      responses:
        200:
          description: OK
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Terminal'
        400:
          description: 'Bad Request : Indicates that the server cannot or will not
            process the request due to a malformed request syntax.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: 'Unauthorized : Indicates that the request has not been applied
            because it lacks valid authentication credentials.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 'Forbidden : Indicates that the server refuses to authorize
            the request because it lacks the required permissions.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Not Found : Indicates that the server cannot find the requested
            resource.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: 'Unprocessable Entity : Indicates that the request is syntactically
            correct but semantically incorrect.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error : Server encountered an unexpected condition
            that prevented it from fulfilling the request.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        501:
          description: 'Not Implemented : Indicates that the server does not support
            the requested functionality, but it might in future.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer:
        - account-api:full-access
        - account-api:read-only
      x-position: "1"
    patch:
      tags:
      - settings
      summary: Update Terminal
      description: Partially updates the configuration of a terminal. Currently, it
        is only possible to update tips and taxes.
      operationId: updateTerminal
      parameters:
      - name: terminalNumber
        in: path
        description: Unique number assigned by the gateway.
        required: true
        schema:
          maxLength: 50
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTerminalRequest'
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Terminal'
        400:
          description: 'Bad Request : Indicates that the server cannot or will not
            process the request due to a malformed request syntax.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: 'Unauthorized : Indicates that the request has not been applied
            because it lacks valid authentication credentials.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 'Forbidden : Indicates that the server refuses to authorize
            the request because it lacks the required permissions.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Not Found : Indicates that the server cannot find the requested
            resource.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: 'Unprocessable Entity : Indicates that the request is syntactically
            correct but semantically incorrect.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error : Server encountered an unexpected condition
            that prevented it from fulfilling the request.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        501:
          description: 'Not Implemented : Indicates that the server does not support
            the requested functionality, but it might in future.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer:
        - account-api:full-access
      x-position: "2"
  /api/v1/customer/credentials/{merchantReference}:
    get:
      tags:
      - credentials
      summary: Get Credentials
      description: Retrieves the information about previously stored secure credentials.
      operationId: getCredentials
      parameters:
      - name: terminal
        in: query
        description: Unique number assigned by the gateway.
        required: true
        schema:
          maxLength: 50
          minLength: 1
          type: string
      - name: merchantReference
        in: path
        description: Unique merchant reference that identifies the stored credentials
          on both merchant's and gateway's sides.
        required: true
        schema:
          maxLength: 48
          minLength: 1
          type: string
      responses:
        200:
          description: OK
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecureCredentials'
        400:
          description: 'Bad Request : Indicates that the server cannot or will not
            process the request due to a malformed request syntax.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: 'Unauthorized : Indicates that the request has not been applied
            because it lacks valid authentication credentials.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 'Forbidden : Indicates that the server refuses to authorize
            the request because it lacks the required permissions.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Not Found : Indicates that the server cannot find the requested
            resource.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: 'Unprocessable Entity : Indicates that the request is syntactically
            correct but semantically incorrect.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error : Server encountered an unexpected condition
            that prevented it from fulfilling the request.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        501:
          description: 'Not Implemented : Indicates that the server does not support
            the requested functionality, but it might in future.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer:
        - customer-api:full-access
        - customer-api:read-only
      x-position: "1"
    delete:
      tags:
      - credentials
      summary: Delete Credentials
      description: Performs a logical removal of existing secure credentials.<br />It
        is important to mention that `Merchant References` of deleted credentials
        cannot be reused.<br />This is because they are tied to existing transactions
        in our system and are retained internally for data integrity and future refund
        functionality.
      operationId: deleteCredentials
      parameters:
      - name: terminal
        in: query
        description: Unique number assigned by the gateway.
        required: true
        schema:
          maxLength: 50
          minLength: 1
          type: string
      - name: merchantReference
        in: path
        description: Unique merchant reference that identifies the stored credentials
          on both merchant's and gateway's sides.
        required: true
        schema:
          maxLength: 48
          minLength: 1
          type: string
      responses:
        204:
          description: No Content
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
        400:
          description: 'Bad Request : Indicates that the server cannot or will not
            process the request due to a malformed request syntax.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: 'Unauthorized : Indicates that the request has not been applied
            because it lacks valid authentication credentials.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 'Forbidden : Indicates that the server refuses to authorize
            the request because it lacks the required permissions.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Not Found : Indicates that the server cannot find the requested
            resource.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: 'Unprocessable Entity : Indicates that the request is syntactically
            correct but semantically incorrect.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error : Server encountered an unexpected condition
            that prevented it from fulfilling the request.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        501:
          description: 'Not Implemented : Indicates that the server does not support
            the requested functionality, but it might in future.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer:
        - customer-api:full-access
      x-position: "2"
    patch:
      tags:
      - credentials
      summary: Update Credentials
      description: Performs a partial update on the information of existing secure
        credentials.
      operationId: updateCredentials
      parameters:
      - name: merchantReference
        in: path
        description: Unique merchant reference that identifies the stored credentials
          on both merchant's and gateway's sides.
        required: true
        schema:
          maxLength: 48
          minLength: 1
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCredentialsRequest'
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecureCredentials'
        400:
          description: 'Bad Request : Indicates that the server cannot or will not
            process the request due to a malformed request syntax.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: 'Unauthorized : Indicates that the request has not been applied
            because it lacks valid authentication credentials.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 'Forbidden : Indicates that the server refuses to authorize
            the request because it lacks the required permissions.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Not Found : Indicates that the server cannot find the requested
            resource.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: 'Unprocessable Entity : Indicates that the request is syntactically
            correct but semantically incorrect.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error : Server encountered an unexpected condition
            that prevented it from fulfilling the request.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        501:
          description: 'Not Implemented : Indicates that the server does not support
            the requested functionality, but it might in future.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer:
        - customer-api:full-access
      x-position: "3"
  /api/v1/transaction/payments/{uniqueReference}:
    get:
      tags:
      - payments
      summary: Get a Payment
      description: Retrieves the information about an existing payment.
      operationId: getPayment
      parameters:
      - name: uniqueReference
        in: path
        description: Unique reference number assigned by the gateway.
        required: true
        schema:
          maxLength: 10
          minLength: 10
          type: string
      responses:
        200:
          description: OK
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        400:
          description: 'Bad Request : Indicates that the server cannot or will not
            process the request due to a malformed request syntax.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: 'Unauthorized : Indicates that the request has not been applied
            because it lacks valid authentication credentials.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 'Forbidden : Indicates that the server refuses to authorize
            the request because it lacks the required permissions.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Not Found : Indicates that the server cannot find the requested
            resource.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: 'Unprocessable Entity : Indicates that the request is syntactically
            correct but semantically incorrect.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error : Server encountered an unexpected condition
            that prevented it from fulfilling the request.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        501:
          description: 'Not Implemented : Indicates that the server does not support
            the requested functionality, but it might in future.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer:
        - transaction-api:full-access
        - transaction-api:read-only
      x-position: "1"
    patch:
      tags:
      - payments
      summary: Update a Payment
      description: "Performs a partial update on the information of an existing payment.\
        \ This operation allows you to update the operator, customer contact details\
        \ and the transaction's status.<br />The status of a transaction can be updated\
        \ as long as the change respect the following constraints:\n\nCURRENT STATUS\
        \ | TO READY | TO PENDING | TO DECLINED\n---------------|:--------:|:----------:|:----------:\n\
        **READY**      | NO       | YES        | NO         \n**PENDING**    | YES\
        \      | NO         | NO         \n**REFERRAL**   | YES      | YES       \
        \ | NO         \n**REVIEW**     | YES      | YES        | YES        "
      operationId: updatePayment
      parameters:
      - name: uniqueReference
        in: path
        description: Unique reference number assigned by the gateway.
        required: true
        schema:
          maxLength: 10
          minLength: 10
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePaymentRequest'
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        400:
          description: 'Bad Request : Indicates that the server cannot or will not
            process the request due to a malformed request syntax.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: 'Unauthorized : Indicates that the request has not been applied
            because it lacks valid authentication credentials.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 'Forbidden : Indicates that the server refuses to authorize
            the request because it lacks the required permissions.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Not Found : Indicates that the server cannot find the requested
            resource.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: 'Unprocessable Entity : Indicates that the request is syntactically
            correct but semantically incorrect.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error : Server encountered an unexpected condition
            that prevented it from fulfilling the request.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        501:
          description: 'Not Implemented : Indicates that the server does not support
            the requested functionality, but it might in future.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer:
        - transaction-api:full-access
      x-position: "3"
  /api/v1/transaction/refunds/{uniqueReference}:
    get:
      tags:
      - refunds
      summary: Get a Refund
      description: Retrieves the information about an existing referenced or unreferenced
        refund.
      operationId: getRefund
      parameters:
      - name: uniqueReference
        in: path
        description: Unique reference number assigned by the gateway.
        required: true
        schema:
          maxLength: 10
          minLength: 10
          type: string
      responses:
        200:
          description: OK
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
        400:
          description: 'Bad Request : Indicates that the server cannot or will not
            process the request due to a malformed request syntax.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: 'Unauthorized : Indicates that the request has not been applied
            because it lacks valid authentication credentials.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 'Forbidden : Indicates that the server refuses to authorize
            the request because it lacks the required permissions.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Not Found : Indicates that the server cannot find the requested
            resource.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: 'Unprocessable Entity : Indicates that the request is syntactically
            correct but semantically incorrect.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error : Server encountered an unexpected condition
            that prevented it from fulfilling the request.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        501:
          description: 'Not Implemented : Indicates that the server does not support
            the requested functionality, but it might in future.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer:
        - transaction-api:full-access
        - transaction-api:read-only
      x-position: "1"
    patch:
      tags:
      - refunds
      summary: Update a Refund
      description: "Performs a partial update on the information of an existing refund.\
        \ This operation allows you to update the operator, customer contact details\
        \ and the transaction's status.<br />The status of a transaction can be updated\
        \ as long as the change respect the following constraints:\n\nCURRENT STATUS\
        \ | TO READY | TO PENDING | TO DECLINED\n---------------|:--------:|:----------:|:----------:\n\
        **READY**      | NO       | YES        | NO         \n**PENDING**    | YES\
        \      | NO         | NO         \n**REFERRAL**   | YES      | YES       \
        \ | NO         \n**REVIEW**     | YES      | YES        | YES        "
      operationId: updateRefund
      parameters:
      - name: uniqueReference
        in: path
        description: Unique reference number assigned by the gateway.
        required: true
        schema:
          maxLength: 10
          minLength: 10
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRefundRequest'
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
        400:
          description: 'Bad Request : Indicates that the server cannot or will not
            process the request due to a malformed request syntax.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: 'Unauthorized : Indicates that the request has not been applied
            because it lacks valid authentication credentials.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 'Forbidden : Indicates that the server refuses to authorize
            the request because it lacks the required permissions.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Not Found : Indicates that the server cannot find the requested
            resource.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: 'Unprocessable Entity : Indicates that the request is syntactically
            correct but semantically incorrect.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error : Server encountered an unexpected condition
            that prevented it from fulfilling the request.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        501:
          description: 'Not Implemented : Indicates that the server does not support
            the requested functionality, but it might in future.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer:
        - transaction-api:full-access
      x-position: "3"
  /api/v1/transaction/payments/{uniqueReference}/reverse:
    patch:
      tags:
      - payments
      summary: Reverse a Payment
      description: Performs the reversal/cancellation of an existing payment.
      operationId: reversePayment
      parameters:
      - name: uniqueReference
        in: path
        description: Unique reference number assigned by the gateway.
        required: true
        schema:
          maxLength: 10
          minLength: 10
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReversePaymentRequest'
      responses:
        200:
          description: OK
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        400:
          description: 'Bad Request : Indicates that the server cannot or will not
            process the request due to a malformed request syntax.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: 'Unauthorized : Indicates that the request has not been applied
            because it lacks valid authentication credentials.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 'Forbidden : Indicates that the server refuses to authorize
            the request because it lacks the required permissions.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Not Found : Indicates that the server cannot find the requested
            resource.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: 'Unprocessable Entity : Indicates that the request is syntactically
            correct but semantically incorrect.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error : Server encountered an unexpected condition
            that prevented it from fulfilling the request.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        501:
          description: 'Not Implemented : Indicates that the server does not support
            the requested functionality, but it might in future.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer:
        - transaction-api:full-access
      x-position: "2"
  /api/v1/transaction/refunds/{uniqueReference}/reverse:
    patch:
      tags:
      - refunds
      summary: Reverse a Refund
      description: Performs the reversal/cancellation of an existing refund.
      operationId: reverseRefund
      parameters:
      - name: uniqueReference
        in: path
        description: Unique reference number assigned by the gateway.
        required: true
        schema:
          maxLength: 10
          minLength: 10
          type: string
      responses:
        200:
          description: OK
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
        400:
          description: 'Bad Request : Indicates that the server cannot or will not
            process the request due to a malformed request syntax.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: 'Unauthorized : Indicates that the request has not been applied
            because it lacks valid authentication credentials.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 'Forbidden : Indicates that the server refuses to authorize
            the request because it lacks the required permissions.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Not Found : Indicates that the server cannot find the requested
            resource.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: 'Unprocessable Entity : Indicates that the request is syntactically
            correct but semantically incorrect.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error : Server encountered an unexpected condition
            that prevented it from fulfilling the request.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        501:
          description: 'Not Implemented : Indicates that the server does not support
            the requested functionality, but it might in future.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer:
        - transaction-api:full-access
      x-position: "2"
  /api/v1/account/terminals/{terminalNumber}/endOfDay:
    patch:
      tags:
      - settings
      summary: End Of Day
      description: For terminals in manual settle mode, this operation must be used
        to indicate the end-of-day closing so that clearing and settlement processes
        can take place.
      operationId: endOfDay
      parameters:
      - name: terminalNumber
        in: path
        description: Unique number assigned by the gateway.
        required: true
        schema:
          maxLength: 50
          minLength: 1
          type: string
      responses:
        200:
          description: OK
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Terminal'
        400:
          description: 'Bad Request : Indicates that the server cannot or will not
            process the request due to a malformed request syntax.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: 'Unauthorized : Indicates that the request has not been applied
            because it lacks valid authentication credentials.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 'Forbidden : Indicates that the server refuses to authorize
            the request because it lacks the required permissions.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Not Found : Indicates that the server cannot find the requested
            resource.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: 'Unprocessable Entity : Indicates that the request is syntactically
            correct but semantically incorrect.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error : Server encountered an unexpected condition
            that prevented it from fulfilling the request.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        501:
          description: 'Not Implemented : Indicates that the server does not support
            the requested functionality, but it might in future.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer:
        - account-api:full-access
      x-position: "3"
  /api/v1/account/terminals/{terminalNumber}/devices:
    get:
      tags:
      - settings
      summary: List POS Device Types
      description: Returns a paginated list of basic information about the POS device
        types supported by the terminal. Use the `load` hypermedia link to retrieve
        the complete information about a POS device type.
      operationId: listDeviceTypes
      parameters:
      - name: pageSize
        in: query
        description: The max number of elements per page.
        schema:
          type: integer
          format: int32
          default: 10
      - name: next
        in: query
        description: The cursor pointing to the next set of elements. You can either
          use the value returned in the response or the hypermedia link to retrieve
          the next page of your search.
        schema:
          type: string
      - name: terminalNumber
        in: path
        description: Unique number assigned by the gateway.
        required: true
        schema:
          maxLength: 50
          minLength: 1
          type: string
      responses:
        200:
          description: OK
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicePaginatedResult'
        400:
          description: 'Bad Request : Indicates that the server cannot or will not
            process the request due to a malformed request syntax.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: 'Unauthorized : Indicates that the request has not been applied
            because it lacks valid authentication credentials.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 'Forbidden : Indicates that the server refuses to authorize
            the request because it lacks the required permissions.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Not Found : Indicates that the server cannot find the requested
            resource.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: 'Unprocessable Entity : Indicates that the request is syntactically
            correct but semantically incorrect.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error : Server encountered an unexpected condition
            that prevented it from fulfilling the request.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        501:
          description: 'Not Implemented : Indicates that the server does not support
            the requested functionality, but it might in future.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer:
        - account-api:full-access
        - account-api:read-only
      x-position: "4"
  /api/v1/customer/credentials/transactions:
    post:
      tags:
      - credentials
      summary: Search Latest Transactions
      description: |-
        Retrieves the history of transactions for a credential in the scope of a Merchant Portfolio.

        **Note:** Only `MAG_STRIP` and `EMV` payloads are supported at the moment.
      operationId: searchCredentialTransactions
      parameters:
      - name: pageSize
        in: query
        description: The max number of elements per page.
        schema:
          type: integer
          format: int32
          default: 10
      - name: next
        in: query
        description: The cursor pointing to the next set of elements. You can either
          use the value returned in the response or the hypermedia link to retrieve
          the next page of your search.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchCredentialTransactionsRequest'
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionPaginatedResult'
        400:
          description: 'Bad Request : Indicates that the server cannot or will not
            process the request due to a malformed request syntax.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: 'Unauthorized : Indicates that the request has not been applied
            because it lacks valid authentication credentials.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 'Forbidden : Indicates that the server refuses to authorize
            the request because it lacks the required permissions.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Not Found : Indicates that the server cannot find the requested
            resource.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: 'Unprocessable Entity : Indicates that the request is syntactically
            correct but semantically incorrect.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error : Server encountered an unexpected condition
            that prevented it from fulfilling the request.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        501:
          description: 'Not Implemented : Indicates that the server does not support
            the requested functionality, but it might in future.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer:
        - customer-api:full-access
        - customer-api:read-only
      x-position: "4"
  /api/v1/transaction/payments/{uniqueReference}/capture:
    patch:
      tags:
      - payments
      summary: Capture a Payment
      description: Captures the amount of an existing (pre) authorization to make
        it available for settlement. It is possible to capture an amount that differs
        from the one previously authorized as long as the payment processor safe margin
        is respected.
      operationId: capturePayment
      parameters:
      - name: uniqueReference
        in: path
        description: Unique reference number assigned by the gateway.
        required: true
        schema:
          maxLength: 10
          minLength: 10
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CapturePaymentRequest'
        required: true
      responses:
        200:
          description: OK
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        400:
          description: 'Bad Request : Indicates that the server cannot or will not
            process the request due to a malformed request syntax.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: 'Unauthorized : Indicates that the request has not been applied
            because it lacks valid authentication credentials.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 'Forbidden : Indicates that the server refuses to authorize
            the request because it lacks the required permissions.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Not Found : Indicates that the server cannot find the requested
            resource.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: 'Unprocessable Entity : Indicates that the request is syntactically
            correct but semantically incorrect.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error : Server encountered an unexpected condition
            that prevented it from fulfilling the request.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        501:
          description: 'Not Implemented : Indicates that the server does not support
            the requested functionality, but it might in future.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer:
        - transaction-api:full-access
      x-position: "4"
  /api/v1/account/terminals/{terminalNumber}/devices/{type}:
    get:
      tags:
      - settings
      summary: Load POS Device Type
      description: Loads the full details about the device's configuration. Supply
        the type of one of the devices returned by the list operation.
      operationId: loadDeviceType
      parameters:
      - name: X-POS-Device-Firmware-Version
        in: header
        description: Firmware version of the point-of-sale terminal.
        schema:
          type: string
      - name: terminalNumber
        in: path
        description: Unique number assigned by the gateway.
        required: true
        schema:
          maxLength: 50
          minLength: 1
          type: string
      - name: type
        in: path
        description: Type/Model of the point-of-sale terminal.
        required: true
        schema:
          maxLength: 30
          minLength: 1
          type: string
      responses:
        200:
          description: OK
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceType'
        400:
          description: 'Bad Request : Indicates that the server cannot or will not
            process the request due to a malformed request syntax.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: 'Unauthorized : Indicates that the request has not been applied
            because it lacks valid authentication credentials.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 'Forbidden : Indicates that the server refuses to authorize
            the request because it lacks the required permissions.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Not Found : Indicates that the server cannot find the requested
            resource.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: 'Unprocessable Entity : Indicates that the request is syntactically
            correct but semantically incorrect.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error : Server encountered an unexpected condition
            that prevented it from fulfilling the request.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        501:
          description: 'Not Implemented : Indicates that the server does not support
            the requested functionality, but it might in future.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer:
        - account-api:full-access
        - account-api:read-only
      x-position: "5"
  /api/v1/transaction/payments/{uniqueReference}/refunds:
    post:
      tags:
      - payments
      summary: Refund a Payment
      description: |-
        Returns the funds of an existing payment to the customer. Refunds can be performed on any authorized transaction in our platform, either in the Open Batch or Closed Batch. By default, you are allowed to refund any amount up to 100% of the original transaction amount. In order to prevent fraud, when multiple partial refunds are performed then the sum total of them cannot exceed 100% of the total authorized amount. The refund limit is configurable at a terminal level and if you wish to alter it please contact our support team with a reason why you need it altered.

        **Note:** If you need to issue a refund without referencing a previous transaction, please refer to the [Unreferenced Refund](#operation/unreferencedRefund) operation.
      operationId: refundPayment
      parameters:
      - name: uniqueReference
        in: path
        description: Unique reference number assigned by the gateway.
        required: true
        schema:
          maxLength: 10
          minLength: 10
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundPaymentRequest'
        required: true
      responses:
        201:
          description: Created
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
        400:
          description: 'Bad Request : Indicates that the server cannot or will not
            process the request due to a malformed request syntax.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: 'Unauthorized : Indicates that the request has not been applied
            because it lacks valid authentication credentials.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 'Forbidden : Indicates that the server refuses to authorize
            the request because it lacks the required permissions.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: 'Not Found : Indicates that the server cannot find the requested
            resource.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: 'Unprocessable Entity : Indicates that the request is syntactically
            correct but semantically incorrect.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: 'Internal Server Error : Server encountered an unexpected condition
            that prevented it from fulfilling the request.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        501:
          description: 'Not Implemented : Indicates that the server does not support
            the requested functionality, but it might in future.'
          headers:
            X-Request-Id:
              description: Unique identifier assigned by the gateway for each request.
              style: simple
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - Bearer:
        - transaction-api:full-access
      x-position: "5"
components:
  schemas:
    AccessToken:
      required:
      - audience
      - boundTo
      - enableHypermedia
      - enableReceipts
      - expiresIn
      - token
      - tokenType
      type: object
      properties:
        audience:
          type: string
          description: The intended audience for the token
        boundTo:
          type: string
          description: Alias of the Merchant API Key to which the access token is
            bound
        tokenType:
          type: string
          description: Authentication scheme
          example: Bearer
        token:
          type: string
          description: JWT Access Token
        expiresIn:
          type: integer
          description: Number of hours after which the token will be expired
          format: int32
        enableReceipts:
          type: boolean
          description: Indicates whether transaction responses should contains the
            cardholder and merchant receipt copies
        enableHypermedia:
          type: boolean
          description: Indicates whether responses should contains hypermedia links
        roles:
          uniqueItems: true
          type: array
          description: Set of roles with which the token was granted
          example: transaction-api:read-only
          items:
            type: string
            description: Set of roles with which the token was granted
            example: transaction-api:read-only
        allowedTerminals:
          uniqueItems: true
          type: array
          description: Set of terminal numbers with which the token is allowed to
            operate
          items:
            type: string
            description: Set of terminal numbers with which the token is allowed to
              operate
    Error:
      required:
      - debugIdentifier
      - details
      type: object
      properties:
        debugIdentifier:
          type: string
          description: Clients should use this field when communicating to our support
            team. It allows us to easily identify the request and consequently the
            reason behind its failure.
        details:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ErrorDetail'
    ErrorDetail:
      required:
      - errorCode
      - errorMessage
      type: object
      properties:
        errorCode:
          type: string
          description: A code assigned by the gateway to each type of failure.
        errorMessage:
          type: string
          description: A brief description of the given error.
        about:
          type: string
          description: A link to an external documentation that fully explains the
            issue.
          format: uri
        source:
          $ref: '#/components/schemas/ErrorSource'
    ErrorSource:
      required:
      - location
      type: object
      properties:
        location:
          type: string
          description: The HTTP message element that contains the invalid value.
          enum:
          - HEADER
          - BODY
          - PATH
          - QUERY
        resource:
          type: string
          description: For errors in the request body, this field points to the object
            that contains the invalid property.
        property:
          type: string
          description: The field or parameter that carries the invalid value.
        value:
          type: string
          description: Invalid value sent by the client.
        expected:
          type: string
          description: Here the server gives a hint of how the client should fix the
            issue.
    Address:
      type: object
      properties:
        line1:
          maxLength: 50
          minLength: 0
          type: string
          description: The first line of the address.<br />This field is used for
            AVS checks along with `city` and `postalCode`.
        line2:
          maxLength: 50
          minLength: 0
          type: string
          description: The second line of the address, if any.
        postalCode:
          maxLength: 50
          minLength: 0
          type: string
          description: The address's ZIP or postal code.
        city:
          maxLength: 128
          minLength: 0
          type: string
          description: The city or town of the address.
        state:
          maxLength: 128
          minLength: 0
          type: string
          description: The state, county, province, or region.
        country:
          maxLength: 2
          minLength: 2
          type: string
          description: The two-letter country code defined by [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
            standard.
    AddressVerificationSystem:
      type: object
      properties:
        enable:
          type: boolean
          description: Indicates whether AVS check is available for the terminal and
            merchants may send cardholder’s billing address for verification.
        compulsory:
          type: boolean
          description: If enabled, it ensures that a transaction will never be processed
            without billing address information.
        autoDeclineOnFailure:
          type: boolean
          description: Indicates that all AVS non-match will lead to a transaction
            decline. This is sometimes desirable as not all card issuers will decline
            a transaction that has failed an AVS check.
        preferredAddressMode:
          type: string
          description: |-
            This field defines a configuration for the execution and validation of AVS transactions.

            - Exact: At least the first line of the address as well as city and postal code are mandatory.
            - Postal: Only postal code is mandatory when filling up customer's billing address.
          enum:
          - EXACT
          - POSTAL
        approvalCodes:
          uniqueItems: true
          type: array
          description: List of AVS result codes that are considered to be a match.
            The codes left out of this list will lead to a transaction decline when
            `autoDeclineTransactionsOnAvsFailures` is enabled.
          items:
            type: string
            description: List of AVS result codes that are considered to be a match.
              The codes left out of this list will lead to a transaction decline when
              `autoDeclineTransactionsOnAvsFailures` is enabled.
            enum:
            - Y
            - A
            - Z
            - N
            - U
            - R
            - G
            - S
            - F
            - W
            - X
    CardLevelLimit:
      required:
      - card
      - limits
      type: object
      properties:
        card:
          type: string
          description: The card brand to which the list of volume limits below will
            be applied.
        limits:
          type: array
          description: List of limits to be applied to transactions using the brand
            specified in the property `card`.
          items:
            $ref: '#/components/schemas/CardVolumeLimit'
      description: List of card-level volume limits.
    CardSecurityCodeVerification:
      type: object
      properties:
        enable:
          type: boolean
          description: Indicates whether CVV check is available for the terminal.
        autoDeclineOnFailure:
          type: boolean
          description: Indicates that all CVV codes listed in `cvvDeclineCodes` property
            will lead to a transaction decline.This is sometimes desirable as not
            all card issuers will decline a transaction that has failed a CVV check.
        declineCodes:
          uniqueItems: true
          type: array
          description: List of CVV result codes that will lead to a transaction decline
            when `autoDeclineTransactionsOnCvvFailures` is enabled.
          items:
            type: string
            description: List of CVV result codes that will lead to a transaction
              decline when `autoDeclineTransactionsOnCvvFailures` is enabled.
            enum:
            - M
            - N
            - P
            - U
    CardVolumeLimit:
      required:
      - limitScope
      - limitThreshold
      type: object
      properties:
        limitScope:
          type: string
          enum:
          - DAILY
          - MONTHLY
          - SINGLE_TRANSACTION
        limitThreshold:
          type: integer
          description: The maximum amount allowed within the period described in the
            `limitScope` attribute.
          format: int32
        withoutCvvOnly:
          type: boolean
          description: If enabled, the limit will only take transactions without CVV
            into account. This is specially useful for merchants who are looking for
            a way to add thresholds for transactions that may lead to chargebacks.<br
            />This filter only applies to limits within `SINGLE_TRANSACTION` scope.
        withoutAvsOnly:
          type: boolean
          description: If enabled, the limit will only take transactions without AVS
            into account. This is specially useful for merchants who are looking for
            a way to add thresholds for transactions that may lead to chargebacks.<br
            />This filter only applies to limits within `SINGLE_TRANSACTION` scope.
        currentValue:
          type: number
          description: The sum of all transactions performed with the `card` within
            the period described in the `limitScope` attribute.<br />At the end of
            each period, this value is reset.
      description: List of limits to be applied to transactions using the brand specified
        in the property `card`.
    HypermediaLink:
      type: object
      properties:
        rel:
          type: string
          description: Keyword that represents the action that the link is supposed
            to perform.
        method:
          type: string
          description: The HTTP method or verb.
          example: POST
        href:
          type: string
          description: The actual request URL.
      description: List of hypermedia links containing the operations available for
        the resource.
    MerchantDetails:
      required:
      - email
      - mcc
      - name
      - phone
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: Merchant's DBA (Doing Business As). This information will appear
            on transaction receipts.
        mcc:
          maxLength: 4
          minLength: 4
          pattern: ^[0-9]*$
          type: string
          description: Merchant Category Code. It is a four-digit number listed in
            ISO 18245 for retail financial services. An MCC is used to classify a
            business by the types of goods or services it provides.
        phone:
          maxLength: 100
          minLength: 1
          type: string
          description: Merchant's phone number. This information will appear on transaction
            receipts.
        email:
          maxLength: 100
          minLength: 1
          type: string
          description: Merchant's email address. This information will appear on transaction
            receipts.
        website:
          maxLength: 100
          minLength: 0
          type: string
          description: Merchant's web page. This information will appear on transaction
            receipts.
        address:
          $ref: '#/components/schemas/Address'
        merchantVolumeLimits:
          type: array
          description: List of merchant-level volume limits.
          items:
            $ref: '#/components/schemas/MerchantLevelLimit'
      description: Basic information about the merchant.
    MerchantLevelLimit:
      required:
      - limitScope
      - limitThreshold
      type: object
      properties:
        limitScope:
          type: string
          enum:
          - DAILY
          - MONTHLY
          - SINGLE_TRANSACTION
        limitThreshold:
          type: integer
          description: The maximum amount allowed within the period described in the
            `limitScope` attribute.
          format: int32
        withoutCvvOnly:
          type: boolean
          description: If enabled, the limit will only take transactions without CVV
            into account. This is specially useful for merchants who are looking for
            a way to add thresholds for transactions that may lead to chargebacks.<br
            />This filter only applies to limits within `SINGLE_TRANSACTION` scope.
        withoutAvsOnly:
          type: boolean
          description: If enabled, the limit will only take transactions without AVS
            into account. This is specially useful for merchants who are looking for
            a way to add thresholds for transactions that may lead to chargebacks.<br
            />This filter only applies to limits within `SINGLE_TRANSACTION` scope.
      description: List of merchant-level volume limits.
    ProcessingRule:
      required:
      - conditions
      - enable
      - then
      type: object
      properties:
        enable:
          type: boolean
          description: Indicates whether the rule should be evaluated.
        conditions:
          uniqueItems: true
          type: array
          description: The conditions that trigger the action, if met.
          items:
            $ref: '#/components/schemas/ProcessingRulePredicate'
        then:
          $ref: '#/components/schemas/ProcessingRuleInstruction'
      description: The list of rules that allows for changing the way transactions
        are processed by this terminal. Each rule has its own conditions which leads
        to a certain action when all of them are met.<br />For example, processing
        rules can be used to route transactions to other terminals in your account.
    ProcessingRuleInstruction:
      required:
      - action
      type: object
      properties:
        action:
          type: string
          description: The action to be performed when the conditions are met.
          enum:
          - ROUTE_TO_TERMINAL
        terminal:
          type: string
          description: The number of the terminal which is the target of the action.
      description: It describes the action that should be executed.
    ProcessingRulePredicate:
      required:
      - when
      type: object
      properties:
        when:
          type: string
      description: The conditions that trigger the action, if met.
      discriminator:
        propertyName: when
        mapping:
          TENDER_TYPE: '#/components/schemas/TenderTypePredicate'
    SecureCredentialsSettings:
      required:
      - enable
      - enableSecureCardValidation
      - forceSecureCardValidation
      type: object
      properties:
        enable:
          type: boolean
          description: Indicates whether the terminal supports secure credentials
            which is our tokenization mechanism for cards and accounts.
        enableSecureCardValidation:
          type: boolean
          description: Indicates that account verifications will be performed when
            the secure code (CVV) is provided during Secure Card registrations.
        forceSecureCardValidation:
          type: boolean
          description: Indicates that account verifications are mandatory for all
            Secure Card registrations.
    SurchargeSettings:
      type: object
      properties:
        enable:
          type: boolean
          default: false
        percentage:
          maximum: 4.0
          exclusiveMaximum: false
          minimum: 0.1
          exclusiveMinimum: false
          type: number
          format: double
    TenderTypePredicate:
      required:
      - is
      - value
      - when
      type: object
      allOf:
      - $ref: '#/components/schemas/ProcessingRulePredicate'
      - type: object
        properties:
          is:
            type: string
            description: The comparison operator.
            enum:
            - EQUALS
          value:
            type: string
            description: The required value for the condition to be met.
            enum:
            - CREDIT_DEBIT
            - EBT
      x-discriminator-value: TENDER_TYPE
    Terminal:
      required:
      - paymentProcessor
      - terminalNumber
      type: object
      properties:
        paymentProcessor:
          maxLength: 128
          minLength: 0
          type: string
          description: The financial entity that will process and authorize the operations
            performed by the terminal.
        terminalNumber:
          maxLength: 50
          minLength: 1
          type: string
          description: Unique number assigned by the gateway.
        merchantDetails:
          $ref: '#/components/schemas/MerchantDetails'
        bankSettings:
          $ref: '#/components/schemas/TerminalBankSettings'
        terminalLocation:
          $ref: '#/components/schemas/TerminalLocationDetails'
        terminalFeatures:
          $ref: '#/components/schemas/TerminalFeatures'
        fraudDetection:
          $ref: '#/components/schemas/TerminalFraudDetection'
        processingRules:
          type: array
          description: The list of rules that allows for changing the way transactions
            are processed by this terminal. Each rule has its own conditions which
            leads to a certain action when all of them are met.<br />For example,
            processing rules can be used to route transactions to other terminals
            in your account.
          items:
            $ref: '#/components/schemas/ProcessingRule'
        terminalTips:
          type: array
          description: The list of terminal's pre-configured tips.
          items:
            $ref: '#/components/schemas/TerminalTip'
        terminalTaxes:
          type: array
          description: The list of terminal's supported taxes.
          items:
            $ref: '#/components/schemas/TerminalTax'
        terminalCustomFields:
          type: array
          description: List of additional data fields that can be used when performing
            transactions or storing secure credentials.<br />For more information
            about custom fields, see [Special Fields and Parameters](https://docs.worldnettps.com/doku.php?id=developer:api_specification:special_fields_and_parameters#the_custom_fields).
          items:
            $ref: '#/components/schemas/TerminalCustomField'
        supportedCards:
          uniqueItems: true
          type: array
          description: List of card brands supported by the terminal.
          items:
            type: string
            description: List of card brands supported by the terminal.
        supportedDeviceTypes:
          type: array
          description: List of POS device types supported by the terminal.
          items:
            type: string
            description: List of POS device types supported by the terminal.
        volumeLimits:
          $ref: '#/components/schemas/TerminalVolumeLimits'
        links:
          uniqueItems: true
          type: array
          description: List of hypermedia links containing the operations available
            for the resource.
          items:
            $ref: '#/components/schemas/HypermediaLink'
    TerminalBankSettings:
      required:
      - allowChp
      - allowEdcc
      - allowEmcp
      - allowInternet
      - allowMoto
      - allowMulticurrency
      - allowPreAuth
      - allowRecurring
      - enableAutomaticSettle
      - forceUniqueOrderId
      type: object
      properties:
        allowMulticurrency:
          type: boolean
          description: Indicates whether the terminal supports multi-currency processing.
        allowEmcp:
          type: boolean
          description: Indicates whether the terminal supports enhanced multi-currency
            processing.
        allowEdcc:
          type: boolean
          description: Indicates whether the terminal supports dynamic currency conversion.
        baseCurrency:
          type: string
          description: |-
            The terminal's base currency used for single currency transactions as well as MCP and DCC processing.

            **Note:** Terminals where `allowMulticurrency` is enabled will not have a base currency.
          enum:
          - AED
          - AFN
          - ALL
          - AMD
          - ANG
          - AOA
          - ARS
          - AUD
          - AWG
          - AZN
          - BAM
          - BBD
          - BDT
          - BGN
          - BHD
          - BIF
          - BMD
          - BND
          - BOB
          - BOV
          - BRL
          - BSD
          - BTN
          - BWP
          - BYR
          - BZD
          - CAD
          - CDF
          - CHE
          - CHF
          - CHW
          - CLF
          - CLP
          - CNY
          - COP
          - COU
          - CRC
          - CUC
          - CUP
          - CVE
          - CZK
          - DJF
          - DKK
          - DOP
          - DZD
          - EGP
          - ERN
          - ETB
          - EUR
          - FJD
          - FKP
          - GBP
          - GEL
          - GHS
          - GIP
          - GMD
          - GNF
          - GTQ
          - GYD
          - HKD
          - HNL
          - HRK
          - HTG
          - HUF
          - IDR
          - ILS
          - INR
          - IQD
          - IRR
          - ISK
          - JMD
          - JOD
          - JPY
          - KES
          - KGS
          - KHR
          - KMF
          - KPW
          - KRW
          - KWD
          - KYD
          - KZT
          - LAK
          - LBP
          - LKR
          - LRD
          - LSL
          - LTL
          - LVL
          - LYD
          - MAD
          - MDL
          - MGA
          - MKD
          - MMK
          - MNT
          - MOP
          - MRO
          - MRU
          - MUR
          - MVR
          - MWK
          - MXN
          - MXV
          - MYR
          - MZN
          - NAD
          - NGN
          - NIO
          - NOK
          - NPR
          - NZD
          - OMR
          - PAB
          - PEN
          - PGK
          - PHP
          - PKR
          - PLN
          - PYG
          - QAR
          - RON
          - RSD
          - RUB
          - RWF
          - SAR
          - SBD
          - SCR
          - SDG
          - SEK
          - SGD
          - SHP
          - SLL
          - SOS
          - SRD
          - SSP
          - STD
          - STN
          - SVC
          - SYP
          - SZL
          - THB
          - TJS
          - TMT
          - TND
          - TOP
          - TRY
          - TTD
          - TWD
          - TZS
          - UAH
          - UGX
          - USD
          - USN
          - USS
          - UYI
          - UYU
          - UZS
          - VEF
          - VES
          - VND
          - VUV
          - WST
          - XAF
          - XCD
          - XOF
          - XPF
          - YER
          - ZAR
          - ZMW
          - ZWL
        supportedCurrencies:
          uniqueItems: true
          type: array
          description: List of currencies supported by the terminal for multi-currency
            processing of any kind.
          items:
            type: string
            description: List of currencies supported by the terminal for multi-currency
              processing of any kind.
            enum:
            - AED
            - AFN
            - ALL
            - AMD
            - ANG
            - AOA
            - ARS
            - AUD
            - AWG
            - AZN
            - BAM
            - BBD
            - BDT
            - BGN
            - BHD
            - BIF
            - BMD
            - BND
            - BOB
            - BOV
            - BRL
            - BSD
            - BTN
            - BWP
            - BYR
            - BZD
            - CAD
            - CDF
            - CHE
            - CHF
            - CHW
            - CLF
            - CLP
            - CNY
            - COP
            - COU
            - CRC
            - CUC
            - CUP
            - CVE
            - CZK
            - DJF
            - DKK
            - DOP
            - DZD
            - EGP
            - ERN
            - ETB
            - EUR
            - FJD
            - FKP
            - GBP
            - GEL
            - GHS
            - GIP
            - GMD
            - GNF
            - GTQ
            - GYD
            - HKD
            - HNL
            - HRK
            - HTG
            - HUF
            - IDR
            - ILS
            - INR
            - IQD
            - IRR
            - ISK
            - JMD
            - JOD
            - JPY
            - KES
            - KGS
            - KHR
            - KMF
            - KPW
            - KRW
            - KWD
            - KYD
            - KZT
            - LAK
            - LBP
            - LKR
            - LRD
            - LSL
            - LTL
            - LVL
            - LYD
            - MAD
            - MDL
            - MGA
            - MKD
            - MMK
            - MNT
            - MOP
            - MRO
            - MRU
            - MUR
            - MVR
            - MWK
            - MXN
            - MXV
            - MYR
            - MZN
            - NAD
            - NGN
            - NIO
            - NOK
            - NPR
            - NZD
            - OMR
            - PAB
            - PEN
            - PGK
            - PHP
            - PKR
            - PLN
            - PYG
            - QAR
            - RON
            - RSD
            - RUB
            - RWF
            - SAR
            - SBD
            - SCR
            - SDG
            - SEK
            - SGD
            - SHP
            - SLL
            - SOS
            - SRD
            - SSP
            - STD
            - STN
            - SVC
            - SYP
            - SZL
            - THB
            - TJS
            - TMT
            - TND
            - TOP
            - TRY
            - TTD
            - TWD
            - TZS
            - UAH
            - UGX
            - USD
            - USN
            - USS
            - UYI
            - UYU
            - UZS
            - VEF
            - VES
            - VND
            - VUV
            - WST
            - XAF
            - XCD
            - XOF
            - XPF
            - YER
            - ZAR
            - ZMW
            - ZWL
        allowMoto:
          type: boolean
          description: Indicates whether the terminal is configured to process Mail
            Order / Telephone Order transactions.
        allowInternet:
          type: boolean
          description: Indicates whether the terminal is configured to process Web-based
            transactions.
        allowChp:
          type: boolean
          description: Indicates whether the terminal is configured to process POS-based
            (Cardholder Present) transactions.
        allowRecurring:
          type: boolean
          description: Indicates whether the terminal allows recurring payments.
        allowPreAuth:
          type: boolean
          description: Indicates whether the terminal allows pre-authorizations.<br
            />This type of transactions need to be complemented with a capture operation
            which can be done for a partial as well as a full amount.
        enableAutomaticSettle:
          type: boolean
          description: If enabled, the terminal's transactions will be automatically
            cleared and settled based on the cut-off time in `batchTime` property.
        batchTime:
          type: string
          description: Time, represented in the terminal's timezone, that defines
            the end-of-day closing for the terminal.<br />When in manual mode, merchants
            must send a `endOfDay` request in order to indicate that transactions
            performed prior to that moment are eligible to be cleared in the next
            settlement run.
        displayName:
          maxLength: 24
          minLength: 0
          type: string
          description: Friendly name assigned by the merchant.
        forceUniqueOrderId:
          type: boolean
          description: Indicates whether the terminal accepts duplicate order identifiers.<br
            />An order is considered a duplicate when there is already another approved
            transaction sitting in the open batch with the same identifier.
      description: Terminal settings and capabilities.
    TerminalCustomField:
      required:
      - displayName
      - displayOrder
      - mandatory
      - name
      - paymentPage
      - secureCredentialsOnly
      - subscription
      - type
      type: object
      properties:
        type:
          maxLength: 2147483647
          minLength: 1
          type: string
          description: The type of the data the custom field is configured to carry.
          enum:
          - STRING
          - NUMERIC
          - BOOLEAN
        name:
          maxLength: 2147483647
          minLength: 1
          type: string
          description: Custom field name assigned by the merchant.
        displayName:
          maxLength: 2147483647
          minLength: 1
          type: string
          description: Friendly name that should be used for receipts and pages.
        displayOrder:
          type: integer
          description: Position of the field in relation to other custom fields.
          format: int32
        paymentPage:
          type: boolean
          description: Indicates whether the custom field should be shown on hosted
            pages.
        subscription:
          type: boolean
          description: Indicates whether the custom field should be considered for
            Subscriptions which is our payment plan / standing order mechanism.
        secureCredentialsOnly:
          type: boolean
          description: Indicates whether the custom field will **only** serve the
            purpose of adding additional information to secure cards or accounts.
        mandatory:
          type: boolean
          description: If enabled, it ensures that a transaction will never be processed
            without the custom field properly populated.
      description: List of additional data fields that can be used when performing
        transactions or storing secure credentials.<br />For more information about
        custom fields, see [Special Fields and Parameters](https://docs.worldnettps.com/doku.php?id=developer:api_specification:special_fields_and_parameters#the_custom_fields).
    TerminalFeatures:
      required:
      - allowApplePay
      - allowEmv
      - allowGooglePay
      - allowKeyed
      - allowMagStripe
      - allowMagStripeFallback
      - allowOfflineSales
      - allowPartialRefund
      - allowTax
      - allowTip
      type: object
      properties:
        allowOfflineSales:
          type: boolean
          description: Indicates whether the terminal allows offline sales.
        allowPartialRefund:
          type: boolean
          description: Indicates whether the terminal allows partial refunds.
        allowTax:
          type: boolean
          description: Indicates whether the terminal is able to process taxes.
        allowTip:
          type: boolean
          description: Indicates whether the terminal is able to process tips.
        allowGooglePay:
          type: boolean
          description: Indicates whether the terminal is able to handle digital wallet
            payloads from Google Pay.
        allowApplePay:
          type: boolean
          description: Indicates whether the terminal is able to handle digital wallet
            payloads from Apple Pay.
        allowEmv:
          type: boolean
          description: Indicates whether the terminal is able to handle card payloads
            from EMV devices.
        allowKeyed:
          type: boolean
          description: Indicates whether the terminal is able to handle manually keyed
            card details.
        allowMagStripe:
          type: boolean
          description: Indicates whether the terminal is able to handle card payloads
            from MSR devices.
        allowMagStripeFallback:
          type: boolean
          description: Indicates whether the terminal allows transactions to fallback
            to swipe method due to chip card reader failures.
        secureCredentials:
          $ref: '#/components/schemas/SecureCredentialsSettings'
        surcharge:
          $ref: '#/components/schemas/SurchargeSettings'
      description: Terminal supported features.
    TerminalFraudDetection:
      required:
      - allowCardholderSignatureBypass
      - allowUnreferencedRefunds
      - refundPercentageLimit
      - unreferencedRefundAmountLimit
      type: object
      properties:
        allowCardholderSignatureBypass:
          type: boolean
          description: Indicates whether cardholder signature requirement should be
            relaxed.
        allowUnreferencedRefunds:
          type: boolean
          description: Indicates whether the terminal allows unreferenced refunds.<br
            />This type of refunds do not require a prior payment transaction to be
            referenced.
        unreferencedRefundAmountLimit:
          type: integer
          description: Amount threshold for unreferenced refunds.
          format: int32
        refundPercentageLimit:
          type: number
          description: The percentage limit for referenced refunds. This is usually
            configured at 100% of the original transaction's amount.
          format: double
        addressVerification:
          $ref: '#/components/schemas/AddressVerificationSystem'
        cvvVerification:
          $ref: '#/components/schemas/CardSecurityCodeVerification'
        threeDSecure:
          $ref: '#/components/schemas/ThreeDSecure'
      description: Terminal fraud detection tools.
    TerminalLevelLimit:
      required:
      - limitScope
      - limitThreshold
      type: object
      properties:
        limitScope:
          type: string
          enum:
          - DAILY
          - MONTHLY
          - SINGLE_TRANSACTION
        limitThreshold:
          type: integer
          description: The maximum amount allowed within the period described in the
            `limitScope` attribute.
          format: int32
        withoutCvvOnly:
          type: boolean
          description: If enabled, the limit will only take transactions without CVV
            into account. This is specially useful for merchants who are looking for
            a way to add thresholds for transactions that may lead to chargebacks.<br
            />This filter only applies to limits within `SINGLE_TRANSACTION` scope.
        withoutAvsOnly:
          type: boolean
          description: If enabled, the limit will only take transactions without AVS
            into account. This is specially useful for merchants who are looking for
            a way to add thresholds for transactions that may lead to chargebacks.<br
            />This filter only applies to limits within `SINGLE_TRANSACTION` scope.
        currentValue:
          type: number
          description: The sum of all transactions performed by the terminal within
            the period described in the `limitScope` attribute.<br />At the end of
            each period, this value is reset.
      description: List of terminal-level volume limits.
    TerminalLocationDetails:
      required:
      - country
      - timeZone
      type: object
      properties:
        country:
          maxLength: 2
          minLength: 2
          type: string
          description: Country where the terminal is based.
        timeZone:
          type: string
          description: Terminal's preferred time-zone.
      description: Terminal location details.
    TerminalTax:
      required:
      - name
      - rate
      type: object
      properties:
        uniqueReference:
          maxLength: 10
          minLength: 10
          type: string
          description: Unique reference number assigned by the gateway. This field
            must be used when trying to update an existing terminal's tax.
        name:
          maxLength: 64
          minLength: 1
          type: string
          description: Tax Name.
        rate:
          maximum: 100
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
          description: The ratio expressed as a percentage at which a transaction
            is taxed.
          format: double
      description: The list of terminal's supported taxes.
    TerminalTip:
      required:
      - type
      type: object
      properties:
        uniqueReference:
          maxLength: 10
          minLength: 10
          type: string
          description: Unique reference number assigned by the gateway. This field
            must be used when trying to update an existing terminal's tip.
        type:
          type: string
          enum:
          - PERCENTAGE
          - FIXED_AMOUNT
        amount:
          minimum: 0
          exclusiveMinimum: true
          type: number
          description: This field must used when the tip is of type `FIXED_AMOUNT`.
            Otherwise, refer to the `percentage` property instead.
        currency:
          type: string
          description: Currency associated with the tip. A 3-letter code as per the
            [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) standard.<br
            />This is specially useful for multi-currency terminals in order to provide
            a different set of tips for each supported currency.
          enum:
          - AED
          - AFN
          - ALL
          - AMD
          - ANG
          - AOA
          - ARS
          - AUD
          - AWG
          - AZN
          - BAM
          - BBD
          - BDT
          - BGN
          - BHD
          - BIF
          - BMD
          - BND
          - BOB
          - BOV
          - BRL
          - BSD
          - BTN
          - BWP
          - BYR
          - BZD
          - CAD
          - CDF
          - CHE
          - CHF
          - CHW
          - CLF
          - CLP
          - CNY
          - COP
          - COU
          - CRC
          - CUC
          - CUP
          - CVE
          - CZK
          - DJF
          - DKK
          - DOP
          - DZD
          - EGP
          - ERN
          - ETB
          - EUR
          - FJD
          - FKP
          - GBP
          - GEL
          - GHS
          - GIP
          - GMD
          - GNF
          - GTQ
          - GYD
          - HKD
          - HNL
          - HRK
          - HTG
          - HUF
          - IDR
          - ILS
          - INR
          - IQD
          - IRR
          - ISK
          - JMD
          - JOD
          - JPY
          - KES
          - KGS
          - KHR
          - KMF
          - KPW
          - KRW
          - KWD
          - KYD
          - KZT
          - LAK
          - LBP
          - LKR
          - LRD
          - LSL
          - LTL
          - LVL
          - LYD
          - MAD
          - MDL
          - MGA
          - MKD
          - MMK
          - MNT
          - MOP
          - MRO
          - MRU
          - MUR
          - MVR
          - MWK
          - MXN
          - MXV
          - MYR
          - MZN
          - NAD
          - NGN
          - NIO
          - NOK
          - NPR
          - NZD
          - OMR
          - PAB
          - PEN
          - PGK
          - PHP
          - PKR
          - PLN
          - PYG
          - QAR
          - RON
          - RSD
          - RUB
          - RWF
          - SAR
          - SBD
          - SCR
          - SDG
          - SEK
          - SGD
          - SHP
          - SLL
          - SOS
          - SRD
          - SSP
          - STD
          - STN
          - SVC
          - SYP
          - SZL
          - THB
          - TJS
          - TMT
          - TND
          - TOP
          - TRY
          - TTD
          - TWD
          - TZS
          - UAH
          - UGX
          - USD
          - USN
          - USS
          - UYI
          - UYU
          - UZS
          - VEF
          - VES
          - VND
          - VUV
          - WST
          - XAF
          - XCD
          - XOF
          - XPF
          - YER
          - ZAR
          - ZMW
          - ZWL
        percentage:
          maximum: 100
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: true
          type: number
          description: This field must used when the tip is of type `PERCENTAGE`.
            Otherwise, refer to the `amount` property instead.
          format: double
      description: The list of terminal's pre-configured tips.
    TerminalVolumeLimits:
      required:
      - enableCardLevelLimits
      - enableTerminalLevelLimits
      type: object
      properties:
        enableTerminalLevelLimits:
          type: boolean
          description: Indicates whether the terminal has any terminal-level limits
            enabled.
        terminalLevelLimits:
          type: array
          description: List of terminal-level volume limits.
          items:
            $ref: '#/components/schemas/TerminalLevelLimit'
        enableCardLevelLimits:
          type: boolean
          description: Indicates whether the terminal has any card-level limits enabled.
        cardLevelLimits:
          type: array
          description: List of card-level volume limits.
          items:
            $ref: '#/components/schemas/CardLevelLimit'
      description: List of terminal-level and card-level volume limits.
    ThreeDSecure:
      type: object
      properties:
        enable:
          type: boolean
          description: Indicates whether 3D-Secure capability is available for the
            terminal.
        supportedCards:
          uniqueItems: true
          type: array
          description: List of cards brands eligible for 3D-Secure processing.
          items:
            type: string
            description: List of cards brands eligible for 3D-Secure processing.
    DevicePaginatedResult:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          description: List of elements.
          items:
            $ref: '#/components/schemas/DeviceTypeCompact'
        next:
          type: string
          description: The cursor pointing to the next set of elements.
        links:
          uniqueItems: true
          type: array
          description: List of hypermedia links containing the operations available
            for the resource.
          items:
            $ref: '#/components/schemas/HypermediaLink'
    DeviceTypeCompact:
      required:
      - type
      type: object
      properties:
        type:
          maxLength: 30
          minLength: 1
          type: string
          description: Type of device.
        manufacturer:
          maxLength: 24
          minLength: 0
          type: string
          description: Company responsible for manufacturing the devices of this type.
        links:
          uniqueItems: true
          type: array
          description: List of hypermedia links containing the operations available
            for the resource.
          items:
            $ref: '#/components/schemas/HypermediaLink'
      description: List of elements.
    DeviceType:
      required:
      - type
      type: object
      properties:
        type:
          maxLength: 30
          minLength: 1
          type: string
          description: Type of device.
        manufacturer:
          maxLength: 24
          minLength: 0
          type: string
          description: Company responsible for manufacturing the devices of this type.
        supportsMagStripe:
          type: boolean
          description: Indicates whether this type of device is capable of performing
            card swipes.
        supportsIcc:
          type: boolean
          description: Indicates whether this type of device is capable of reading
            card chips.
        supportsKeyed:
          type: boolean
          description: Indicates whether this type of device is capable of accepting
            keyed inputs.
        supportsContactless:
          type: boolean
          description: Indicates whether this type of device is capable of performing
            contactless transactions.
        supportsPinEntry:
          type: boolean
          description: Indicates whether this type of device is capable of accepting
            PIN entry.
        supportsOutputPrinting:
          type: boolean
          description: Indicates whether this type of device is capable of printing.
        supportsOutputDisplaying:
          type: boolean
          description: Indicates whether this type of device is capable of displaying
            information.
        applications:
          type: array
          items:
            $ref: '#/components/schemas/EmvApplication'
        certificates:
          type: array
          items:
            $ref: '#/components/schemas/EmvCertificate'
        revokedCertificates:
          type: array
          items:
            $ref: '#/components/schemas/EmvCertificate'
        defaultEmvTags:
          type: array
          items:
            $ref: '#/components/schemas/EmvTag'
    EmvApplication:
      type: object
      properties:
        identifier:
          type: string
        version:
          type: string
        card:
          type: string
        matchType:
          type: string
          enum:
          - FULL
          - PARTIAL_VISA
          - PARTIAL_EUROPAY
    EmvCertificate:
      type: object
      properties:
        rid:
          type: string
        exponent:
          type: string
        certificate:
          type: string
    EmvTag:
      required:
      - hex
      - value
      type: object
      properties:
        hex:
          type: string
        value:
          type: string
      description: List of tags returned for EMV transactions.
    UpdateTerminalRequest:
      type: object
      properties:
        terminalTips:
          uniqueItems: true
          type: array
          description: The list of terminal's pre-configured tips.
          items:
            $ref: '#/components/schemas/TerminalTip'
        terminalTaxes:
          uniqueItems: true
          type: array
          description: The list of terminal's supported taxes.
          items:
            $ref: '#/components/schemas/TerminalTax'
    TerminalCompact:
      type: object
      properties:
        paymentProcessor:
          maxLength: 128
          minLength: 1
          type: string
          description: The financial entity that will process and authorize the operations
            performed by the terminal.
        terminalNumber:
          maxLength: 50
          minLength: 1
          type: string
          description: Unique number assigned by the gateway.
        displayName:
          maxLength: 24
          minLength: 0
          type: string
          description: Friendly name assigned by the merchant.
        baseCurrency:
          type: string
          description: |-
            The terminal's base currency used for single currency transactions as well as MCP and DCC processing.

            **Note:** Terminals where `allowMulticurrency` is enabled will not have a base currency.
          enum:
          - AED
          - AFN
          - ALL
          - AMD
          - ANG
          - AOA
          - ARS
          - AUD
          - AWG
          - AZN
          - BAM
          - BBD
          - BDT
          - BGN
          - BHD
          - BIF
          - BMD
          - BND
          - BOB
          - BOV
          - BRL
          - BSD
          - BTN
          - BWP
          - BYR
          - BZD
          - CAD
          - CDF
          - CHE
          - CHF
          - CHW
          - CLF
          - CLP
          - CNY
          - COP
          - COU
          - CRC
          - CUC
          - CUP
          - CVE
          - CZK
          - DJF
          - DKK
          - DOP
          - DZD
          - EGP
          - ERN
          - ETB
          - EUR
          - FJD
          - FKP
          - GBP
          - GEL
          - GHS
          - GIP
          - GMD
          - GNF
          - GTQ
          - GYD
          - HKD
          - HNL
          - HRK
          - HTG
          - HUF
          - IDR
          - ILS
          - INR
          - IQD
          - IRR
          - ISK
          - JMD
          - JOD
          - JPY
          - KES
          - KGS
          - KHR
          - KMF
          - KPW
          - KRW
          - KWD
          - KYD
          - KZT
          - LAK
          - LBP
          - LKR
          - LRD
          - LSL
          - LTL
          - LVL
          - LYD
          - MAD
          - MDL
          - MGA
          - MKD
          - MMK
          - MNT
          - MOP
          - MRO
          - MRU
          - MUR
          - MVR
          - MWK
          - MXN
          - MXV
          - MYR
          - MZN
          - NAD
          - NGN
          - NIO
          - NOK
          - NPR
          - NZD
          - OMR
          - PAB
          - PEN
          - PGK
          - PHP
          - PKR
          - PLN
          - PYG
          - QAR
          - RON
          - RSD
          - RUB
          - RWF
          - SAR
          - SBD
          - SCR
          - SDG
          - SEK
          - SGD
          - SHP
          - SLL
          - SOS
          - SRD
          - SSP
          - STD
          - STN
          - SVC
          - SYP
          - SZL
          - THB
          - TJS
          - TMT
          - TND
          - TOP
          - TRY
          - TTD
          - TWD
          - TZS
          - UAH
          - UGX
          - USD
          - USN
          - USS
          - UYI
          - UYU
          - UZS
          - VEF
          - VES
          - VND
          - VUV
          - WST
          - XAF
          - XCD
          - XOF
          - XPF
          - YER
          - ZAR
          - ZMW
          - ZWL
        timeZone:
          type: string
          description: Terminal's preferred time-zone.
        links:
          uniqueItems: true
          type: array
          description: List of hypermedia links containing the operations available
            for the resource.
          items:
            $ref: '#/components/schemas/HypermediaLink'
      description: List of elements.
    TerminalPaginatedResult:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          description: List of elements.
          items:
            $ref: '#/components/schemas/TerminalCompact'
        next:
          type: string
          description: The cursor pointing to the next set of elements.
        links:
          uniqueItems: true
          type: array
          description: List of hypermedia links containing the operations available
            for the resource.
          items:
            $ref: '#/components/schemas/HypermediaLink'
    AccountBalance:
      required:
      - amount
      - benefitCategory
      - currency
      type: object
      properties:
        benefitCategory:
          type: string
          enum:
          - CASH
          - FOOD_STAMP
        currency:
          type: string
          description: The currency of the transaction. A 3-letter code as per the
            [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) standard.
          enum:
          - AED
          - AFN
          - ALL
          - AMD
          - ANG
          - AOA
          - ARS
          - AUD
          - AWG
          - AZN
          - BAM
          - BBD
          - BDT
          - BGN
          - BHD
          - BIF
          - BMD
          - BND
          - BOB
          - BOV
          - BRL
          - BSD
          - BTN
          - BWP
          - BYR
          - BZD
          - CAD
          - CDF
          - CHE
          - CHF
          - CHW
          - CLF
          - CLP
          - CNY
          - COP
          - COU
          - CRC
          - CUC
          - CUP
          - CVE
          - CZK
          - DJF
          - DKK
          - DOP
          - DZD
          - EGP
          - ERN
          - ETB
          - EUR
          - FJD
          - FKP
          - GBP
          - GEL
          - GHS
          - GIP
          - GMD
          - GNF
          - GTQ
          - GYD
          - HKD
          - HNL
          - HRK
          - HTG
          - HUF
          - IDR
          - ILS
          - INR
          - IQD
          - IRR
          - ISK
          - JMD
          - JOD
          - JPY
          - KES
          - KGS
          - KHR
          - KMF
          - KPW
          - KRW
          - KWD
          - KYD
          - KZT
          - LAK
          - LBP
          - LKR
          - LRD
          - LSL
          - LTL
          - LVL
          - LYD
          - MAD
          - MDL
          - MGA
          - MKD
          - MMK
          - MNT
          - MOP
          - MRO
          - MRU
          - MUR
          - MVR
          - MWK
          - MXN
          - MXV
          - MYR
          - MZN
          - NAD
          - NGN
          - NIO
          - NOK
          - NPR
          - NZD
          - OMR
          - PAB
          - PEN
          - PGK
          - PHP
          - PKR
          - PLN
          - PYG
          - QAR
          - RON
          - RSD
          - RUB
          - RWF
          - SAR
          - SBD
          - SCR
          - SDG
          - SEK
          - SGD
          - SHP
          - SLL
          - SOS
          - SRD
          - SSP
          - STD
          - STN
          - SVC
          - SYP
          - SZL
          - THB
          - TJS
          - TMT
          - TND
          - TOP
          - TRY
          - TTD
          - TWD
          - TZS
          - UAH
          - UGX
          - USD
          - USN
          - USS
          - UYI
          - UYU
          - UZS
          - VEF
          - VES
          - VND
          - VUV
          - WST
          - XAF
          - XCD
          - XOF
          - XPF
          - YER
          - ZAR
          - ZMW
          - ZWL
        amount:
          type: number
          description: Current balance amount.
      description: List of balance results per benefit category.
    Balance:
      required:
      - terminal
      type: object
      properties:
        terminal:
          maxLength: 50
          minLength: 1
          type: string
          description: The terminal number assigned by the gateway. This field indicates
            the terminal responsible for processing the transaction.
        operator:
          maxLength: 50
          minLength: 0
          type: string
          description: The operator who initiated the transaction.
        transactionResult:
          $ref: '#/components/schemas/TransactionResult'
        accountBalances:
          type: array
          description: List of balance results per benefit category.
          items:
            $ref: '#/components/schemas/AccountBalance'
    CustomField:
      required:
      - name
      - value
      type: object
      properties:
        name:
          maxLength: 56
          minLength: 1
          type: string
        value:
          maxLength: 2147483647
          minLength: 1
          type: string
    SecureCredentials:
      required:
      - credentialsNumber
      - maskedPan
      - merchantReference
      - terminal
      type: object
      properties:
        terminal:
          maxLength: 50
          minLength: 1
          type: string
          description: The terminal which is the credentials' owner. It means that
            even though the credentials can be shared to perform transactions, update
            and delete operations can only be requested by owners.
        merchantReference:
          maxLength: 48
          minLength: 1
          type: string
          description: |-
            Unique merchant reference that identifies the stored credentials on both merchant's and gateway's sides.

            **Note:** Clients must be able to store this value in order to eventually retrieve, update and delete the stored credentials.
        credentialsNumber:
          maxLength: 19
          minLength: 12
          type: string
          description: |-
            The unique number that should be used to identify the credentials when performing transactions.<br />This token is assigned by the gateway and follows the same format of regular card numbers:

            - A six-digit identification number which is `296753`.
            - A variable length (up to 12 digits) individual identifier.
            - A single check digit calculated using the Luhn algorithm.
        maskedPan:
          maxLength: 19
          minLength: 12
          type: string
          description: The number of the tokenized card/account masked as per PCI
            requirements.
        securityCheck:
          type: string
          description: |-
            The result of the security checks performed via account verification to determine if the account is valid and in good standing. Depending on the Payment Processor used by the Terminal, the account verification can be performed in two distinct ways:

            - A 0.00 (zero) amount transaction or,
            - A 1.00 (one) currency unit amount transaction followed, when successful, by its voiding (both transactions will appear in your batch).

            **Note:** If the account verification fails, the payment credentials are not stored.
          enum:
          - NOT_VALIDATED
          - CVV_VALIDATED
          - ISSUE_NO_VALIDATED
          - VALIDATION_FAILED
          - CARD_NUMBER_VALIDATED
        additionalDataFields:
          type: array
          description: List of custom fields representing the additional information
            sent by the merchant and stored along with the credentials.
          items:
            $ref: '#/components/schemas/CustomField'
        links:
          uniqueItems: true
          type: array
          description: List of hypermedia links containing the operations available
            for the resource.
          items:
            $ref: '#/components/schemas/HypermediaLink'
      description: |-
        The secure credentials containing the customer's account details stored as part of the authorization.

        **Note:** Automatic tokenization feature is optional and it is not available for all accounts. Therefore, merchants who are interested in having this feature must get in touch with our support team to check availability.
    TransactionResult:
      type: object
      properties:
        type:
          type: string
          description: The type of the generated transaction.
          enum:
          - SALE
          - PREAUTH
          - COMPLETION
          - REFUND
          - OFFLINE_DECLINE
          - WITHDRAWAL
        status:
          type: string
          description: The current status of the generated transaction.
          enum:
          - READY
          - PENDING
          - VOID
          - DECLINED
          - COMPLETE
          - REFERRAL
          - PICKUP
          - REVERSAL
          - SENT
          - ADMIN
          - EXPIRED
          - ACCEPTED
          - REVIEW
          - OTHER
        approvalCode:
          maxLength: 48
          minLength: 0
          type: string
          description: The authorization code assigned by the payment processor for
            approved transactions.
        dateTime:
          type: string
          description: The processing date and time of the transaction represented
            as per [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
          format: date-time
        currency:
          type: string
          description: The currency of the transaction. A 3-letter code as per the
            [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) standard.
          enum:
          - AED
          - AFN
          - ALL
          - AMD
          - ANG
          - AOA
          - ARS
          - AUD
          - AWG
          - AZN
          - BAM
          - BBD
          - BDT
          - BGN
          - BHD
          - BIF
          - BMD
          - BND
          - BOB
          - BOV
          - BRL
          - BSD
          - BTN
          - BWP
          - BYR
          - BZD
          - CAD
          - CDF
          - CHE
          - CHF
          - CHW
          - CLF
          - CLP
          - CNY
          - COP
          - COU
          - CRC
          - CUC
          - CUP
          - CVE
          - CZK
          - DJF
          - DKK
          - DOP
          - DZD
          - EGP
          - ERN
          - ETB
          - EUR
          - FJD
          - FKP
          - GBP
          - GEL
          - GHS
          - GIP
          - GMD
          - GNF
          - GTQ
          - GYD
          - HKD
          - HNL
          - HRK
          - HTG
          - HUF
          - IDR
          - ILS
          - INR
          - IQD
          - IRR
          - ISK
          - JMD
          - JOD
          - JPY
          - KES
          - KGS
          - KHR
          - KMF
          - KPW
          - KRW
          - KWD
          - KYD
          - KZT
          - LAK
          - LBP
          - LKR
          - LRD
          - LSL
          - LTL
          - LVL
          - LYD
          - MAD
          - MDL
          - MGA
          - MKD
          - MMK
          - MNT
          - MOP
          - MRO
          - MRU
          - MUR
          - MVR
          - MWK
          - MXN
          - MXV
          - MYR
          - MZN
          - NAD
          - NGN
          - NIO
          - NOK
          - NPR
          - NZD
          - OMR
          - PAB
          - PEN
          - PGK
          - PHP
          - PKR
          - PLN
          - PYG
          - QAR
          - RON
          - RSD
          - RUB
          - RWF
          - SAR
          - SBD
          - SCR
          - SDG
          - SEK
          - SGD
          - SHP
          - SLL
          - SOS
          - SRD
          - SSP
          - STD
          - STN
          - SVC
          - SYP
          - SZL
          - THB
          - TJS
          - TMT
          - TND
          - TOP
          - TRY
          - TTD
          - TWD
          - TZS
          - UAH
          - UGX
          - USD
          - USN
          - USS
          - UYI
          - UYU
          - UZS
          - VEF
          - VES
          - VND
          - VUV
          - WST
          - XAF
          - XCD
          - XOF
          - XPF
          - YER
          - ZAR
          - ZMW
          - ZWL
        authorizedAmount:
          type: number
          description: |-
            The amount authorized by the payment processor.

            **Note:** For partial authorizations, this amount will be lower than the actual amount sent in the request.<br />**Note:** This amount will be negative for refund transactions to represent the return of funds back to the customer's account.
        resultCode:
          type: string
          description: |-
            Our platform maps result codes sent by different payment processors into a smaller set of codes as shown below. The original result code may be available in the `processorResultCode` field.

            - **A**: Approved / Authorized.
            - **D**: Declined / Not Authorized.
            - **E**: Accepted for later processing, but result currently unknown.
            - **P**: Only a portion of the original amount requested was authorized.
            - **R**: Issuer has declined the transaction and indicated that the customer should contact their bank.
            - **C**: Issuer has declined the transaction and requested that the card be retained as it may have been reported as lost or stolen.
          enum:
          - A
          - D
          - E
          - P
          - R
          - C
        resultMessage:
          type: string
          description: A brief description sent by the processor about the transaction
            result.<br />Clients must use this description in order to understand
            the cause of rejections and declines.
        processorResultCode:
          type: string
          description: The original result code sent by the payment processor.
        storedPaymentCredentials:
          $ref: '#/components/schemas/SecureCredentials'
      description: The result details of the transaction between our platform and
        the payment processor.<br />For the full list of response codes, see [Transaction
        Responses](https://docs.worldnettps.com/doku.php?id=merchant:existing_merchant:other_information:transaction_responses).
    BalanceInquiryRequest:
      required:
      - currency
      - customerAccount
      - terminal
      type: object
      properties:
        terminal:
          maxLength: 50
          minLength: 1
          type: string
          description: The terminal number assigned by the gateway. This field indicates
            the terminal responsible for processing the transaction.
        operator:
          maxLength: 50
          minLength: 0
          type: string
          description: The operator who initiated the transaction. If not sent in
            the request, this field will be automatically populated with the API Key
            alias.
        currency:
          type: string
          description: The currency of the transaction. A 3-letter code as per the
            [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) standard.
          enum:
          - AED
          - AFN
          - ALL
          - AMD
          - ANG
          - AOA
          - ARS
          - AUD
          - AWG
          - AZN
          - BAM
          - BBD
          - BDT
          - BGN
          - BHD
          - BIF
          - BMD
          - BND
          - BOB
          - BOV
          - BRL
          - BSD
          - BTN
          - BWP
          - BYR
          - BZD
          - CAD
          - CDF
          - CHE
          - CHF
          - CHW
          - CLF
          - CLP
          - CNY
          - COP
          - COU
          - CRC
          - CUC
          - CUP
          - CVE
          - CZK
          - DJF
          - DKK
          - DOP
          - DZD
          - EGP
          - ERN
          - ETB
          - EUR
          - FJD
          - FKP
          - GBP
          - GEL
          - GHS
          - GIP
          - GMD
          - GNF
          - GTQ
          - GYD
          - HKD
          - HNL
          - HRK
          - HTG
          - HUF
          - IDR
          - ILS
          - INR
          - IQD
          - IRR
          - ISK
          - JMD
          - JOD
          - JPY
          - KES
          - KGS
          - KHR
          - KMF
          - KPW
          - KRW
          - KWD
          - KYD
          - KZT
          - LAK
          - LBP
          - LKR
          - LRD
          - LSL
          - LTL
          - LVL
          - LYD
          - MAD
          - MDL
          - MGA
          - MKD
          - MMK
          - MNT
          - MOP
          - MRO
          - MRU
          - MUR
          - MVR
          - MWK
          - MXN
          - MXV
          - MYR
          - MZN
          - NAD
          - NGN
          - NIO
          - NOK
          - NPR
          - NZD
          - OMR
          - PAB
          - PEN
          - PGK
          - PHP
          - PKR
          - PLN
          - PYG
          - QAR
          - RON
          - RSD
          - RUB
          - RWF
          - SAR
          - SBD
          - SCR
          - SDG
          - SEK
          - SGD
          - SHP
          - SLL
          - SOS
          - SRD
          - SSP
          - STD
          - STN
          - SVC
          - SYP
          - SZL
          - THB
          - TJS
          - TMT
          - TND
          - TOP
          - TRY
          - TTD
          - TWD
          - TZS
          - UAH
          - UGX
          - USD
          - USN
          - USS
          - UYI
          - UYU
          - UZS
          - VEF
          - VES
          - VND
          - VUV
          - WST
          - XAF
          - XCD
          - XOF
          - XPF
          - YER
          - ZAR
          - ZMW
          - ZWL
        customer:
          $ref: '#/components/schemas/Customer'
        customerAccount:
          $ref: '#/components/schemas/Payload'
    Customer:
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 0
          type: string
          description: The customer's name.
        phone:
          type: string
          description: The customer's contact phone number.<br />If **SMS Cardholder
            Receipts** feature is enabled in the terminal, We will use this number
            to automatically send the receipts of eventual transactions.
        email:
          type: string
          description: The customer's contact email address.<br />If **Email Cardholder
            Receipt** feature is enabled in the terminal, We will use this address
            to automatically send the receipts of eventual transactions.
        notificationLanguage:
          maxLength: 2
          minLength: 2
          type: string
          description: The customer's preferred notification language.<br />The two-letter
            language code defined by the [ISO 639-1 alpha-2](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
            standard.
          enum:
          - en
          - fr
        billingAddress:
          $ref: '#/components/schemas/Address'
        shippingAddress:
          $ref: '#/components/schemas/Address'
      description: Customer contact and address details.
    Device:
      required:
      - type
      type: object
      properties:
        type:
          maxLength: 30
          minLength: 1
          type: string
          description: Type/Model of the point-of-sale terminal.
        category:
          type: string
          enum:
          - ATTENDED
          - UNATTENDED
          default: ATTENDED
        serialNumber:
          type: string
          description: Serial number of the point-of-sale terminal.
        firmwareVersion:
          type: string
          description: Firmware version of the point-of-sale terminal.
      description: Information about the POS device used to capture the card details.
    DigitalWalletPayload:
      required:
      - encryptedData
      - payloadType
      - serviceProvider
      type: object
      allOf:
      - $ref: '#/components/schemas/Payload'
      - type: object
        properties:
          serviceProvider:
            type: string
            description: The wallet application provider.
            enum:
            - GOOGLE
            - APPLE
          cardholderName:
            maxLength: 50
            minLength: 0
            type: string
            description: The cardholder's name as it appears on the card.
          encryptedData:
            maxLength: 20480
            minLength: 128
            type: string
            description: The encrypted data generated by the digital wallet application.
      x-discriminator-value: DIGITAL_WALLET
    DukptPinDetails:
      required:
      - pin
      - pinKsn
      type: object
      properties:
        pin:
          maxLength: 2147483647
          minLength: 1
          type: string
          description: The PIN encrypted using [DUKPT](https://en.wikipedia.org/wiki/Derived_unique_key_per_transaction)
            Scheme.
        pinKsn:
          maxLength: 20
          minLength: 20
          type: string
          description: The key serial number.
      description: PIN details.
    EbtDetails:
      required:
      - benefitCategory
      type: object
      properties:
        benefitCategory:
          type: string
          enum:
          - CASH
          - FOOD_STAMP
        withdrawal:
          type: boolean
          description: Indicates a cash withdrawal request. This option is only available
            for EBT cash benefit accounts.
        voucher:
          $ref: '#/components/schemas/Voucher'
      description: EBT details, only required for electronic-benefit-transfer transactions.
    EmvPayload:
      required:
      - device
      - payloadType
      type: object
      allOf:
      - $ref: '#/components/schemas/Payload'
      - type: object
        properties:
          downgradeTo:
            type: string
            description: This field gives clients the ability to reprocess offline
              transactions that were not approved initially in a different entry mode.<br
              />For instance, `EMV` transactions are allowed to be downgraded to `MAG_STRIPE`
              or `KEYED`.
            enum:
            - MAG_STRIPE
            - KEYED
          device:
            $ref: '#/components/schemas/EncryptionCapableDevice'
          tlv:
            type: string
            description: The EMV tags in TLV (Tag-Length-Value) format.<br />For clients
              not familiar with this format, the API also offer the possibility of
              sending the list of tags in the `tags` fields.
          tags:
            type: array
            description: The list of EMV tags. Not required unless the `tlv` field
              is absent.
            items:
              $ref: '#/components/schemas/EmvTag'
          firstDigitOfPan:
            maxLength: 1
            minLength: 1
            type: string
            description: The first digit of the primary account number (PAN) / card
              number.
          cardholderSignature:
            type: string
            description: Cardholder's signature in the format described in the [Special
              Fields and Parameters](https://docs.worldnettps.com/doku.php?id=developer:api_specification:special_fields_and_parameters#the_signature_field_format)
              section.
      x-discriminator-value: EMV
    EncryptedMagStripeDataFormat:
      required:
      - device
      - encryptedData
      type: object
      allOf:
      - $ref: '#/components/schemas/MagStripeDataFormat'
      - type: object
        properties:
          device:
            $ref: '#/components/schemas/EncryptionCapableDevice'
          encryptedData:
            maxLength: 2147483647
            minLength: 1
            type: string
            description: The encrypted data captured by the magnetic stripe reader.
          firstDigitOfPan:
            maxLength: 1
            minLength: 1
            type: string
            description: The first digit of the primary account number (PAN) / card
              number.
          fallback:
            type: boolean
            description: Indicates that the chip of the card could not be read due
              to a technical issue which resulted in the technology “falling back”
              to a magnetic stripe transaction.
          fallbackReason:
            type: string
            description: The reason that caused the fallback.
            enum:
            - TECHNICAL
            - EMPTY_CANDIDATE_LIST
      x-discriminator-value: ENCRYPTED
    EncryptionCapableDevice:
      required:
      - dataKsn
      - type
      type: object
      properties:
        type:
          maxLength: 30
          minLength: 1
          type: string
          description: Type/Model of the point-of-sale terminal.
        dataKsn:
          maxLength: 20
          minLength: 1
          type: string
        serialNumber:
          type: string
          description: Serial number of the point-of-sale terminal.
        firmwareVersion:
          type: string
          description: Firmware version of the point-of-sale terminal.
        category:
          type: string
          enum:
          - ATTENDED
          - UNATTENDED
          default: ATTENDED
    FullyEncryptedKeyedDataFormat:
      required:
      - device
      - encryptedData
      type: object
      allOf:
      - $ref: '#/components/schemas/KeyedDataFormat'
      - type: object
        properties:
          device:
            $ref: '#/components/schemas/EncryptionCapableDevice'
          encryptedData:
            type: string
            description: The full card data encrypted by the device.
          firstDigitOfPan:
            maxLength: 1
            minLength: 1
            type: string
            description: The first digit of the primary account number (PAN) / card
              number.
      x-discriminator-value: FULLY_ENCRYPTED
    KeyedDataFormat:
      type: object
      properties:
        dataFormat:
          type: string
          default: PLAIN_TEXT
      description: 'The card details which can be sent in these three different formats:
        `PLAIN_TEXT` (Default, if not specified), `FULLY_ENCRYPTED`, `PARTIALLY_ENCRYPTED`'
      discriminator:
        propertyName: dataFormat
        mapping:
          PLAIN_TEXT: '#/components/schemas/PlainTextKeyedDataFormat'
          FULLY_ENCRYPTED: '#/components/schemas/FullyEncryptedKeyedDataFormat'
          PARTIALLY_ENCRYPTED: '#/components/schemas/PartiallyEncryptedKeyedDataFormat'
    KeyedPayload:
      required:
      - cardDetails
      - payloadType
      type: object
      allOf:
      - $ref: '#/components/schemas/Payload'
      - type: object
        properties:
          cardholderName:
            maxLength: 50
            minLength: 1
            type: string
            description: The cardholder's name as it appears on the card.
          cardDetails:
            $ref: '#/components/schemas/KeyedDataFormat'
          pinDetails:
            $ref: '#/components/schemas/DukptPinDetails'
          ebtDetails:
            $ref: '#/components/schemas/EbtDetails'
      x-discriminator-value: KEYED
    MagStripeDataFormat:
      type: object
      properties:
        dataFormat:
          type: string
          default: ENCRYPTED
      description: 'The card details which can be sent in these two different formats:
        `ENCRYPTED` (Default, if not specified) and `PLAIN_TEXT`'
      discriminator:
        propertyName: dataFormat
        mapping:
          ENCRYPTED: '#/components/schemas/EncryptedMagStripeDataFormat'
          PLAIN_TEXT: '#/components/schemas/PlainTextMagStripeDataFormat'
    MagStripePayload:
      required:
      - cardDetails
      - payloadType
      type: object
      allOf:
      - $ref: '#/components/schemas/Payload'
      - type: object
        properties:
          downgradeTo:
            type: string
            description: This field gives clients the ability to reprocess offline
              transactions that were not approved initially in a different entry mode.<br
              />For instance, `MAG_STRIPE` transactions are allowed to be downgraded
              to `KEYED`.
            enum:
            - MAG_STRIPE
            - KEYED
          cardholderName:
            maxLength: 50
            minLength: 0
            type: string
            description: The cardholder's name as it appears on the card.
          cardholderSignature:
            type: string
            description: Cardholder's signature in the format described in the [Special
              Fields and Parameters](https://docs.worldnettps.com/doku.php?id=developer:api_specification:special_fields_and_parameters#the_signature_field_format)
              section.
          cardDetails:
            $ref: '#/components/schemas/MagStripeDataFormat'
          pinDetails:
            $ref: '#/components/schemas/DukptPinDetails'
          ebtDetails:
            $ref: '#/components/schemas/EbtDetails'
          additionalTlvData:
            type: string
            description: Additional TLV (Tag-Length-Value) data which is sometimes
              required for contactless transactions.
      x-discriminator-value: MAG_STRIPE
    PartiallyEncryptedKeyedDataFormat:
      required:
      - device
      - encryptedPan
      - expiryDate
      - maskedPan
      type: object
      allOf:
      - $ref: '#/components/schemas/KeyedDataFormat'
      - type: object
        properties:
          device:
            $ref: '#/components/schemas/EncryptionCapableDevice'
          encryptedPan:
            type: string
            description: The primary account number (PAN) / card number encrypted
              by the device.
          maskedPan:
            maxLength: 19
            minLength: 12
            type: string
            description: 'The card number masked with the character `*`.<br />According
              to PCI DSS, only the first six and last four digits may be displayed.
              For example: `548010******5929`'
          expiryDate:
            pattern: '[0-9]{4}'
            type: string
            description: The card's expiration date in the format `MMYY`.
          cvv:
            pattern: '[0-9]{3,4}'
            type: string
            description: The card's security code.
          cvvEncrypted:
            type: string
            description: The CVV data encrypted by the device.
          issueNumber:
            pattern: '[0-9]{1,2}'
            type: string
            description: The card's issue number.
      x-discriminator-value: PARTIALLY_ENCRYPTED
    Payload:
      required:
      - payloadType
      type: object
      properties:
        payloadType:
          type: string
        accountType:
          type: string
          enum:
          - CHECKING
          - SAVINGS
          default: CHECKING
      discriminator:
        propertyName: payloadType
        mapping:
          EMV: '#/components/schemas/EmvPayload'
          RAW: '#/components/schemas/RawDeviceOutputPayload'
          KEYED: '#/components/schemas/KeyedPayload'
          MAG_STRIPE: '#/components/schemas/MagStripePayload'
          DIGITAL_WALLET: '#/components/schemas/DigitalWalletPayload'
          SECURE_CREDENTIALS: '#/components/schemas/SecureCredentialsPayload'
    PlainTextKeyedDataFormat:
      required:
      - cardNumber
      type: object
      allOf:
      - $ref: '#/components/schemas/KeyedDataFormat'
      - type: object
        properties:
          device:
            $ref: '#/components/schemas/Device'
          cardNumber:
            maxLength: 19
            minLength: 12
            type: string
            description: The card number, as a string without any separators.
          expiryDate:
            pattern: '[0-9]{4}'
            type: string
            description: The card's expiration date in the format `MMYY`. This field
              is mandatory in most cases except when performing electronic voucher
              transactions.
          cvv:
            pattern: '[0-9]{3,4}'
            type: string
            description: The card's security code.
          issueNumber:
            pattern: '[0-9]{1,2}'
            type: string
            description: The card's issue number.
      x-discriminator-value: PLAIN_TEXT
    PlainTextMagStripeDataFormat:
      required:
      - device
      - trackData
      type: object
      allOf:
      - $ref: '#/components/schemas/MagStripeDataFormat'
      - type: object
        properties:
          device:
            $ref: '#/components/schemas/Device'
          trackData:
            maxLength: 256
            minLength: 16
            type: string
            description: Clear text Track 2 Data.
      x-discriminator-value: PLAIN_TEXT
    RawDeviceOutputPayload:
      required:
      - device
      - payloadType
      - rawData
      type: object
      allOf:
      - $ref: '#/components/schemas/Payload'
      - type: object
        properties:
          device:
            $ref: '#/components/schemas/Device'
          rawData:
            maxLength: 2147483647
            minLength: 1
            type: string
            description: The raw POS device's output data.
          cardholderSignature:
            type: string
            description: Cardholder's signature in the format described in the [Special
              Fields and Parameters](https://docs.worldnettps.com/doku.php?id=developer:api_specification:special_fields_and_parameters#the_signature_field_format)
              section.
      x-discriminator-value: RAW
    SecureCredentialsPayload:
      required:
      - credentialsNumber
      - payloadType
      type: object
      allOf:
      - $ref: '#/components/schemas/Payload'
      - type: object
        properties:
          credentialsNumber:
            maxLength: 19
            minLength: 12
            type: string
            description: The unique number assigned by the gateway that should be
              used to reference the payment credentials when performing transactions.
      x-discriminator-value: SECURE_CREDENTIALS
    Voucher:
      required:
      - approvalCode
      - serialNumber
      type: object
      properties:
        approvalCode:
          maxLength: 6
          minLength: 6
          type: string
          description: The authorization code issued by a customer service representative.
            This code is usually acquired via a phone call during which it is ensured
            that there are enough funds in the cardholder’s EBT account for the transaction.
        serialNumber:
          maxLength: 15
          minLength: 7
          type: string
          description: The voucher serial number.
      description: Allows for processing EBT transactions using a manual voucher.
        This option is only available for EBT food stamp benefit accounts.
    TransactionCompact:
      required:
      - amount
      - currency
      - orderId
      - terminal
      - uniqueReference
      type: object
      properties:
        uniqueReference:
          maxLength: 10
          minLength: 10
          type: string
          description: |-
            Unique reference number assigned by the gateway that identifies the transaction on both platforms.

            **Note:** Clients must be able to store this value in order to eventually perform follow up operation on existing transactions.
        terminal:
          maxLength: 50
          minLength: 1
          type: string
          description: The terminal number assigned by the gateway.
        operator:
          maxLength: 50
          minLength: 0
          type: string
          description: The operator who initiated the transaction.
        orderId:
          maxLength: 24
          minLength: 1
          type: string
          description: A unique identifier for the order assigned by the merchant.
        dateTime:
          type: string
          description: The processing date and time of the transaction represented
            as per [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
          format: date-time
        description:
          maxLength: 1024
          minLength: 0
          type: string
          description: A brief description of the transaction.
        customerName:
          maxLength: 50
          minLength: 0
          type: string
          description: The card or account holder's name.
        maskedPan:
          type: string
          description: The masked primary account number.
        type:
          type: string
          description: The type of the generated transaction.
        resultCode:
          type: string
          description: |-
            Our platform maps result codes sent by different payment processors into a smaller set of codes as shown below. The original result code may be available in the `processorResultCode` field.

            - **A**: Approved / Authorized.
            - **D**: Declined / Not Authorized.
            - **E**: Accepted for later processing, but result currently unknown.
            - **P**: Only a portion of the original amount requested was authorized.
            - **R**: Issuer has declined the transaction and indicated that the customer should contact their bank.
            - **C**: Issuer has declined the transaction and requested that the card be retained as it may have been reported as lost or stolen.
          enum:
          - A
          - D
          - E
          - P
          - R
          - C
        status:
          type: string
          description: The current status of the generated transaction.
          enum:
          - READY
          - PENDING
          - VOID
          - DECLINED
          - COMPLETE
          - REFERRAL
          - PICKUP
          - REVERSAL
          - SENT
          - ADMIN
          - EXPIRED
          - ACCEPTED
          - REVIEW
          - OTHER
        currency:
          type: string
          description: The currency of the transaction. A 3-letter code as per the
            [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) standard.
          enum:
          - AED
          - AFN
          - ALL
          - AMD
          - ANG
          - AOA
          - ARS
          - AUD
          - AWG
          - AZN
          - BAM
          - BBD
          - BDT
          - BGN
          - BHD
          - BIF
          - BMD
          - BND
          - BOB
          - BOV
          - BRL
          - BSD
          - BTN
          - BWP
          - BYR
          - BZD
          - CAD
          - CDF
          - CHE
          - CHF
          - CHW
          - CLF
          - CLP
          - CNY
          - COP
          - COU
          - CRC
          - CUC
          - CUP
          - CVE
          - CZK
          - DJF
          - DKK
          - DOP
          - DZD
          - EGP
          - ERN
          - ETB
          - EUR
          - FJD
          - FKP
          - GBP
          - GEL
          - GHS
          - GIP
          - GMD
          - GNF
          - GTQ
          - GYD
          - HKD
          - HNL
          - HRK
          - HTG
          - HUF
          - IDR
          - ILS
          - INR
          - IQD
          - IRR
          - ISK
          - JMD
          - JOD
          - JPY
          - KES
          - KGS
          - KHR
          - KMF
          - KPW
          - KRW
          - KWD
          - KYD
          - KZT
          - LAK
          - LBP
          - LKR
          - LRD
          - LSL
          - LTL
          - LVL
          - LYD
          - MAD
          - MDL
          - MGA
          - MKD
          - MMK
          - MNT
          - MOP
          - MRO
          - MRU
          - MUR
          - MVR
          - MWK
          - MXN
          - MXV
          - MYR
          - MZN
          - NAD
          - NGN
          - NIO
          - NOK
          - NPR
          - NZD
          - OMR
          - PAB
          - PEN
          - PGK
          - PHP
          - PKR
          - PLN
          - PYG
          - QAR
          - RON
          - RSD
          - RUB
          - RWF
          - SAR
          - SBD
          - SCR
          - SDG
          - SEK
          - SGD
          - SHP
          - SLL
          - SOS
          - SRD
          - SSP
          - STD
          - STN
          - SVC
          - SYP
          - SZL
          - THB
          - TJS
          - TMT
          - TND
          - TOP
          - TRY
          - TTD
          - TWD
          - TZS
          - UAH
          - UGX
          - USD
          - USN
          - USS
          - UYI
          - UYU
          - UZS
          - VEF
          - VES
          - VND
          - VUV
          - WST
          - XAF
          - XCD
          - XOF
          - XPF
          - YER
          - ZAR
          - ZMW
          - ZWL
        amount:
          type: number
          description: |-
            The amount authorized by the payment processor.

            **Note:** For partial authorizations, this amount will be lower than the actual amount sent in the request.<br />**Note:** This amount will be negative for refund transactions to represent the return of settled funds back to the customer's account.
        links:
          uniqueItems: true
          type: array
          description: List of hypermedia links containing the operations available
            for the resource.
          items:
            $ref: '#/components/schemas/HypermediaLink'
      description: List of elements.
    TransactionPaginatedResult:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          description: List of elements.
          items:
            $ref: '#/components/schemas/TransactionCompact'
        next:
          type: string
          description: The cursor pointing to the next set of elements.
        links:
          uniqueItems: true
          type: array
          description: List of hypermedia links containing the operations available
            for the resource.
          items:
            $ref: '#/components/schemas/HypermediaLink'
    IpAddress:
      type: object
      properties:
        ipv4:
          type: string
          description: IP address in the Internet Protocol Version 4 Format.
        ipv6:
          type: string
          description: IP address in the Internet Protocol Version 6 Format
      description: The IP address that originated the request.
    SearchCredentialTransactionsRequest:
      required:
      - customerAccount
      - terminal
      type: object
      properties:
        terminal:
          maxLength: 50
          minLength: 1
          type: string
          description: The terminal number assigned by the gateway. This field indicates
            the terminal that owns the credentials, even though, it is possible to
            share credentials with other terminals. See the *Secure Card* section
            in [Integration Settings](https://docs.worldnettps.com/doku.php?id=developer:important_integration_settings)
            for more details about secure credentials sharing feature.
        operator:
          maxLength: 50
          minLength: 0
          type: string
          description: The operator who initiated the transaction. If not sent in
            the request, this field will be automatically populated with the API Key
            alias.
        ipAddress:
          $ref: '#/components/schemas/IpAddress'
        customerAccount:
          $ref: '#/components/schemas/Payload'
    StoreCredentialsRequest:
      required:
      - customerAccount
      - terminal
      type: object
      properties:
        terminal:
          maxLength: 50
          minLength: 1
          type: string
          description: The terminal number assigned by the gateway. This field indicates
            the terminal that owns the credentials, even though, it is possible to
            share credentials with other terminals.See the *Secure Card* section in
            [Integration Settings](https://docs.worldnettps.com/doku.php?id=developer:important_integration_settings)
            for more details about secure credentials sharing feature.
        operator:
          maxLength: 50
          minLength: 0
          type: string
          description: The operator who initiated the transaction. If not sent in
            the request, this field will be automatically populated with the API Key
            alias.
        merchantReference:
          maxLength: 48
          minLength: 0
          type: string
          description: Unique merchant reference that identifies the stored credentials
            on both merchant's and gateway's sides.<br />If not provided, we will
            assign an auto-generated value to the credentials and returns it in the
            response.
        ipAddress:
          $ref: '#/components/schemas/IpAddress'
        customer:
          $ref: '#/components/schemas/Customer'
        customerAccount:
          $ref: '#/components/schemas/Payload'
        additionalDataFields:
          type: array
          description: List of custom fields which are used to add extra information
            to stored credentials. Their values are going to be stored and used for
            the requests sent to the terminal's receipt and validation webhooks.<br
            />To understand more visit the section regarding [Special Fields and Parameters](https://docs.worldnettps.com/doku.php?id=developer:api_specification:special_fields_and_parameters).
          items:
            $ref: '#/components/schemas/CustomField'
    CardDetails:
      type: object
      allOf:
      - $ref: '#/components/schemas/UpdatablePayload'
      - type: object
        properties:
          cardholderName:
            maxLength: 50
            minLength: 1
            type: string
            description: The cardholder's name as it appears on the card.
          cardNumber:
            maxLength: 19
            minLength: 12
            type: string
            description: The card number, as a string without any separators.
          expiryDate:
            pattern: '[0-9]{4}'
            type: string
            description: The card's expiration date in the format `MMYY`.
          cvv:
            pattern: '[0-9]{3,4}'
            type: string
            description: The card's security code.
          issueNumber:
            pattern: '[0-9]{1,2}'
            type: string
            description: The card's issue number.
      x-discriminator-value: CARD
    UpdatablePayload:
      type: object
      properties:
        source:
          type: string
          default: CARD
      description: The details of the card or account to be updated. Keep in mind
        that, if the terminal supports secure card validation, a change in the card
        number will trigger a new account verification request.
      discriminator:
        propertyName: source
        mapping:
          CARD: '#/components/schemas/CardDetails'
    UpdateCredentialsRequest:
      required:
      - terminal
      type: object
      properties:
        terminal:
          maxLength: 50
          minLength: 1
          type: string
          description: The number of the terminal which is the credentials' holder.
        operator:
          maxLength: 50
          minLength: 0
          type: string
          description: The operator who initiated the transaction. If not sent in
            the request, this field will be automatically populated with the API Key
            alias.
        customer:
          $ref: '#/components/schemas/Customer'
        customerAccount:
          $ref: '#/components/schemas/UpdatablePayload'
        additionalDataFields:
          type: array
          description: List of custom fields to add or update. An empty list will
            lead to the removal of any existing additional data associated with the
            credentials.
          items:
            $ref: '#/components/schemas/CustomField'
    CustomerAccount:
      type: object
      properties:
        cardType:
          type: string
          description: The brand of the card used in the transaction.
        cardholderName:
          maxLength: 50
          minLength: 1
          type: string
          description: The cardholder's name as it appears on the card.
        maskedPan:
          maxLength: 19
          minLength: 12
          type: string
          description: 'The card number masked with the character `*`.<br />According
            to PCI DSS, only the first six and last four digits may be displayed.
            For example: `548010******5929`'
        expiryDate:
          pattern: '[0-9]{4}'
          type: string
          description: The card's expiration date in the format `MMYY`.
        entryMethod:
          type: string
          description: The method used to capture the customer's account details.
      description: The customer's account details used to authorize the transaction.
    Order:
      required:
      - currency
      - orderId
      - totalAmount
      type: object
      properties:
        orderId:
          maxLength: 24
          minLength: 1
          type: string
          description: A unique identifier for the order assigned by the merchant.
        description:
          maxLength: 1024
          minLength: 0
          type: string
          description: A brief description of the transaction.
        currency:
          type: string
          description: The currency of the transaction. A 3-letter code as per the
            [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) standard.
          enum:
          - AED
          - AFN
          - ALL
          - AMD
          - ANG
          - AOA
          - ARS
          - AUD
          - AWG
          - AZN
          - BAM
          - BBD
          - BDT
          - BGN
          - BHD
          - BIF
          - BMD
          - BND
          - BOB
          - BOV
          - BRL
          - BSD
          - BTN
          - BWP
          - BYR
          - BZD
          - CAD
          - CDF
          - CHE
          - CHF
          - CHW
          - CLF
          - CLP
          - CNY
          - COP
          - COU
          - CRC
          - CUC
          - CUP
          - CVE
          - CZK
          - DJF
          - DKK
          - DOP
          - DZD
          - EGP
          - ERN
          - ETB
          - EUR
          - FJD
          - FKP
          - GBP
          - GEL
          - GHS
          - GIP
          - GMD
          - GNF
          - GTQ
          - GYD
          - HKD
          - HNL
          - HRK
          - HTG
          - HUF
          - IDR
          - ILS
          - INR
          - IQD
          - IRR
          - ISK
          - JMD
          - JOD
          - JPY
          - KES
          - KGS
          - KHR
          - KMF
          - KPW
          - KRW
          - KWD
          - KYD
          - KZT
          - LAK
          - LBP
          - LKR
          - LRD
          - LSL
          - LTL
          - LVL
          - LYD
          - MAD
          - MDL
          - MGA
          - MKD
          - MMK
          - MNT
          - MOP
          - MRO
          - MRU
          - MUR
          - MVR
          - MWK
          - MXN
          - MXV
          - MYR
          - MZN
          - NAD
          - NGN
          - NIO
          - NOK
          - NPR
          - NZD
          - OMR
          - PAB
          - PEN
          - PGK
          - PHP
          - PKR
          - PLN
          - PYG
          - QAR
          - RON
          - RSD
          - RUB
          - RWF
          - SAR
          - SBD
          - SCR
          - SDG
          - SEK
          - SGD
          - SHP
          - SLL
          - SOS
          - SRD
          - SSP
          - STD
          - STN
          - SVC
          - SYP
          - SZL
          - THB
          - TJS
          - TMT
          - TND
          - TOP
          - TRY
          - TTD
          - TWD
          - TZS
          - UAH
          - UGX
          - USD
          - USN
          - USS
          - UYI
          - UYU
          - UZS
          - VEF
          - VES
          - VND
          - VUV
          - WST
          - XAF
          - XCD
          - XOF
          - XPF
          - YER
          - ZAR
          - ZMW
          - ZWL
        totalAmount:
          minimum: 0
          exclusiveMinimum: true
          type: number
          description: The total amount to be authorized.
        orderBreakdown:
          $ref: '#/components/schemas/OrderBreakdown'
    OrderBreakdown:
      required:
      - subtotalAmount
      type: object
      properties:
        subtotalAmount:
          minimum: 0
          exclusiveMinimum: true
          type: number
          description: The amount excluding taxes, tip and cashback amounts.
        cashbackAmount:
          minimum: 0
          exclusiveMinimum: true
          type: number
          description: Cashback amount.
        taxes:
          type: array
          description: List of taxes to be applied to the order.
          items:
            $ref: '#/components/schemas/Tax'
        tip:
          $ref: '#/components/schemas/Tip'
        surcharge:
          $ref: '#/components/schemas/Surcharge'
    Payment:
      required:
      - customerAccount
      - terminal
      - uniqueReference
      type: object
      properties:
        uniqueReference:
          maxLength: 10
          minLength: 10
          type: string
          description: |-
            Unique reference number assigned by the gateway that identifies the transaction on both platforms.

            **Note:** Clients must be able to store this value in order to eventually perform follow up operation on existing transactions.
        terminal:
          maxLength: 50
          minLength: 1
          type: string
          description: The terminal number assigned by the gateway.
        operator:
          maxLength: 50
          minLength: 0
          type: string
          description: The operator who initiated the transaction.
        order:
          $ref: '#/components/schemas/Order'
        customerAccount:
          $ref: '#/components/schemas/CustomerAccount'
        securityCheck:
          $ref: '#/components/schemas/SecurityCheck'
        transactionResult:
          $ref: '#/components/schemas/TransactionResult'
        additionalDataFields:
          uniqueItems: true
          type: array
          description: List of custom fields representing the additional information
            sent by the merchant and stored along with the transaction.
          items:
            $ref: '#/components/schemas/CustomField'
        emvTags:
          uniqueItems: true
          type: array
          description: List of tags returned for EMV transactions.
          items:
            $ref: '#/components/schemas/EmvTag'
        receipts:
          uniqueItems: true
          type: array
          description: The customer and merchant receipt copies.
          items:
            $ref: '#/components/schemas/TransactionReceipt'
        links:
          uniqueItems: true
          type: array
          description: List of hypermedia links containing the operations available
            for the resource.
          items:
            $ref: '#/components/schemas/HypermediaLink'
    ReceiptOrderedInfo:
      type: object
      properties:
        order:
          type: integer
          format: int32
        label:
          type: string
        value:
          type: string
    SecurityCheck:
      type: object
      properties:
        cvvResult:
          type: string
          enum:
          - M
          - N
          - P
          - U
        avsResult:
          type: string
          enum:
          - Y
          - A
          - Z
          - N
          - U
          - R
          - G
          - S
          - F
          - W
          - X
      description: Results of the security checks performed during authorization.
    Surcharge:
      type: object
      properties:
        applied:
          type: boolean
          description: Indicates whether or not a surcharge fee is applied to the
            total amount.
        amount:
          minimum: 0
          exclusiveMinimum: true
          type: number
          description: Surcharge amount. This field is only available in the response
            and it'll be populated whenever a surcharge fee is applied to the transaction.
          readOnly: true
        percentage:
          maximum: 100
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: true
          type: number
          description: Surcharge percentage. This field is only available in the response
            and it'll be populated whenever a surcharge fee is applied to the transaction.
          format: double
          readOnly: true
      description: Use this field to indicate that the surcharge fee configured in
        your account has been applied to the transaction's total amount.
    Tax:
      required:
      - name
      - rate
      type: object
      properties:
        name:
          maxLength: 64
          minLength: 1
          type: string
          description: Tax Name.
        rate:
          maximum: 100
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: false
          type: number
          description: The ratio expressed as a percentage at which a transaction
            is taxed.
          format: double
      description: List of taxes to be applied to the order.
    Tip:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - PERCENTAGE
          - FIXED_AMOUNT
        amount:
          minimum: 0
          exclusiveMinimum: true
          type: number
          description: This field must used when the tip is of type `FIXED_AMOUNT`.
            Otherwise, refer to the `percentage` property instead.
        percentage:
          maximum: 100
          exclusiveMaximum: false
          minimum: 0
          exclusiveMinimum: true
          type: number
          description: This field must used when the tip is of type `PERCENTAGE`.
            Otherwise, refer to the `amount` property instead.
          format: double
      description: |-
        Tip amount or percentage to be included.

        **Note:** Percentage tips will be always applied over the after-tax amount.
    TransactionReceipt:
      required:
      - copy
      - customFields
      - footer
      - header
      - iccData
      - merchantDetails
      - transactionData
      type: object
      properties:
        copy:
          type: string
          enum:
          - CARDHOLDER_COPY
          - CARD_ACCEPTOR_COPY
        header:
          type: string
        merchantDetails:
          type: array
          items:
            $ref: '#/components/schemas/ReceiptOrderedInfo'
        transactionData:
          type: array
          items:
            $ref: '#/components/schemas/ReceiptOrderedInfo'
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        iccData:
          type: array
          items:
            $ref: '#/components/schemas/ReceiptOrderedInfo'
        footer:
          type: string
        termsAndConditions:
          type: string
      description: The customer and merchant receipt copies.
    ReversePaymentRequest:
      type: object
      properties:
        operator:
          maxLength: 50
          minLength: 0
          type: string
          description: The operator who initiated the transaction. If not sent in
            the request, this field will be automatically populated with the API Key
            alias.
        reversalAmount:
          minimum: 0
          exclusiveMinimum: true
          type: number
          description: |-
            The amount to return to the customer's account.

            **Note:** This field is not required for full amount cancellations.
        reversalReason:
          maxLength: 100
          minLength: 1
          type: string
          description: The reason why the transaction is being cancelled.
        customerAccount:
          $ref: '#/components/schemas/Payload'
        ipAddress:
          $ref: '#/components/schemas/IpAddress'
    CapturePaymentRequest:
      type: object
      properties:
        operator:
          maxLength: 50
          minLength: 0
          type: string
          description: The operator who initiated the transaction. If not sent in
            the request, this field will be automatically populated with the API Key
            alias.
        captureAmount:
          minimum: 0
          exclusiveMinimum: true
          type: number
          description: The amount to be captured. If not sent, the full amount of
            the transaction will be captured.
    Refund:
      required:
      - customerAccount
      - orderId
      - refundReason
      - terminal
      - uniqueReference
      type: object
      properties:
        uniqueReference:
          maxLength: 10
          minLength: 10
          type: string
          description: |-
            Unique reference number assigned by the gateway that identifies the transaction on both platforms.

            **Note:** Clients must be able to store this value in order to eventually perform follow up operation on existing transactions.
        terminal:
          maxLength: 50
          minLength: 1
          type: string
          description: The terminal number assigned by the gateway.
        operator:
          maxLength: 50
          minLength: 0
          type: string
          description: The operator who initiated the transaction.
        orderId:
          maxLength: 24
          minLength: 1
          type: string
          description: A unique identifier for the order assigned by the merchant.
        refundReason:
          maxLength: 100
          minLength: 1
          type: string
          description: The reason why the transaction is being refunded.
        customerAccount:
          $ref: '#/components/schemas/CustomerAccount'
        securityCheck:
          $ref: '#/components/schemas/SecurityCheck'
        transactionResult:
          $ref: '#/components/schemas/TransactionResult'
        additionalDataFields:
          uniqueItems: true
          type: array
          description: List of custom fields representing the additional information
            sent by the merchant and stored along with the transaction.
          items:
            $ref: '#/components/schemas/CustomField'
        emvTags:
          uniqueItems: true
          type: array
          description: List of tags returned for EMV transactions.
          items:
            $ref: '#/components/schemas/EmvTag'
        receipts:
          uniqueItems: true
          type: array
          description: The customer and merchant receipt copies.
          items:
            $ref: '#/components/schemas/TransactionReceipt'
        links:
          uniqueItems: true
          type: array
          description: List of hypermedia links containing the operations available
            for the resource.
          items:
            $ref: '#/components/schemas/HypermediaLink'
    RefundPaymentRequest:
      required:
      - refundAmount
      - refundReason
      type: object
      properties:
        operator:
          maxLength: 50
          minLength: 0
          type: string
          description: The operator who initiated the transaction. If not sent in
            the request, this field will be automatically populated with the API Key
            alias.
        refundAmount:
          minimum: 0
          exclusiveMinimum: true
          type: number
          description: The amount to return to the customer's account.
        refundReason:
          maxLength: 100
          minLength: 1
          type: string
          description: The reason why the transaction is being refunded.
    CredentialOnFile:
      required:
      - tokenize
      type: object
      properties:
        tokenize:
          type: boolean
          description: Set this flag if you want to store the customer's payment details
            using our _Secure Credentials_ tokenization mechanism.
        merchantReference:
          maxLength: 48
          minLength: 0
          type: string
          description: Unique merchant reference that identifies the stored credentials
            on both merchant's and gateway's sides.<br />If not provided when tokenizing
            the payment details, we will assign an auto-generated value to the credentials
            and returns it in the response.
        usageAgreement:
          type: string
          description: |
            It has been a Card Scheme requirement since 14th October 2017 that you must establish an agreement with a new customer before storing their card details for future standing Merchant Initiated Transactions (MITs).

            - **UNSCHEDULED**: Transactions that are for a fixed or variable amount that don’t occur on a scheduled or regularly occurring transaction date, but when a pre-defined event happens.
            - **RECURRING**: Transactions that are processed on a regular fixed interval for a pre agreed or advised amount, where applicable. Recurring transactions don’t have a fixed duration and will continue to be processed until the cardholder cancels the agreement.
            - **INSTALLMENT**: Transactions that are processed on a regular fixed interval for a pre agreed amount for a single purchase of good or services. Unlike recurring transactions, they do have a fixed duration and must not continue to be processed after the end of the agreed instalment period
          enum:
          - UNSCHEDULED
          - RECURRING
          - INSTALLMENT
      description: |-
        Use this element to indicate that the customer's account details should be stored as part of the authorization.

        **Note:** The secure credentials will only be created if the transaction is approved.
    MotoPaymentRequest:
      required:
      - customerAccount
      - order
      - terminal
      type: object
      allOf:
      - $ref: '#/components/schemas/PaymentRequest'
      x-discriminator-value: MOTO
    OfflineProcessing:
      type: object
      properties:
        operation:
          type: string
          enum:
          - OFFLINE_DECLINE
          - OFFLINE_APPROVAL
          - DEFERRED_AUTHORIZATION
        approvalCode:
          maxLength: 48
          minLength: 0
          type: string
          description: Approval code provided by the payment processor for the specific
            transaction.<br />Use this field combined with `OFFLINE_APPROVAL` operation.
        dateTime:
          type: string
          description: Local date/time of operation as per [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
            standard.<br />Use this field combined with `DEFERRED_AUTHORIZATION` operation.
          format: date-time
      description: Only use this field to indicate offline approvals or declines.
    PaymentRequest:
      required:
      - order
      - terminal
      type: object
      properties:
        channel:
          type: string
        terminal:
          maxLength: 50
          minLength: 1
          type: string
          description: The terminal number assigned by the gateway.
        operator:
          maxLength: 50
          minLength: 0
          type: string
          description: The operator who initiated the transaction. If not sent in
            the request, this field will be automatically populated with the API Key
            alias.
        order:
          $ref: '#/components/schemas/Order'
        customer:
          $ref: '#/components/schemas/Customer'
        customerAccount:
          $ref: '#/components/schemas/Payload'
        credentialOnFile:
          $ref: '#/components/schemas/CredentialOnFile'
        ipAddress:
          $ref: '#/components/schemas/IpAddress'
        autoCapture:
          type: boolean
          description: |-
            It indicates whether the amount of the transaction should be automatically and fully captured.

            - `true` : the gateway will automatically set the transaction to `READY` making it eligible for the next settlement run.
            - `false`: a pre-authorization will be performed if your account has the "Allow Pre-Auth" feature enabled. Otherwise, a regular transaction will be created with `PENDING` status. Either way, an additional call to the [Capture a Payment](#operation/capturePayment) operation is required to capture the final amount and flag the transaction as ready for the next settlement run.
          default: true
        processAsSale:
          type: boolean
          description: |-
            Indicates whether the transaction should be processed as a Sale. A Sale transaction is characterized by its `COMPLETE` status due to the fact that authorization and settlement operations are performed at the same time. This means that this kind of transaction is not subject to changes or late adjustments even while sitting in the open batch.

            **Note:** The `autoCapture` indicator must be set to TRUE to process a Sale.
          default: false
        offlineProcessing:
          $ref: '#/components/schemas/OfflineProcessing'
        additionalDataFields:
          type: array
          description: List of custom fields which are used to add extra information
            to transactions. Their values are going to be stored and used for the
            requests sent to the terminal's receipt and validation webhooks.<br />For
            more information, visit the section [Special Fields and Parameters](https://docs.worldnettps.com/doku.php?id=developer:api_specification:special_fields_and_parameters)
            of our knowledge base.
          items:
            $ref: '#/components/schemas/CustomField'
      discriminator:
        propertyName: channel
        mapping:
          POS: '#/components/schemas/PosPaymentRequest'
          WEB: '#/components/schemas/WebPaymentRequest'
          MOTO: '#/components/schemas/MotoPaymentRequest'
    PosPaymentRequest:
      required:
      - customerAccount
      - order
      - terminal
      type: object
      allOf:
      - $ref: '#/components/schemas/PaymentRequest'
      x-discriminator-value: POS
    WebPaymentRequest:
      required:
      - customerAccount
      - order
      - terminal
      type: object
      allOf:
      - $ref: '#/components/schemas/PaymentRequest'
      x-discriminator-value: WEB
    CustomerUpdatableData:
      type: object
      properties:
        phone:
          type: string
          description: The customer's contact phone number.<br />If **SMS Cardholder
            Receipts** feature is enabled in the terminal, We will use this number
            to automatically send the receipts of eventual transactions.
        email:
          type: string
          description: The customer's contact email address.<br />If **Email Cardholder
            Receipt** feature is enabled in the terminal, We will use this address
            to automatically send the receipts of eventual transactions.
      description: Customer contact and address details.
    OrderBreakdownUpdatableData:
      type: object
      properties:
        tip:
          $ref: '#/components/schemas/Tip'
      description: It allows clients to perform a tip adjustment.
    UpdatePaymentRequest:
      type: object
      properties:
        operator:
          maxLength: 50
          minLength: 0
          type: string
          description: The operator who initiated the transaction. If not sent in
            the request, this field will be automatically populated with the API Key
            alias.
        totalAmount:
          minimum: 0
          exclusiveMinimum: true
          type: number
          description: It allows clients to update the transaction's total amount.
        customer:
          $ref: '#/components/schemas/CustomerUpdatableData'
        orderBreakdown:
          $ref: '#/components/schemas/OrderBreakdownUpdatableData'
        status:
          type: string
          description: It allows clients to update the transaction's status.
          enum:
          - READY
          - PENDING
          - VOID
          - DECLINED
          - COMPLETE
          - REFERRAL
          - PICKUP
          - REVERSAL
          - SENT
          - ADMIN
          - EXPIRED
          - ACCEPTED
          - REVIEW
          - OTHER
        cardholderSignature:
          type: string
          description: |-
            It allows clients to perform a late signature capture for approved cardholder present transactions.

            **Note:** Once a signature is stored for a specific transaction it cannot be replace or deleted.
    UpdateRefundRequest:
      type: object
      properties:
        customer:
          $ref: '#/components/schemas/CustomerUpdatableData'
        operator:
          maxLength: 50
          minLength: 0
          type: string
          description: The operator who initiated the transaction. If not sent in
            the request, this field will be automatically populated with the API Key
            alias.
        status:
          type: string
          description: The current status of the generated transaction.
          enum:
          - READY
          - PENDING
          - VOID
          - DECLINED
          - COMPLETE
          - REFERRAL
          - PICKUP
          - REVERSAL
          - SENT
          - ADMIN
          - EXPIRED
          - ACCEPTED
          - REVIEW
          - OTHER
    MotoRefundRequest:
      required:
      - currency
      - customerAccount
      - orderId
      - refundAmount
      - refundReason
      - terminal
      type: object
      allOf:
      - $ref: '#/components/schemas/RefundRequest'
      x-discriminator-value: MOTO
    PosRefundRequest:
      required:
      - currency
      - customerAccount
      - orderId
      - refundAmount
      - refundReason
      - terminal
      type: object
      allOf:
      - $ref: '#/components/schemas/RefundRequest'
      x-discriminator-value: POS
    RefundRequest:
      required:
      - currency
      - orderId
      - refundAmount
      - refundReason
      - terminal
      type: object
      properties:
        channel:
          type: string
        terminal:
          maxLength: 50
          minLength: 1
          type: string
          description: The terminal number assigned by the gateway.
        operator:
          maxLength: 50
          minLength: 0
          type: string
          description: The operator who initiated the transaction. If not sent in
            the request, this field will be automatically populated with the API Key
            alias.
        orderId:
          maxLength: 24
          minLength: 1
          type: string
          description: A unique identifier for the order assigned by the merchant.
        currency:
          type: string
          description: The currency of the transaction. A 3-letter code as per the
            [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) standard.
          enum:
          - AED
          - AFN
          - ALL
          - AMD
          - ANG
          - AOA
          - ARS
          - AUD
          - AWG
          - AZN
          - BAM
          - BBD
          - BDT
          - BGN
          - BHD
          - BIF
          - BMD
          - BND
          - BOB
          - BOV
          - BRL
          - BSD
          - BTN
          - BWP
          - BYR
          - BZD
          - CAD
          - CDF
          - CHE
          - CHF
          - CHW
          - CLF
          - CLP
          - CNY
          - COP
          - COU
          - CRC
          - CUC
          - CUP
          - CVE
          - CZK
          - DJF
          - DKK
          - DOP
          - DZD
          - EGP
          - ERN
          - ETB
          - EUR
          - FJD
          - FKP
          - GBP
          - GEL
          - GHS
          - GIP
          - GMD
          - GNF
          - GTQ
          - GYD
          - HKD
          - HNL
          - HRK
          - HTG
          - HUF
          - IDR
          - ILS
          - INR
          - IQD
          - IRR
          - ISK
          - JMD
          - JOD
          - JPY
          - KES
          - KGS
          - KHR
          - KMF
          - KPW
          - KRW
          - KWD
          - KYD
          - KZT
          - LAK
          - LBP
          - LKR
          - LRD
          - LSL
          - LTL
          - LVL
          - LYD
          - MAD
          - MDL
          - MGA
          - MKD
          - MMK
          - MNT
          - MOP
          - MRO
          - MRU
          - MUR
          - MVR
          - MWK
          - MXN
          - MXV
          - MYR
          - MZN
          - NAD
          - NGN
          - NIO
          - NOK
          - NPR
          - NZD
          - OMR
          - PAB
          - PEN
          - PGK
          - PHP
          - PKR
          - PLN
          - PYG
          - QAR
          - RON
          - RSD
          - RUB
          - RWF
          - SAR
          - SBD
          - SCR
          - SDG
          - SEK
          - SGD
          - SHP
          - SLL
          - SOS
          - SRD
          - SSP
          - STD
          - STN
          - SVC
          - SYP
          - SZL
          - THB
          - TJS
          - TMT
          - TND
          - TOP
          - TRY
          - TTD
          - TWD
          - TZS
          - UAH
          - UGX
          - USD
          - USN
          - USS
          - UYI
          - UYU
          - UZS
          - VEF
          - VES
          - VND
          - VUV
          - WST
          - XAF
          - XCD
          - XOF
          - XPF
          - YER
          - ZAR
          - ZMW
          - ZWL
        refundAmount:
          minimum: 0
          exclusiveMinimum: true
          type: number
          description: The total amount to be refunded.
        refundReason:
          maxLength: 100
          minLength: 1
          type: string
          description: The reason why the refund is being performed.
        customer:
          $ref: '#/components/schemas/Customer'
        customerAccount:
          $ref: '#/components/schemas/Payload'
        ipAddress:
          $ref: '#/components/schemas/IpAddress'
        additionalDataFields:
          type: array
          description: List of custom fields which are used to add extra information
            to transactions. Their values are going to be stored and used for the
            requests sent to the terminal's receipt and validation webhooks.<br />To
            understand more visit the section regarding [Special Fields and Parameters](https://docs.worldnettps.com/doku.php?id=developer:api_specification:special_fields_and_parameters).
          items:
            $ref: '#/components/schemas/CustomField'
      discriminator:
        propertyName: channel
        mapping:
          POS: '#/components/schemas/PosRefundRequest'
          MOTO: '#/components/schemas/MotoRefundRequest'
  securitySchemes:
    Basic:
      type: http
      description: |
        Use `Basic` authentication scheme to exchange your API Key for JWT Access Tokens.
      scheme: basic
    Bearer:
      type: http
      description: |
        Use `Bearer` authentication scheme to prove your identity and access protected resources.
      scheme: bearer
      bearerFormat: JWT
x-tagGroups:
- name: ACCOUNT API
  tags:
  - tokens
  - settings
- name: CUSTOMER API
  tags:
  - cards
  - credentials
- name: TRANSACTION API
  tags:
  - payments
  - refunds
  - transactions
