# coding: utf-8

from model.serializable import SwaggerSerializable


class SecureCredentials(SwaggerSerializable):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'terminal': 'str',
        'merchant_reference': 'str',
        'credentials_number': 'str',
        'masked_pan': 'str',
        'security_check': 'str',
        'additional_data_fields': 'list[CustomField]',
        'links': 'list[HypermediaLink]'
    }

    attribute_map = {
        'terminal': 'terminal',
        'merchant_reference': 'merchantReference',
        'credentials_number': 'credentialsNumber',
        'masked_pan': 'maskedPan',
        'security_check': 'securityCheck',
        'additional_data_fields': 'additionalDataFields',
        'links': 'links'
    }

    def __init__(self, terminal=None, merchant_reference=None, credentials_number=None, masked_pan=None, security_check=None, additional_data_fields=None, links=None):  # noqa: E501
        """SecureCredentials - a model defined in Swagger"""  # noqa: E501
        self._terminal = None
        self._merchant_reference = None
        self._credentials_number = None
        self._masked_pan = None
        self._security_check = None
        self._additional_data_fields = None
        self._links = None
        self.discriminator = None
        self.terminal = terminal
        self.merchant_reference = merchant_reference
        self.credentials_number = credentials_number
        self.masked_pan = masked_pan
        if security_check is not None:
            self.security_check = security_check
        if additional_data_fields is not None:
            self.additional_data_fields = additional_data_fields
        if links is not None:
            self.links = links

    @property
    def terminal(self):
        """Gets the terminal of this SecureCredentials.  # noqa: E501

        The terminal which is the credentials' owner. It means that even though the credentials can be shared to perform transactions, update and delete operations can only be requested by owners.  # noqa: E501

        :return: The terminal of this SecureCredentials.  # noqa: E501
        :rtype: str
        """
        return self._terminal

    @terminal.setter
    def terminal(self, terminal):
        """Sets the terminal of this SecureCredentials.

        The terminal which is the credentials' owner. It means that even though the credentials can be shared to perform transactions, update and delete operations can only be requested by owners.  # noqa: E501

        :param terminal: The terminal of this SecureCredentials.  # noqa: E501
        :type: str
        """
        if terminal is None:
            raise ValueError("Invalid value for `terminal`, must not be `None`")  # noqa: E501

        self._terminal = terminal

    @property
    def merchant_reference(self):
        """Gets the merchant_reference of this SecureCredentials.  # noqa: E501

        Unique merchant reference that identifies the stored credentials on both merchant's and gateway's sides.  **Note:** Clients must be able to store this value in order to eventually retrieve, update and delete the stored credentials.  # noqa: E501

        :return: The merchant_reference of this SecureCredentials.  # noqa: E501
        :rtype: str
        """
        return self._merchant_reference

    @merchant_reference.setter
    def merchant_reference(self, merchant_reference):
        """Sets the merchant_reference of this SecureCredentials.

        Unique merchant reference that identifies the stored credentials on both merchant's and gateway's sides.  **Note:** Clients must be able to store this value in order to eventually retrieve, update and delete the stored credentials.  # noqa: E501

        :param merchant_reference: The merchant_reference of this SecureCredentials.  # noqa: E501
        :type: str
        """
        if merchant_reference is None:
            raise ValueError("Invalid value for `merchant_reference`, must not be `None`")  # noqa: E501

        self._merchant_reference = merchant_reference

    @property
    def credentials_number(self):
        """Gets the credentials_number of this SecureCredentials.  # noqa: E501

        The unique number that should be used to identify the credentials when performing transactions.<br />This token is assigned by the gateway and follows the same format of regular card numbers:  - A six-digit identification number which is `296753`. - A variable length (up to 12 digits) individual identifier. - A single check digit calculated using the Luhn algorithm.  # noqa: E501

        :return: The credentials_number of this SecureCredentials.  # noqa: E501
        :rtype: str
        """
        return self._credentials_number

    @credentials_number.setter
    def credentials_number(self, credentials_number):
        """Sets the credentials_number of this SecureCredentials.

        The unique number that should be used to identify the credentials when performing transactions.<br />This token is assigned by the gateway and follows the same format of regular card numbers:  - A six-digit identification number which is `296753`. - A variable length (up to 12 digits) individual identifier. - A single check digit calculated using the Luhn algorithm.  # noqa: E501

        :param credentials_number: The credentials_number of this SecureCredentials.  # noqa: E501
        :type: str
        """
        if credentials_number is None:
            raise ValueError("Invalid value for `credentials_number`, must not be `None`")  # noqa: E501

        self._credentials_number = credentials_number

    @property
    def masked_pan(self):
        """Gets the masked_pan of this SecureCredentials.  # noqa: E501

        The number of the tokenized card/account masked as per PCI requirements.  # noqa: E501

        :return: The masked_pan of this SecureCredentials.  # noqa: E501
        :rtype: str
        """
        return self._masked_pan

    @masked_pan.setter
    def masked_pan(self, masked_pan):
        """Sets the masked_pan of this SecureCredentials.

        The number of the tokenized card/account masked as per PCI requirements.  # noqa: E501

        :param masked_pan: The masked_pan of this SecureCredentials.  # noqa: E501
        :type: str
        """
        if masked_pan is None:
            raise ValueError("Invalid value for `masked_pan`, must not be `None`")  # noqa: E501

        self._masked_pan = masked_pan

    @property
    def security_check(self):
        """Gets the security_check of this SecureCredentials.  # noqa: E501

        The result of the security checks performed via account verification to determine if the account is valid and in good standing. Depending on the Payment Processor used by the Terminal, the account verification can be performed in two distinct ways:  - A 0.00 (zero) amount transaction or, - A 1.00 (one) currency unit amount transaction followed, when successful, by its voiding (both transactions will appear in your batch).  **Note:** If the account verification fails, the payment credentials are not stored.  # noqa: E501

        :return: The security_check of this SecureCredentials.  # noqa: E501
        :rtype: str
        """
        return self._security_check

    @security_check.setter
    def security_check(self, security_check):
        """Sets the security_check of this SecureCredentials.

        The result of the security checks performed via account verification to determine if the account is valid and in good standing. Depending on the Payment Processor used by the Terminal, the account verification can be performed in two distinct ways:  - A 0.00 (zero) amount transaction or, - A 1.00 (one) currency unit amount transaction followed, when successful, by its voiding (both transactions will appear in your batch).  **Note:** If the account verification fails, the payment credentials are not stored.  # noqa: E501

        :param security_check: The security_check of this SecureCredentials.  # noqa: E501
        :type: str
        """
        allowed_values = ["NOT_VALIDATED", "CVV_VALIDATED", "ISSUE_NO_VALIDATED", "VALIDATION_FAILED", "CARD_NUMBER_VALIDATED"]  # noqa: E501
        if security_check not in allowed_values:
            raise ValueError(
                "Invalid value for `security_check` ({0}), must be one of {1}"  # noqa: E501
                .format(security_check, allowed_values)
            )

        self._security_check = security_check

    @property
    def additional_data_fields(self):
        """Gets the additional_data_fields of this SecureCredentials.  # noqa: E501

        List of custom fields representing the additional information sent by the merchant and stored along with the credentials.  # noqa: E501

        :return: The additional_data_fields of this SecureCredentials.  # noqa: E501
        :rtype: list[CustomField]
        """
        return self._additional_data_fields

    @additional_data_fields.setter
    def additional_data_fields(self, additional_data_fields):
        """Sets the additional_data_fields of this SecureCredentials.

        List of custom fields representing the additional information sent by the merchant and stored along with the credentials.  # noqa: E501

        :param additional_data_fields: The additional_data_fields of this SecureCredentials.  # noqa: E501
        :type: list[CustomField]
        """

        self._additional_data_fields = additional_data_fields

    @property
    def links(self):
        """Gets the links of this SecureCredentials.  # noqa: E501

        List of hypermedia links containing the operations available for the resource.  # noqa: E501

        :return: The links of this SecureCredentials.  # noqa: E501
        :rtype: list[HypermediaLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this SecureCredentials.

        List of hypermedia links containing the operations available for the resource.  # noqa: E501

        :param links: The links of this SecureCredentials.  # noqa: E501
        :type: list[HypermediaLink]
        """

        self._links = links
