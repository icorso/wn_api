# coding: utf-8

from model.serializable import SwaggerSerializable


class OrderBreakdown(SwaggerSerializable):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subtotal_amount': 'float',
        'cashback_amount': 'float',
        'taxes': 'list[Tax]',
        'tip': 'Tip',
        'surcharge': 'Surcharge'
    }

    attribute_map = {
        'subtotal_amount': 'subtotalAmount',
        'cashback_amount': 'cashbackAmount',
        'taxes': 'taxes',
        'tip': 'tip',
        'surcharge': 'surcharge'
    }

    def __init__(self, subtotal_amount=None, cashback_amount=None, taxes=None, tip=None, surcharge=None):  # noqa: E501
        """OrderBreakdown - a model defined in Swagger"""  # noqa: E501
        self._subtotal_amount = None
        self._cashback_amount = None
        self._taxes = None
        self._tip = None
        self._surcharge = None
        self.discriminator = None
        self.subtotal_amount = subtotal_amount
        if cashback_amount is not None:
            self.cashback_amount = cashback_amount
        if taxes is not None:
            self.taxes = taxes
        if tip is not None:
            self.tip = tip
        if surcharge is not None:
            self.surcharge = surcharge

    @property
    def subtotal_amount(self):
        """Gets the subtotal_amount of this OrderBreakdown.  # noqa: E501

        The amount excluding taxes, tip and cashback amounts.  # noqa: E501

        :return: The subtotal_amount of this OrderBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._subtotal_amount

    @subtotal_amount.setter
    def subtotal_amount(self, subtotal_amount):
        """Sets the subtotal_amount of this OrderBreakdown.

        The amount excluding taxes, tip and cashback amounts.  # noqa: E501

        :param subtotal_amount: The subtotal_amount of this OrderBreakdown.  # noqa: E501
        :type: float
        """
        if subtotal_amount is None:
            raise ValueError("Invalid value for `subtotal_amount`, must not be `None`")  # noqa: E501

        self._subtotal_amount = subtotal_amount

    @property
    def cashback_amount(self):
        """Gets the cashback_amount of this OrderBreakdown.  # noqa: E501

        Cashback amount.  # noqa: E501

        :return: The cashback_amount of this OrderBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._cashback_amount

    @cashback_amount.setter
    def cashback_amount(self, cashback_amount):
        """Sets the cashback_amount of this OrderBreakdown.

        Cashback amount.  # noqa: E501

        :param cashback_amount: The cashback_amount of this OrderBreakdown.  # noqa: E501
        :type: float
        """

        self._cashback_amount = cashback_amount

    @property
    def taxes(self):
        """Gets the taxes of this OrderBreakdown.  # noqa: E501

        List of taxes to be applied to the order.  # noqa: E501

        :return: The taxes of this OrderBreakdown.  # noqa: E501
        :rtype: list[Tax]
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this OrderBreakdown.

        List of taxes to be applied to the order.  # noqa: E501

        :param taxes: The taxes of this OrderBreakdown.  # noqa: E501
        :type: list[Tax]
        """

        self._taxes = taxes

    @property
    def tip(self):
        """Gets the tip of this OrderBreakdown.  # noqa: E501


        :return: The tip of this OrderBreakdown.  # noqa: E501
        :rtype: Tip
        """
        return self._tip

    @tip.setter
    def tip(self, tip):
        """Sets the tip of this OrderBreakdown.


        :param tip: The tip of this OrderBreakdown.  # noqa: E501
        :type: Tip
        """

        self._tip = tip

    @property
    def surcharge(self):
        """Gets the surcharge of this OrderBreakdown.  # noqa: E501


        :return: The surcharge of this OrderBreakdown.  # noqa: E501
        :rtype: Surcharge
        """
        return self._surcharge

    @surcharge.setter
    def surcharge(self, surcharge):
        """Sets the surcharge of this OrderBreakdown.


        :param surcharge: The surcharge of this OrderBreakdown.  # noqa: E501
        :type: Surcharge
        """

        self._surcharge = surcharge
