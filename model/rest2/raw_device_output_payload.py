# coding: utf-8
from model.rest2 import Payload
from model.serializable import SwaggerSerializable


class RawDeviceOutputPayload(SwaggerSerializable):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payload_type': 'str',
        'account_type': 'str',
        'device': 'Device',
        'raw_data': 'str',
        'cardholder_signature': 'str'
    }
    if hasattr(Payload, "swagger_types"):
        swagger_types.update(Payload.swagger_types)

    attribute_map = {
        'payload_type': 'payloadType',
        'account_type': 'accountType',
        'device': 'device',
        'raw_data': 'rawData',
        'cardholder_signature': 'cardholderSignature'
    }
    if hasattr(Payload, "attribute_map"):
        attribute_map.update(Payload.attribute_map)

    def __init__(self, payload_type=None, account_type='CHECKING', device=None, raw_data=None, cardholder_signature=None, *args, **kwargs):  # noqa: E501
        """RawDeviceOutputPayload - a model defined in Swagger"""  # noqa: E501
        self._payload_type = None
        self._account_type = None
        self._device = None
        self._raw_data = None
        self._cardholder_signature = None
        self.discriminator = None
        self.payload_type = payload_type
        if account_type is not None:
            self.account_type = account_type
        self.device = device
        self.raw_data = raw_data
        if cardholder_signature is not None:
            self.cardholder_signature = cardholder_signature
        Payload.__init__(self, *args, **kwargs)

    @property
    def payload_type(self):
        """Gets the payload_type of this RawDeviceOutputPayload.  # noqa: E501


        :return: The payload_type of this RawDeviceOutputPayload.  # noqa: E501
        :rtype: str
        """
        return self._payload_type

    @payload_type.setter
    def payload_type(self, payload_type):
        """Sets the payload_type of this RawDeviceOutputPayload.


        :param payload_type: The payload_type of this RawDeviceOutputPayload.  # noqa: E501
        :type: str
        """
        if payload_type is None:
            raise ValueError("Invalid value for `payload_type`, must not be `None`")  # noqa: E501

        self._payload_type = payload_type

    @property
    def account_type(self):
        """Gets the account_type of this RawDeviceOutputPayload.  # noqa: E501


        :return: The account_type of this RawDeviceOutputPayload.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this RawDeviceOutputPayload.


        :param account_type: The account_type of this RawDeviceOutputPayload.  # noqa: E501
        :type: str
        """
        allowed_values = ["CHECKING", "SAVINGS"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"  # noqa: E501
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def device(self):
        """Gets the device of this RawDeviceOutputPayload.  # noqa: E501


        :return: The device of this RawDeviceOutputPayload.  # noqa: E501
        :rtype: Device
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this RawDeviceOutputPayload.


        :param device: The device of this RawDeviceOutputPayload.  # noqa: E501
        :type: Device
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")  # noqa: E501

        self._device = device

    @property
    def raw_data(self):
        """Gets the raw_data of this RawDeviceOutputPayload.  # noqa: E501

        The raw POS device's output data.  # noqa: E501

        :return: The raw_data of this RawDeviceOutputPayload.  # noqa: E501
        :rtype: str
        """
        return self._raw_data

    @raw_data.setter
    def raw_data(self, raw_data):
        """Sets the raw_data of this RawDeviceOutputPayload.

        The raw POS device's output data.  # noqa: E501

        :param raw_data: The raw_data of this RawDeviceOutputPayload.  # noqa: E501
        :type: str
        """
        if raw_data is None:
            raise ValueError("Invalid value for `raw_data`, must not be `None`")  # noqa: E501

        self._raw_data = raw_data

    @property
    def cardholder_signature(self):
        """Gets the cardholder_signature of this RawDeviceOutputPayload.  # noqa: E501

        Cardholder's signature in the format described in the [Special Fields and Parameters](https://docs.worldnettps.com/doku.php?id=developer:api_specification:special_fields_and_parameters#the_signature_field_format) section.  # noqa: E501

        :return: The cardholder_signature of this RawDeviceOutputPayload.  # noqa: E501
        :rtype: str
        """
        return self._cardholder_signature

    @cardholder_signature.setter
    def cardholder_signature(self, cardholder_signature):
        """Sets the cardholder_signature of this RawDeviceOutputPayload.

        Cardholder's signature in the format described in the [Special Fields and Parameters](https://docs.worldnettps.com/doku.php?id=developer:api_specification:special_fields_and_parameters#the_signature_field_format) section.  # noqa: E501

        :param cardholder_signature: The cardholder_signature of this RawDeviceOutputPayload.  # noqa: E501
        :type: str
        """

        self._cardholder_signature = cardholder_signature
