# coding: utf-8
from model.rest2 import MagStripeDataFormat
from model.serializable import SwaggerSerializable


class EncryptedMagStripeDataFormat(SwaggerSerializable):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_format': 'str',
        'device': 'EncryptionCapableDevice',
        'encrypted_data': 'str',
        'first_digit_of_pan': 'str',
        'fallback': 'bool',
        'fallback_reason': 'str',
        'additional_tlv_data': 'str'
    }
    if hasattr(MagStripeDataFormat, "swagger_types"):
        swagger_types.update(MagStripeDataFormat.swagger_types)

    attribute_map = {
        'data_format': 'dataFormat',
        'device': 'device',
        'encrypted_data': 'encryptedData',
        'first_digit_of_pan': 'firstDigitOfPan',
        'fallback': 'fallback',
        'fallback_reason': 'fallbackReason',
        'additional_tlv_data': 'additionalTlvData'
    }
    if hasattr(MagStripeDataFormat, "attribute_map"):
        attribute_map.update(MagStripeDataFormat.attribute_map)

    def __init__(self, data_format='ENCRYPTED', device=None, encrypted_data=None, first_digit_of_pan=None, fallback=None, fallback_reason=None, additional_tlv_data=None, *args, **kwargs):  # noqa: E501
        """EncryptedMagStripeDataFormat - a model defined in Swagger"""  # noqa: E501
        self._data_format = None
        self._device = None
        self._encrypted_data = None
        self._first_digit_of_pan = None
        self._fallback = None
        self._fallback_reason = None
        self._additional_tlv_data = None
        self.discriminator = None
        if data_format is not None:
            self.data_format = data_format
        self.device = device
        self.encrypted_data = encrypted_data
        if first_digit_of_pan is not None:
            self.first_digit_of_pan = first_digit_of_pan
        if fallback is not None:
            self.fallback = fallback
        if fallback_reason is not None:
            self.fallback_reason = fallback_reason
        if additional_tlv_data is not None:
            self.additional_tlv_data = additional_tlv_data
        MagStripeDataFormat.__init__(self, *args, **kwargs)

    @property
    def data_format(self):
        """Gets the data_format of this EncryptedMagStripeDataFormat.  # noqa: E501


        :return: The data_format of this EncryptedMagStripeDataFormat.  # noqa: E501
        :rtype: str
        """
        return self._data_format

    @data_format.setter
    def data_format(self, data_format):
        """Sets the data_format of this EncryptedMagStripeDataFormat.


        :param data_format: The data_format of this EncryptedMagStripeDataFormat.  # noqa: E501
        :type: str
        """

        self._data_format = data_format

    @property
    def device(self):
        """Gets the device of this EncryptedMagStripeDataFormat.  # noqa: E501


        :return: The device of this EncryptedMagStripeDataFormat.  # noqa: E501
        :rtype: EncryptionCapableDevice
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this EncryptedMagStripeDataFormat.


        :param device: The device of this EncryptedMagStripeDataFormat.  # noqa: E501
        :type: EncryptionCapableDevice
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")  # noqa: E501

        self._device = device

    @property
    def encrypted_data(self):
        """Gets the encrypted_data of this EncryptedMagStripeDataFormat.  # noqa: E501

        The encrypted data captured by the magnetic stripe reader.  # noqa: E501

        :return: The encrypted_data of this EncryptedMagStripeDataFormat.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_data

    @encrypted_data.setter
    def encrypted_data(self, encrypted_data):
        """Sets the encrypted_data of this EncryptedMagStripeDataFormat.

        The encrypted data captured by the magnetic stripe reader.  # noqa: E501

        :param encrypted_data: The encrypted_data of this EncryptedMagStripeDataFormat.  # noqa: E501
        :type: str
        """
        if encrypted_data is None:
            raise ValueError("Invalid value for `encrypted_data`, must not be `None`")  # noqa: E501

        self._encrypted_data = encrypted_data

    @property
    def first_digit_of_pan(self):
        """Gets the first_digit_of_pan of this EncryptedMagStripeDataFormat.  # noqa: E501

        The first digit of the primary account number (PAN) / card number.  # noqa: E501

        :return: The first_digit_of_pan of this EncryptedMagStripeDataFormat.  # noqa: E501
        :rtype: str
        """
        return self._first_digit_of_pan

    @first_digit_of_pan.setter
    def first_digit_of_pan(self, first_digit_of_pan):
        """Sets the first_digit_of_pan of this EncryptedMagStripeDataFormat.

        The first digit of the primary account number (PAN) / card number.  # noqa: E501

        :param first_digit_of_pan: The first_digit_of_pan of this EncryptedMagStripeDataFormat.  # noqa: E501
        :type: str
        """

        self._first_digit_of_pan = first_digit_of_pan

    @property
    def fallback(self):
        """Gets the fallback of this EncryptedMagStripeDataFormat.  # noqa: E501

        Indicates that the chip of the card could not be read due to a technical issue which resulted in the technology “falling back” to a magnetic stripe transaction.  # noqa: E501

        :return: The fallback of this EncryptedMagStripeDataFormat.  # noqa: E501
        :rtype: bool
        """
        return self._fallback

    @fallback.setter
    def fallback(self, fallback):
        """Sets the fallback of this EncryptedMagStripeDataFormat.

        Indicates that the chip of the card could not be read due to a technical issue which resulted in the technology “falling back” to a magnetic stripe transaction.  # noqa: E501

        :param fallback: The fallback of this EncryptedMagStripeDataFormat.  # noqa: E501
        :type: bool
        """

        self._fallback = fallback

    @property
    def fallback_reason(self):
        """Gets the fallback_reason of this EncryptedMagStripeDataFormat.  # noqa: E501

        The reason that caused the fallback.  # noqa: E501

        :return: The fallback_reason of this EncryptedMagStripeDataFormat.  # noqa: E501
        :rtype: str
        """
        return self._fallback_reason

    @fallback_reason.setter
    def fallback_reason(self, fallback_reason):
        """Sets the fallback_reason of this EncryptedMagStripeDataFormat.

        The reason that caused the fallback.  # noqa: E501

        :param fallback_reason: The fallback_reason of this EncryptedMagStripeDataFormat.  # noqa: E501
        :type: str
        """
        allowed_values = ["TECHNICAL", "EMPTY_CANDIDATE_LIST"]  # noqa: E501
        if fallback_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `fallback_reason` ({0}), must be one of {1}"  # noqa: E501
                .format(fallback_reason, allowed_values)
            )

        self._fallback_reason = fallback_reason

    @property
    def additional_tlv_data(self):
        """Gets the additional_tlv_data of this EncryptedMagStripeDataFormat.  # noqa: E501

        Additional TLV (Tag-Length-Value) data which is sometimes required for contactless transactions.  # noqa: E501

        :return: The additional_tlv_data of this EncryptedMagStripeDataFormat.  # noqa: E501
        :rtype: str
        """
        return self._additional_tlv_data

    @additional_tlv_data.setter
    def additional_tlv_data(self, additional_tlv_data):
        """Sets the additional_tlv_data of this EncryptedMagStripeDataFormat.

        Additional TLV (Tag-Length-Value) data which is sometimes required for contactless transactions.  # noqa: E501

        :param additional_tlv_data: The additional_tlv_data of this EncryptedMagStripeDataFormat.  # noqa: E501
        :type: str
        """

        self._additional_tlv_data = additional_tlv_data
