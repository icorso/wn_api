# coding: utf-8
from model.rest2 import MagStripeDataFormat
from model.serializable import SwaggerSerializable


class PlainTextMagStripeDataFormat(SwaggerSerializable):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_format': 'str',
        'device': 'Device',
        'track_data': 'str'
    }
    if hasattr(MagStripeDataFormat, "swagger_types"):
        swagger_types.update(MagStripeDataFormat.swagger_types)

    attribute_map = {
        'data_format': 'dataFormat',
        'device': 'device',
        'track_data': 'trackData'
    }
    if hasattr(MagStripeDataFormat, "attribute_map"):
        attribute_map.update(MagStripeDataFormat.attribute_map)

    def __init__(self, data_format='ENCRYPTED', device=None, track_data=None, *args, **kwargs):  # noqa: E501
        """PlainTextMagStripeDataFormat - a model defined in Swagger"""  # noqa: E501
        self._data_format = None
        self._device = None
        self._track_data = None
        self.discriminator = None
        if data_format is not None:
            self.data_format = data_format
        self.device = device
        self.track_data = track_data
        MagStripeDataFormat.__init__(self, *args, **kwargs)

    @property
    def data_format(self):
        """Gets the data_format of this PlainTextMagStripeDataFormat.  # noqa: E501


        :return: The data_format of this PlainTextMagStripeDataFormat.  # noqa: E501
        :rtype: str
        """
        return self._data_format

    @data_format.setter
    def data_format(self, data_format):
        """Sets the data_format of this PlainTextMagStripeDataFormat.


        :param data_format: The data_format of this PlainTextMagStripeDataFormat.  # noqa: E501
        :type: str
        """

        self._data_format = data_format

    @property
    def device(self):
        """Gets the device of this PlainTextMagStripeDataFormat.  # noqa: E501


        :return: The device of this PlainTextMagStripeDataFormat.  # noqa: E501
        :rtype: Device
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this PlainTextMagStripeDataFormat.


        :param device: The device of this PlainTextMagStripeDataFormat.  # noqa: E501
        :type: Device
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")  # noqa: E501

        self._device = device

    @property
    def track_data(self):
        """Gets the track_data of this PlainTextMagStripeDataFormat.  # noqa: E501

        Clear text Track 2 Data.  # noqa: E501

        :return: The track_data of this PlainTextMagStripeDataFormat.  # noqa: E501
        :rtype: str
        """
        return self._track_data

    @track_data.setter
    def track_data(self, track_data):
        """Sets the track_data of this PlainTextMagStripeDataFormat.

        Clear text Track 2 Data.  # noqa: E501

        :param track_data: The track_data of this PlainTextMagStripeDataFormat.  # noqa: E501
        :type: str
        """
        if track_data is None:
            raise ValueError("Invalid value for `track_data`, must not be `None`")  # noqa: E501

        self._track_data = track_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlainTextMagStripeDataFormat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlainTextMagStripeDataFormat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
