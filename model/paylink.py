#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated  by generateDS.py.
# Python 3.8.5 (default, Jan 27 2021, 15:41:15)  [GCC 9.3.0]
#
# Command line options:
#   ('--user-methods', 'paylink_user_methods')
#   ('--export', 'etree literal')
#   ('--use-getter-setter', 'new')
#   ('--no-dates', '')
#   ('--no-versions', '')
#   ('-f', '')
#   ('-o', 'paylink.py')
#
# Command line arguments:
#   paylink.xsd
#
# Command line:
#   /usr/local/bin/generateDS --user-methods="paylink_user_methods" --export="etree literal" --use-getter-setter="new" --no-dates --no-versions -f -o "paylink.py" paylink.xsd
#
# Current working directory (os.getcwd()):
#   model
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class TERMINALID(GeneratedsSuper):
    member_data_items_ = [
    ]
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TERMINALID)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TERMINALID.subclass:
            return TERMINALID.subclass(*args_, **kwargs_)
        else:
            return TERMINALID(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def to_etree(self, parent_element=None, name_='TERMINALID', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def exportLiteral(self, outfile, level, name_='TERMINALID'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TERMINALID


class MERCHANTREF(GeneratedsSuper):
    member_data_items_ = [
    ]
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MERCHANTREF)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MERCHANTREF.subclass:
            return MERCHANTREF.subclass(*args_, **kwargs_)
        else:
            return MERCHANTREF(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def to_etree(self, parent_element=None, name_='MERCHANTREF', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def exportLiteral(self, outfile, level, name_='MERCHANTREF'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class MERCHANTREF


class ORDERID(GeneratedsSuper):
    member_data_items_ = [
    ]
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ORDERID)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ORDERID.subclass:
            return ORDERID.subclass(*args_, **kwargs_)
        else:
            return ORDERID(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def to_etree(self, parent_element=None, name_='ORDERID', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def exportLiteral(self, outfile, level, name_='ORDERID'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ORDERID


class DESCRIPTION(GeneratedsSuper):
    member_data_items_ = [
    ]
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DESCRIPTION)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DESCRIPTION.subclass:
            return DESCRIPTION.subclass(*args_, **kwargs_)
        else:
            return DESCRIPTION(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def to_etree(self, parent_element=None, name_='DESCRIPTION', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def exportLiteral(self, outfile, level, name_='DESCRIPTION'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class DESCRIPTION


class CURRENCY(GeneratedsSuper):
    member_data_items_ = [
    ]
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CURRENCY)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CURRENCY.subclass:
            return CURRENCY.subclass(*args_, **kwargs_)
        else:
            return CURRENCY(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def to_etree(self, parent_element=None, name_='CURRENCY', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def exportLiteral(self, outfile, level, name_='CURRENCY'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CURRENCY


class HASH(GeneratedsSuper):
    member_data_items_ = [
    ]
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HASH)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HASH.subclass:
            return HASH.subclass(*args_, **kwargs_)
        else:
            return HASH(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def to_etree(self, parent_element=None, name_='HASH', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def exportLiteral(self, outfile, level, name_='HASH'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class HASH


class DATETIME(GeneratedsSuper):
    member_data_items_ = [
    ]
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DATETIME)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DATETIME.subclass:
            return DATETIME.subclass(*args_, **kwargs_)
        else:
            return DATETIME(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def to_etree(self, parent_element=None, name_='DATETIME', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def exportLiteral(self, outfile, level, name_='DATETIME'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class DATETIME


class AUTH_TYPE(GeneratedsSuper):
    member_data_items_ = [
    ]
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AUTH_TYPE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AUTH_TYPE.subclass:
            return AUTH_TYPE.subclass(*args_, **kwargs_)
        else:
            return AUTH_TYPE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def to_etree(self, parent_element=None, name_='AUTH_TYPE', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def exportLiteral(self, outfile, level, name_='AUTH_TYPE'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AUTH_TYPE


class STATUS(GeneratedsSuper):
    member_data_items_ = [
    ]
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, STATUS)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if STATUS.subclass:
            return STATUS.subclass(*args_, **kwargs_)
        else:
            return STATUS(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def to_etree(self, parent_element=None, name_='STATUS', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def exportLiteral(self, outfile, level, name_='STATUS'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class STATUS


class EXPIRATION_DATE(GeneratedsSuper):
    member_data_items_ = [
    ]
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EXPIRATION_DATE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EXPIRATION_DATE.subclass:
            return EXPIRATION_DATE.subclass(*args_, **kwargs_)
        else:
            return EXPIRATION_DATE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def to_etree(self, parent_element=None, name_='EXPIRATION_DATE', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def exportLiteral(self, outfile, level, name_='EXPIRATION_DATE'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class EXPIRATION_DATE


class CREATION_DATE(GeneratedsSuper):
    member_data_items_ = [
    ]
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CREATION_DATE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CREATION_DATE.subclass:
            return CREATION_DATE.subclass(*args_, **kwargs_)
        else:
            return CREATION_DATE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def to_etree(self, parent_element=None, name_='CREATION_DATE', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def exportLiteral(self, outfile, level, name_='CREATION_DATE'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CREATION_DATE


class TOTAL_AMOUNT(GeneratedsSuper):
    member_data_items_ = [
    ]
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TOTAL_AMOUNT)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TOTAL_AMOUNT.subclass:
            return TOTAL_AMOUNT.subclass(*args_, **kwargs_)
        else:
            return TOTAL_AMOUNT(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def to_etree(self, parent_element=None, name_='TOTAL_AMOUNT', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def exportLiteral(self, outfile, level, name_='TOTAL_AMOUNT'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TOTAL_AMOUNT


class EMAIL(GeneratedsSuper):
    member_data_items_ = [
    ]
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EMAIL)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EMAIL.subclass:
            return EMAIL.subclass(*args_, **kwargs_)
        else:
            return EMAIL(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def to_etree(self, parent_element=None, name_='EMAIL', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def exportLiteral(self, outfile, level, name_='EMAIL'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class EMAIL


class PHONE(GeneratedsSuper):
    member_data_items_ = [
    ]
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PHONE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PHONE.subclass:
            return PHONE.subclass(*args_, **kwargs_)
        else:
            return PHONE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def to_etree(self, parent_element=None, name_='PHONE', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def exportLiteral(self, outfile, level, name_='PHONE'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PHONE


class CUSTOMER_MERCHANTREF(GeneratedsSuper):
    member_data_items_ = [
    ]
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUSTOMER_MERCHANTREF)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUSTOMER_MERCHANTREF.subclass:
            return CUSTOMER_MERCHANTREF.subclass(*args_, **kwargs_)
        else:
            return CUSTOMER_MERCHANTREF(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def to_etree(self, parent_element=None, name_='CUSTOMER_MERCHANTREF', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def exportLiteral(self, outfile, level, name_='CUSTOMER_MERCHANTREF'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CUSTOMER_MERCHANTREF


class CUSTOMER(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('CUSTOMER_MERCHANTREF', ['CUSTOMER_MERCHANTREF', 'xs:string'], 0, 0, {'ref': 'CUSTOMER_MERCHANTREF', 'name': 'CUSTOMER_MERCHANTREF', 'type': 'xs:string'}, None),
        MemberSpec_('NAME', ['NAMEType', 'xs:string'], 0, 0, {'name': 'NAME', 'type': 'xs:string'}, None),
        MemberSpec_('EMAIL', ['EMAIL', 'xs:string'], 0, 0, {'ref': 'EMAIL', 'name': 'EMAIL', 'type': 'xs:string'}, None),
        MemberSpec_('PHONE', ['PHONE', 'xs:string'], 0, 1, {'ref': 'PHONE', 'minOccurs': '0', 'name': 'PHONE', 'type': 'xs:string'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, CUSTOMER_MERCHANTREF=None, NAME=None, EMAIL=None, PHONE=None):
        self.original_tagname_ = None
        self.CUSTOMER_MERCHANTREF = CUSTOMER_MERCHANTREF
        self.validate_CUSTOMER_MERCHANTREF(self.CUSTOMER_MERCHANTREF)
        self.NAME = NAME
        self.validate_NAMEType(self.NAME)
        self.EMAIL = EMAIL
        self.validate_EMAIL(self.EMAIL)
        self.PHONE = PHONE
        self.validate_PHONE(self.PHONE)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUSTOMER)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUSTOMER.subclass:
            return CUSTOMER.subclass(*args_, **kwargs_)
        else:
            return CUSTOMER(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CUSTOMER_MERCHANTREF(self): return self.CUSTOMER_MERCHANTREF
    def set_CUSTOMER_MERCHANTREF(self, CUSTOMER_MERCHANTREF): self.CUSTOMER_MERCHANTREF = CUSTOMER_MERCHANTREF
    def get_NAME(self): return self.NAME
    def set_NAME(self, NAME): self.NAME = NAME
    def get_EMAIL(self): return self.EMAIL
    def set_EMAIL(self, EMAIL): self.EMAIL = EMAIL
    def get_PHONE(self): return self.PHONE
    def set_PHONE(self, PHONE): self.PHONE = PHONE
    def validate_CUSTOMER_MERCHANTREF(self, value):
        # Validate type CUSTOMER_MERCHANTREF, a restriction on xs:string.
        pass
    def validate_NAMEType(self, value):
        # Validate type NAMEType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 255:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on NAMEType' % {"value" : value.encode("utf-8")} )
            if len(value) < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on NAMEType' % {"value" : value.encode("utf-8")} )
    def validate_EMAIL(self, value):
        # Validate type EMAIL, a restriction on xs:string.
        pass
    def validate_PHONE(self, value):
        # Validate type PHONE, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (
            self.CUSTOMER_MERCHANTREF is not None or
            self.NAME is not None or
            self.EMAIL is not None or
            self.PHONE is not None
        ):
            return True
        else:
            return False
    def to_etree(self, parent_element=None, name_='CUSTOMER', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.CUSTOMER_MERCHANTREF is not None:
            CUSTOMER_MERCHANTREF_ = self.CUSTOMER_MERCHANTREF
            etree_.SubElement(element, '{}CUSTOMER_MERCHANTREF').text = self.gds_format_string(CUSTOMER_MERCHANTREF_)
        if self.NAME is not None:
            NAME_ = self.NAME
            etree_.SubElement(element, '{}NAME').text = self.gds_format_string(NAME_)
        if self.EMAIL is not None:
            EMAIL_ = self.EMAIL
            etree_.SubElement(element, '{}EMAIL').text = self.gds_format_string(EMAIL_)
        if self.PHONE is not None:
            PHONE_ = self.PHONE
            etree_.SubElement(element, '{}PHONE').text = self.gds_format_string(PHONE_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def exportLiteral(self, outfile, level, name_='CUSTOMER'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CUSTOMER_MERCHANTREF is not None:
            showIndent(outfile, level)
            outfile.write('CUSTOMER_MERCHANTREF=%s,\n' % self.gds_encode(quote_python(self.CUSTOMER_MERCHANTREF)))
        if self.NAME is not None:
            showIndent(outfile, level)
            outfile.write('NAME=%s,\n' % self.gds_encode(quote_python(self.NAME)))
        if self.EMAIL is not None:
            showIndent(outfile, level)
            outfile.write('EMAIL=%s,\n' % self.gds_encode(quote_python(self.EMAIL)))
        if self.PHONE is not None:
            showIndent(outfile, level)
            outfile.write('PHONE=%s,\n' % self.gds_encode(quote_python(self.PHONE)))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CUSTOMER_MERCHANTREF':
            CUSTOMER_MERCHANTREF_ = child_.text
            CUSTOMER_MERCHANTREF_ = self.gds_validate_string(CUSTOMER_MERCHANTREF_, node, 'CUSTOMER_MERCHANTREF')
            self.CUSTOMER_MERCHANTREF = CUSTOMER_MERCHANTREF_
            # validate type CUSTOMER_MERCHANTREF
            self.validate_CUSTOMER_MERCHANTREF(self.CUSTOMER_MERCHANTREF)
        elif nodeName_ == 'NAME':
            NAME_ = child_.text
            NAME_ = self.gds_validate_string(NAME_, node, 'NAME')
            self.NAME = NAME_
            # validate type NAMEType
            self.validate_NAMEType(self.NAME)
        elif nodeName_ == 'EMAIL':
            EMAIL_ = child_.text
            EMAIL_ = self.gds_validate_string(EMAIL_, node, 'EMAIL')
            self.EMAIL = EMAIL_
            # validate type EMAIL
            self.validate_EMAIL(self.EMAIL)
        elif nodeName_ == 'PHONE':
            PHONE_ = child_.text
            PHONE_ = self.gds_validate_string(PHONE_, node, 'PHONE')
            self.PHONE = PHONE_
            # validate type PHONE
            self.validate_PHONE(self.PHONE)


    @property
    def hash_string(self):
        hash_list = [self.CUSTOMER_MERCHANTREF, self.NAME, self.EMAIL, self.PHONE]
        return ':'.join(hash_list)
# end class CUSTOMER


class ADDITIONAL_MESSAGE(GeneratedsSuper):
    member_data_items_ = [
    ]
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ADDITIONAL_MESSAGE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ADDITIONAL_MESSAGE.subclass:
            return ADDITIONAL_MESSAGE.subclass(*args_, **kwargs_)
        else:
            return ADDITIONAL_MESSAGE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def to_etree(self, parent_element=None, name_='ADDITIONAL_MESSAGE', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def exportLiteral(self, outfile, level, name_='ADDITIONAL_MESSAGE'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ADDITIONAL_MESSAGE


class CREATE(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('TERMINALID', ['TERMINALID', 'xs:string'], 0, 0, {'ref': 'TERMINALID', 'name': 'TERMINALID', 'type': 'xs:string'}, None),
        MemberSpec_('MERCHANTREF', ['MERCHANTREF', 'xs:string'], 0, 0, {'ref': 'MERCHANTREF', 'name': 'MERCHANTREF', 'type': 'xs:string'}, None),
        MemberSpec_('ORDERID', ['ORDERID', 'xs:string'], 0, 1, {'ref': 'ORDERID', 'minOccurs': '0', 'name': 'ORDERID', 'type': 'xs:string'}, None),
        MemberSpec_('EXPIRATION_DATE', ['EXPIRATION_DATE', 'xs:string'], 0, 1, {'ref': 'EXPIRATION_DATE', 'minOccurs': '0', 'name': 'EXPIRATION_DATE', 'type': 'xs:string'}, None),
        MemberSpec_('AUTH_TYPE', ['AUTH_TYPE', 'xs:string'], 0, 1, {'ref': 'AUTH_TYPE', 'minOccurs': '0', 'name': 'AUTH_TYPE', 'type': 'xs:string'}, None),
        MemberSpec_('DESCRIPTION', ['DESCRIPTION', 'xs:string'], 0, 1, {'ref': 'DESCRIPTION', 'minOccurs': '0', 'name': 'DESCRIPTION', 'type': 'xs:string'}, None),
        MemberSpec_('CURRENCY', ['CURRENCY', 'xs:string'], 0, 0, {'ref': 'CURRENCY', 'name': 'CURRENCY', 'type': 'xs:string'}, None),
        MemberSpec_('TOTAL_AMOUNT', ['TOTAL_AMOUNT', 'xs:decimal'], 0, 0, {'ref': 'TOTAL_AMOUNT', 'name': 'TOTAL_AMOUNT', 'type': 'xs:decimal'}, None),
        MemberSpec_('DATETIME', ['DATETIME', 'xs:string'], 0, 0, {'ref': 'DATETIME', 'name': 'DATETIME', 'type': 'xs:string'}, None),
        MemberSpec_('HASH', ['HASH', 'xs:string'], 0, 0, {'ref': 'HASH', 'name': 'HASH', 'type': 'xs:string'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, TERMINALID=None, MERCHANTREF=None, ORDERID=None, EXPIRATION_DATE=None, AUTH_TYPE=None, DESCRIPTION=None, CURRENCY=None, TOTAL_AMOUNT=None, DATETIME=None, HASH=None):
        self.original_tagname_ = None
        self.TERMINALID = TERMINALID
        self.validate_TERMINALID(self.TERMINALID)
        self.MERCHANTREF = MERCHANTREF
        self.validate_MERCHANTREF(self.MERCHANTREF)
        self.ORDERID = ORDERID
        self.validate_ORDERID(self.ORDERID)
        self.EXPIRATION_DATE = EXPIRATION_DATE
        self.validate_EXPIRATION_DATE(self.EXPIRATION_DATE)
        self.AUTH_TYPE = AUTH_TYPE
        self.validate_AUTH_TYPE(self.AUTH_TYPE)
        self.DESCRIPTION = DESCRIPTION
        self.validate_DESCRIPTION(self.DESCRIPTION)
        self.CURRENCY = CURRENCY
        self.validate_CURRENCY(self.CURRENCY)
        self.TOTAL_AMOUNT = TOTAL_AMOUNT
        self.validate_TOTAL_AMOUNT(self.TOTAL_AMOUNT)
        self.DATETIME = DATETIME
        self.validate_DATETIME(self.DATETIME)
        self.HASH = HASH
        self.validate_HASH(self.HASH)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CREATE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CREATE.subclass:
            return CREATE.subclass(*args_, **kwargs_)
        else:
            return CREATE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TERMINALID(self): return self.TERMINALID
    def set_TERMINALID(self, TERMINALID): self.TERMINALID = TERMINALID
    def get_MERCHANTREF(self): return self.MERCHANTREF
    def set_MERCHANTREF(self, MERCHANTREF): self.MERCHANTREF = MERCHANTREF
    def get_ORDERID(self): return self.ORDERID
    def set_ORDERID(self, ORDERID): self.ORDERID = ORDERID
    def get_EXPIRATION_DATE(self): return self.EXPIRATION_DATE
    def set_EXPIRATION_DATE(self, EXPIRATION_DATE): self.EXPIRATION_DATE = EXPIRATION_DATE
    def get_AUTH_TYPE(self): return self.AUTH_TYPE
    def set_AUTH_TYPE(self, AUTH_TYPE): self.AUTH_TYPE = AUTH_TYPE
    def get_DESCRIPTION(self): return self.DESCRIPTION
    def set_DESCRIPTION(self, DESCRIPTION): self.DESCRIPTION = DESCRIPTION
    def get_CURRENCY(self): return self.CURRENCY
    def set_CURRENCY(self, CURRENCY): self.CURRENCY = CURRENCY
    def get_TOTAL_AMOUNT(self): return self.TOTAL_AMOUNT
    def set_TOTAL_AMOUNT(self, TOTAL_AMOUNT): self.TOTAL_AMOUNT = TOTAL_AMOUNT
    def get_DATETIME(self): return self.DATETIME
    def set_DATETIME(self, DATETIME): self.DATETIME = DATETIME
    def get_HASH(self): return self.HASH
    def set_HASH(self, HASH): self.HASH = HASH
    def validate_TERMINALID(self, value):
        # Validate type TERMINALID, a restriction on xs:string.
        pass
    def validate_MERCHANTREF(self, value):
        # Validate type MERCHANTREF, a restriction on xs:string.
        pass
    def validate_ORDERID(self, value):
        # Validate type ORDERID, a restriction on xs:string.
        pass
    def validate_EXPIRATION_DATE(self, value):
        # Validate type EXPIRATION_DATE, a restriction on xs:string.
        pass
    def validate_AUTH_TYPE(self, value):
        # Validate type AUTH_TYPE, a restriction on xs:string.
        pass
    def validate_DESCRIPTION(self, value):
        # Validate type DESCRIPTION, a restriction on xs:string.
        pass
    def validate_CURRENCY(self, value):
        # Validate type CURRENCY, a restriction on xs:string.
        pass
    def validate_TOTAL_AMOUNT(self, value):
        # Validate type TOTAL_AMOUNT, a restriction on xs:decimal.
        pass
    def validate_DATETIME(self, value):
        # Validate type DATETIME, a restriction on xs:string.
        pass
    def validate_HASH(self, value):
        # Validate type HASH, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (
            self.TERMINALID is not None or
            self.MERCHANTREF is not None or
            self.ORDERID is not None or
            self.EXPIRATION_DATE is not None or
            self.AUTH_TYPE is not None or
            self.DESCRIPTION is not None or
            self.CURRENCY is not None or
            self.TOTAL_AMOUNT is not None or
            self.DATETIME is not None or
            self.HASH is not None
        ):
            return True
        else:
            return False
    def to_etree(self, parent_element=None, name_='CREATE', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.TERMINALID is not None:
            TERMINALID_ = self.TERMINALID
            etree_.SubElement(element, '{}TERMINALID').text = self.gds_format_string(TERMINALID_)
        if self.MERCHANTREF is not None:
            MERCHANTREF_ = self.MERCHANTREF
            etree_.SubElement(element, '{}MERCHANTREF').text = self.gds_format_string(MERCHANTREF_)
        if self.ORDERID is not None:
            ORDERID_ = self.ORDERID
            etree_.SubElement(element, '{}ORDERID').text = self.gds_format_string(ORDERID_)
        if self.EXPIRATION_DATE is not None:
            EXPIRATION_DATE_ = self.EXPIRATION_DATE
            etree_.SubElement(element, '{}EXPIRATION_DATE').text = self.gds_format_string(EXPIRATION_DATE_)
        if self.AUTH_TYPE is not None:
            AUTH_TYPE_ = self.AUTH_TYPE
            etree_.SubElement(element, '{}AUTH_TYPE').text = self.gds_format_string(AUTH_TYPE_)
        if self.DESCRIPTION is not None:
            DESCRIPTION_ = self.DESCRIPTION
            etree_.SubElement(element, '{}DESCRIPTION').text = self.gds_format_string(DESCRIPTION_)
        if self.CURRENCY is not None:
            CURRENCY_ = self.CURRENCY
            etree_.SubElement(element, '{}CURRENCY').text = self.gds_format_string(CURRENCY_)
        if self.TOTAL_AMOUNT is not None:
            TOTAL_AMOUNT_ = self.TOTAL_AMOUNT
            etree_.SubElement(element, '{}TOTAL_AMOUNT').text = self.gds_format_float(TOTAL_AMOUNT_)
        if self.DATETIME is not None:
            DATETIME_ = self.DATETIME
            etree_.SubElement(element, '{}DATETIME').text = self.gds_format_string(DATETIME_)
        if self.HASH is not None:
            HASH_ = self.HASH
            etree_.SubElement(element, '{}HASH').text = self.gds_format_string(HASH_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def exportLiteral(self, outfile, level, name_='CREATE'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.TERMINALID is not None:
            showIndent(outfile, level)
            outfile.write('TERMINALID=%s,\n' % self.gds_encode(quote_python(self.TERMINALID)))
        if self.MERCHANTREF is not None:
            showIndent(outfile, level)
            outfile.write('MERCHANTREF=%s,\n' % self.gds_encode(quote_python(self.MERCHANTREF)))
        if self.ORDERID is not None:
            showIndent(outfile, level)
            outfile.write('ORDERID=%s,\n' % self.gds_encode(quote_python(self.ORDERID)))
        if self.EXPIRATION_DATE is not None:
            showIndent(outfile, level)
            outfile.write('EXPIRATION_DATE=%s,\n' % self.gds_encode(quote_python(self.EXPIRATION_DATE)))
        if self.AUTH_TYPE is not None:
            showIndent(outfile, level)
            outfile.write('AUTH_TYPE=%s,\n' % self.gds_encode(quote_python(self.AUTH_TYPE)))
        if self.DESCRIPTION is not None:
            showIndent(outfile, level)
            outfile.write('DESCRIPTION=%s,\n' % self.gds_encode(quote_python(self.DESCRIPTION)))
        if self.CURRENCY is not None:
            showIndent(outfile, level)
            outfile.write('CURRENCY=%s,\n' % self.gds_encode(quote_python(self.CURRENCY)))
        if self.TOTAL_AMOUNT is not None:
            showIndent(outfile, level)
            outfile.write('TOTAL_AMOUNT=%f,\n' % self.TOTAL_AMOUNT)
        if self.DATETIME is not None:
            showIndent(outfile, level)
            outfile.write('DATETIME=%s,\n' % self.gds_encode(quote_python(self.DATETIME)))
        if self.HASH is not None:
            showIndent(outfile, level)
            outfile.write('HASH=%s,\n' % self.gds_encode(quote_python(self.HASH)))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TERMINALID':
            TERMINALID_ = child_.text
            TERMINALID_ = self.gds_validate_string(TERMINALID_, node, 'TERMINALID')
            self.TERMINALID = TERMINALID_
            # validate type TERMINALID
            self.validate_TERMINALID(self.TERMINALID)
        elif nodeName_ == 'MERCHANTREF':
            MERCHANTREF_ = child_.text
            MERCHANTREF_ = self.gds_validate_string(MERCHANTREF_, node, 'MERCHANTREF')
            self.MERCHANTREF = MERCHANTREF_
            # validate type MERCHANTREF
            self.validate_MERCHANTREF(self.MERCHANTREF)
        elif nodeName_ == 'ORDERID':
            ORDERID_ = child_.text
            ORDERID_ = self.gds_validate_string(ORDERID_, node, 'ORDERID')
            self.ORDERID = ORDERID_
            # validate type ORDERID
            self.validate_ORDERID(self.ORDERID)
        elif nodeName_ == 'EXPIRATION_DATE':
            EXPIRATION_DATE_ = child_.text
            EXPIRATION_DATE_ = self.gds_validate_string(EXPIRATION_DATE_, node, 'EXPIRATION_DATE')
            self.EXPIRATION_DATE = EXPIRATION_DATE_
            # validate type EXPIRATION_DATE
            self.validate_EXPIRATION_DATE(self.EXPIRATION_DATE)
        elif nodeName_ == 'AUTH_TYPE':
            AUTH_TYPE_ = child_.text
            AUTH_TYPE_ = self.gds_validate_string(AUTH_TYPE_, node, 'AUTH_TYPE')
            self.AUTH_TYPE = AUTH_TYPE_
            # validate type AUTH_TYPE
            self.validate_AUTH_TYPE(self.AUTH_TYPE)
        elif nodeName_ == 'DESCRIPTION':
            DESCRIPTION_ = child_.text
            DESCRIPTION_ = self.gds_validate_string(DESCRIPTION_, node, 'DESCRIPTION')
            self.DESCRIPTION = DESCRIPTION_
            # validate type DESCRIPTION
            self.validate_DESCRIPTION(self.DESCRIPTION)
        elif nodeName_ == 'CURRENCY':
            CURRENCY_ = child_.text
            CURRENCY_ = self.gds_validate_string(CURRENCY_, node, 'CURRENCY')
            self.CURRENCY = CURRENCY_
            # validate type CURRENCY
            self.validate_CURRENCY(self.CURRENCY)
        elif nodeName_ == 'TOTAL_AMOUNT' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TOTAL_AMOUNT')
            self.TOTAL_AMOUNT = fval_
            # validate type TOTAL_AMOUNT
            self.validate_TOTAL_AMOUNT(self.TOTAL_AMOUNT)
        elif nodeName_ == 'DATETIME':
            DATETIME_ = child_.text
            DATETIME_ = self.gds_validate_string(DATETIME_, node, 'DATETIME')
            self.DATETIME = DATETIME_
            # validate type DATETIME
            self.validate_DATETIME(self.DATETIME)
        elif nodeName_ == 'HASH':
            HASH_ = child_.text
            HASH_ = self.gds_validate_string(HASH_, node, 'HASH')
            self.HASH = HASH_
            # validate type HASH
            self.validate_HASH(self.HASH)


    @property
    def hash_string(self):
        return ':'.join([self.TERMINALID, self.MERCHANTREF, self.ORDERID, self.EXPIRATION_DATE, self.AUTH_TYPE,
                         self.DESCRIPTION, self.CURRENCY, str(self.TOTAL_AMOUNT), self.DATETIME])


    @property
    def hash_string(self):
        hash_list = [self.TERMINALID, self.MERCHANTREF, self.ORDERID, self.EXPIRATION_DATE, self.AUTH_TYPE]
        if self.DESCRIPTION:
            hash_list.append(self.DESCRIPTION)
        hash_list.append(self.DATETIME)
        return ':'.join(hash_list)
# end class CREATE


class CREATE_RESPONSE(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('TERMINALID', ['TERMINALID', 'xs:string'], 0, 0, {'ref': 'TERMINALID', 'name': 'TERMINALID', 'type': 'xs:string'}, None),
        MemberSpec_('MERCHANTREF', ['MERCHANTREF', 'xs:string'], 0, 0, {'ref': 'MERCHANTREF', 'name': 'MERCHANTREF', 'type': 'xs:string'}, None),
        MemberSpec_('ORDERID', ['ORDERID', 'xs:string'], 0, 0, {'ref': 'ORDERID', 'name': 'ORDERID', 'type': 'xs:string'}, None),
        MemberSpec_('EXPIRATION_DATE', ['EXPIRATION_DATE', 'xs:string'], 0, 1, {'ref': 'EXPIRATION_DATE', 'minOccurs': '0', 'name': 'EXPIRATION_DATE', 'type': 'xs:string'}, None),
        MemberSpec_('AUTH_TYPE', ['AUTH_TYPE', 'xs:string'], 0, 0, {'ref': 'AUTH_TYPE', 'name': 'AUTH_TYPE', 'type': 'xs:string'}, None),
        MemberSpec_('DESCRIPTION', ['DESCRIPTION', 'xs:string'], 0, 1, {'ref': 'DESCRIPTION', 'minOccurs': '0', 'name': 'DESCRIPTION', 'type': 'xs:string'}, None),
        MemberSpec_('CURRENCY', ['CURRENCY', 'xs:string'], 0, 0, {'ref': 'CURRENCY', 'name': 'CURRENCY', 'type': 'xs:string'}, None),
        MemberSpec_('TOTAL_AMOUNT', ['TOTAL_AMOUNT', 'xs:decimal'], 0, 0, {'ref': 'TOTAL_AMOUNT', 'name': 'TOTAL_AMOUNT', 'type': 'xs:decimal'}, None),
        MemberSpec_('CREATION_DATE', ['CREATION_DATE', 'xs:string'], 0, 0, {'ref': 'CREATION_DATE', 'name': 'CREATION_DATE', 'type': 'xs:string'}, None),
        MemberSpec_('URL', 'xs:string', 0, 0, {'name': 'URL', 'type': 'xs:string'}, None),
        MemberSpec_('STATUS', ['STATUS', 'xs:string'], 0, 0, {'ref': 'STATUS', 'name': 'STATUS', 'type': 'xs:string'}, None),
        MemberSpec_('DATETIME', ['DATETIME', 'xs:string'], 0, 0, {'ref': 'DATETIME', 'name': 'DATETIME', 'type': 'xs:string'}, None),
        MemberSpec_('HASH', ['HASH', 'xs:string'], 0, 0, {'ref': 'HASH', 'name': 'HASH', 'type': 'xs:string'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, TERMINALID=None, MERCHANTREF=None, ORDERID=None, EXPIRATION_DATE=None, AUTH_TYPE=None, DESCRIPTION=None, CURRENCY=None, TOTAL_AMOUNT=None, CREATION_DATE=None, URL=None, STATUS=None, DATETIME=None, HASH=None):
        self.original_tagname_ = None
        self.TERMINALID = TERMINALID
        self.validate_TERMINALID(self.TERMINALID)
        self.MERCHANTREF = MERCHANTREF
        self.validate_MERCHANTREF(self.MERCHANTREF)
        self.ORDERID = ORDERID
        self.validate_ORDERID(self.ORDERID)
        self.EXPIRATION_DATE = EXPIRATION_DATE
        self.validate_EXPIRATION_DATE(self.EXPIRATION_DATE)
        self.AUTH_TYPE = AUTH_TYPE
        self.validate_AUTH_TYPE(self.AUTH_TYPE)
        self.DESCRIPTION = DESCRIPTION
        self.validate_DESCRIPTION(self.DESCRIPTION)
        self.CURRENCY = CURRENCY
        self.validate_CURRENCY(self.CURRENCY)
        self.TOTAL_AMOUNT = TOTAL_AMOUNT
        self.validate_TOTAL_AMOUNT(self.TOTAL_AMOUNT)
        self.CREATION_DATE = CREATION_DATE
        self.validate_CREATION_DATE(self.CREATION_DATE)
        self.URL = URL
        self.STATUS = STATUS
        self.validate_STATUS(self.STATUS)
        self.DATETIME = DATETIME
        self.validate_DATETIME(self.DATETIME)
        self.HASH = HASH
        self.validate_HASH(self.HASH)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CREATE_RESPONSE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CREATE_RESPONSE.subclass:
            return CREATE_RESPONSE.subclass(*args_, **kwargs_)
        else:
            return CREATE_RESPONSE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TERMINALID(self): return self.TERMINALID
    def set_TERMINALID(self, TERMINALID): self.TERMINALID = TERMINALID
    def get_MERCHANTREF(self): return self.MERCHANTREF
    def set_MERCHANTREF(self, MERCHANTREF): self.MERCHANTREF = MERCHANTREF
    def get_ORDERID(self): return self.ORDERID
    def set_ORDERID(self, ORDERID): self.ORDERID = ORDERID
    def get_EXPIRATION_DATE(self): return self.EXPIRATION_DATE
    def set_EXPIRATION_DATE(self, EXPIRATION_DATE): self.EXPIRATION_DATE = EXPIRATION_DATE
    def get_AUTH_TYPE(self): return self.AUTH_TYPE
    def set_AUTH_TYPE(self, AUTH_TYPE): self.AUTH_TYPE = AUTH_TYPE
    def get_DESCRIPTION(self): return self.DESCRIPTION
    def set_DESCRIPTION(self, DESCRIPTION): self.DESCRIPTION = DESCRIPTION
    def get_CURRENCY(self): return self.CURRENCY
    def set_CURRENCY(self, CURRENCY): self.CURRENCY = CURRENCY
    def get_TOTAL_AMOUNT(self): return self.TOTAL_AMOUNT
    def set_TOTAL_AMOUNT(self, TOTAL_AMOUNT): self.TOTAL_AMOUNT = TOTAL_AMOUNT
    def get_CREATION_DATE(self): return self.CREATION_DATE
    def set_CREATION_DATE(self, CREATION_DATE): self.CREATION_DATE = CREATION_DATE
    def get_URL(self): return self.URL
    def set_URL(self, URL): self.URL = URL
    def get_STATUS(self): return self.STATUS
    def set_STATUS(self, STATUS): self.STATUS = STATUS
    def get_DATETIME(self): return self.DATETIME
    def set_DATETIME(self, DATETIME): self.DATETIME = DATETIME
    def get_HASH(self): return self.HASH
    def set_HASH(self, HASH): self.HASH = HASH
    def validate_TERMINALID(self, value):
        # Validate type TERMINALID, a restriction on xs:string.
        pass
    def validate_MERCHANTREF(self, value):
        # Validate type MERCHANTREF, a restriction on xs:string.
        pass
    def validate_ORDERID(self, value):
        # Validate type ORDERID, a restriction on xs:string.
        pass
    def validate_EXPIRATION_DATE(self, value):
        # Validate type EXPIRATION_DATE, a restriction on xs:string.
        pass
    def validate_AUTH_TYPE(self, value):
        # Validate type AUTH_TYPE, a restriction on xs:string.
        pass
    def validate_DESCRIPTION(self, value):
        # Validate type DESCRIPTION, a restriction on xs:string.
        pass
    def validate_CURRENCY(self, value):
        # Validate type CURRENCY, a restriction on xs:string.
        pass
    def validate_TOTAL_AMOUNT(self, value):
        # Validate type TOTAL_AMOUNT, a restriction on xs:decimal.
        pass
    def validate_CREATION_DATE(self, value):
        # Validate type CREATION_DATE, a restriction on xs:string.
        pass
    def validate_STATUS(self, value):
        # Validate type STATUS, a restriction on xs:string.
        pass
    def validate_DATETIME(self, value):
        # Validate type DATETIME, a restriction on xs:string.
        pass
    def validate_HASH(self, value):
        # Validate type HASH, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (
            self.TERMINALID is not None or
            self.MERCHANTREF is not None or
            self.ORDERID is not None or
            self.EXPIRATION_DATE is not None or
            self.AUTH_TYPE is not None or
            self.DESCRIPTION is not None or
            self.CURRENCY is not None or
            self.TOTAL_AMOUNT is not None or
            self.CREATION_DATE is not None or
            self.URL is not None or
            self.STATUS is not None or
            self.DATETIME is not None or
            self.HASH is not None
        ):
            return True
        else:
            return False
    def to_etree(self, parent_element=None, name_='CREATE_RESPONSE', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.TERMINALID is not None:
            TERMINALID_ = self.TERMINALID
            etree_.SubElement(element, '{}TERMINALID').text = self.gds_format_string(TERMINALID_)
        if self.MERCHANTREF is not None:
            MERCHANTREF_ = self.MERCHANTREF
            etree_.SubElement(element, '{}MERCHANTREF').text = self.gds_format_string(MERCHANTREF_)
        if self.ORDERID is not None:
            ORDERID_ = self.ORDERID
            etree_.SubElement(element, '{}ORDERID').text = self.gds_format_string(ORDERID_)
        if self.EXPIRATION_DATE is not None:
            EXPIRATION_DATE_ = self.EXPIRATION_DATE
            etree_.SubElement(element, '{}EXPIRATION_DATE').text = self.gds_format_string(EXPIRATION_DATE_)
        if self.AUTH_TYPE is not None:
            AUTH_TYPE_ = self.AUTH_TYPE
            etree_.SubElement(element, '{}AUTH_TYPE').text = self.gds_format_string(AUTH_TYPE_)
        if self.DESCRIPTION is not None:
            DESCRIPTION_ = self.DESCRIPTION
            etree_.SubElement(element, '{}DESCRIPTION').text = self.gds_format_string(DESCRIPTION_)
        if self.CURRENCY is not None:
            CURRENCY_ = self.CURRENCY
            etree_.SubElement(element, '{}CURRENCY').text = self.gds_format_string(CURRENCY_)
        if self.TOTAL_AMOUNT is not None:
            TOTAL_AMOUNT_ = self.TOTAL_AMOUNT
            etree_.SubElement(element, '{}TOTAL_AMOUNT').text = self.gds_format_float(TOTAL_AMOUNT_)
        if self.CREATION_DATE is not None:
            CREATION_DATE_ = self.CREATION_DATE
            etree_.SubElement(element, '{}CREATION_DATE').text = self.gds_format_string(CREATION_DATE_)
        if self.URL is not None:
            URL_ = self.URL
            etree_.SubElement(element, '{}URL').text = self.gds_format_string(URL_)
        if self.STATUS is not None:
            STATUS_ = self.STATUS
            etree_.SubElement(element, '{}STATUS').text = self.gds_format_string(STATUS_)
        if self.DATETIME is not None:
            DATETIME_ = self.DATETIME
            etree_.SubElement(element, '{}DATETIME').text = self.gds_format_string(DATETIME_)
        if self.HASH is not None:
            HASH_ = self.HASH
            etree_.SubElement(element, '{}HASH').text = self.gds_format_string(HASH_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def exportLiteral(self, outfile, level, name_='CREATE_RESPONSE'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.TERMINALID is not None:
            showIndent(outfile, level)
            outfile.write('TERMINALID=%s,\n' % self.gds_encode(quote_python(self.TERMINALID)))
        if self.MERCHANTREF is not None:
            showIndent(outfile, level)
            outfile.write('MERCHANTREF=%s,\n' % self.gds_encode(quote_python(self.MERCHANTREF)))
        if self.ORDERID is not None:
            showIndent(outfile, level)
            outfile.write('ORDERID=%s,\n' % self.gds_encode(quote_python(self.ORDERID)))
        if self.EXPIRATION_DATE is not None:
            showIndent(outfile, level)
            outfile.write('EXPIRATION_DATE=%s,\n' % self.gds_encode(quote_python(self.EXPIRATION_DATE)))
        if self.AUTH_TYPE is not None:
            showIndent(outfile, level)
            outfile.write('AUTH_TYPE=%s,\n' % self.gds_encode(quote_python(self.AUTH_TYPE)))
        if self.DESCRIPTION is not None:
            showIndent(outfile, level)
            outfile.write('DESCRIPTION=%s,\n' % self.gds_encode(quote_python(self.DESCRIPTION)))
        if self.CURRENCY is not None:
            showIndent(outfile, level)
            outfile.write('CURRENCY=%s,\n' % self.gds_encode(quote_python(self.CURRENCY)))
        if self.TOTAL_AMOUNT is not None:
            showIndent(outfile, level)
            outfile.write('TOTAL_AMOUNT=%f,\n' % self.TOTAL_AMOUNT)
        if self.CREATION_DATE is not None:
            showIndent(outfile, level)
            outfile.write('CREATION_DATE=%s,\n' % self.gds_encode(quote_python(self.CREATION_DATE)))
        if self.URL is not None:
            showIndent(outfile, level)
            outfile.write('URL=%s,\n' % self.gds_encode(quote_python(self.URL)))
        if self.STATUS is not None:
            showIndent(outfile, level)
            outfile.write('STATUS=%s,\n' % self.gds_encode(quote_python(self.STATUS)))
        if self.DATETIME is not None:
            showIndent(outfile, level)
            outfile.write('DATETIME=%s,\n' % self.gds_encode(quote_python(self.DATETIME)))
        if self.HASH is not None:
            showIndent(outfile, level)
            outfile.write('HASH=%s,\n' % self.gds_encode(quote_python(self.HASH)))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TERMINALID':
            TERMINALID_ = child_.text
            TERMINALID_ = self.gds_validate_string(TERMINALID_, node, 'TERMINALID')
            self.TERMINALID = TERMINALID_
            # validate type TERMINALID
            self.validate_TERMINALID(self.TERMINALID)
        elif nodeName_ == 'MERCHANTREF':
            MERCHANTREF_ = child_.text
            MERCHANTREF_ = self.gds_validate_string(MERCHANTREF_, node, 'MERCHANTREF')
            self.MERCHANTREF = MERCHANTREF_
            # validate type MERCHANTREF
            self.validate_MERCHANTREF(self.MERCHANTREF)
        elif nodeName_ == 'ORDERID':
            ORDERID_ = child_.text
            ORDERID_ = self.gds_validate_string(ORDERID_, node, 'ORDERID')
            self.ORDERID = ORDERID_
            # validate type ORDERID
            self.validate_ORDERID(self.ORDERID)
        elif nodeName_ == 'EXPIRATION_DATE':
            EXPIRATION_DATE_ = child_.text
            EXPIRATION_DATE_ = self.gds_validate_string(EXPIRATION_DATE_, node, 'EXPIRATION_DATE')
            self.EXPIRATION_DATE = EXPIRATION_DATE_
            # validate type EXPIRATION_DATE
            self.validate_EXPIRATION_DATE(self.EXPIRATION_DATE)
        elif nodeName_ == 'AUTH_TYPE':
            AUTH_TYPE_ = child_.text
            AUTH_TYPE_ = self.gds_validate_string(AUTH_TYPE_, node, 'AUTH_TYPE')
            self.AUTH_TYPE = AUTH_TYPE_
            # validate type AUTH_TYPE
            self.validate_AUTH_TYPE(self.AUTH_TYPE)
        elif nodeName_ == 'DESCRIPTION':
            DESCRIPTION_ = child_.text
            DESCRIPTION_ = self.gds_validate_string(DESCRIPTION_, node, 'DESCRIPTION')
            self.DESCRIPTION = DESCRIPTION_
            # validate type DESCRIPTION
            self.validate_DESCRIPTION(self.DESCRIPTION)
        elif nodeName_ == 'CURRENCY':
            CURRENCY_ = child_.text
            CURRENCY_ = self.gds_validate_string(CURRENCY_, node, 'CURRENCY')
            self.CURRENCY = CURRENCY_
            # validate type CURRENCY
            self.validate_CURRENCY(self.CURRENCY)
        elif nodeName_ == 'TOTAL_AMOUNT' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TOTAL_AMOUNT')
            self.TOTAL_AMOUNT = fval_
            # validate type TOTAL_AMOUNT
            self.validate_TOTAL_AMOUNT(self.TOTAL_AMOUNT)
        elif nodeName_ == 'CREATION_DATE':
            CREATION_DATE_ = child_.text
            CREATION_DATE_ = self.gds_validate_string(CREATION_DATE_, node, 'CREATION_DATE')
            self.CREATION_DATE = CREATION_DATE_
            # validate type CREATION_DATE
            self.validate_CREATION_DATE(self.CREATION_DATE)
        elif nodeName_ == 'URL':
            URL_ = child_.text
            URL_ = self.gds_validate_string(URL_, node, 'URL')
            self.URL = URL_
        elif nodeName_ == 'STATUS':
            STATUS_ = child_.text
            STATUS_ = self.gds_validate_string(STATUS_, node, 'STATUS')
            self.STATUS = STATUS_
            # validate type STATUS
            self.validate_STATUS(self.STATUS)
        elif nodeName_ == 'DATETIME':
            DATETIME_ = child_.text
            DATETIME_ = self.gds_validate_string(DATETIME_, node, 'DATETIME')
            self.DATETIME = DATETIME_
            # validate type DATETIME
            self.validate_DATETIME(self.DATETIME)
        elif nodeName_ == 'HASH':
            HASH_ = child_.text
            HASH_ = self.gds_validate_string(HASH_, node, 'HASH')
            self.HASH = HASH_
            # validate type HASH
            self.validate_HASH(self.HASH)
# end class CREATE_RESPONSE


class GET(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('TERMINALID', ['TERMINALID', 'xs:string'], 0, 0, {'ref': 'TERMINALID', 'name': 'TERMINALID', 'type': 'xs:string'}, None),
        MemberSpec_('MERCHANTREF', ['MERCHANTREF', 'xs:string'], 0, 0, {'ref': 'MERCHANTREF', 'name': 'MERCHANTREF', 'type': 'xs:string'}, None),
        MemberSpec_('DATETIME', ['DATETIME', 'xs:string'], 0, 0, {'ref': 'DATETIME', 'name': 'DATETIME', 'type': 'xs:string'}, None),
        MemberSpec_('HASH', ['HASH', 'xs:string'], 0, 0, {'ref': 'HASH', 'name': 'HASH', 'type': 'xs:string'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, TERMINALID=None, MERCHANTREF=None, DATETIME=None, HASH=None):
        self.original_tagname_ = None
        self.TERMINALID = TERMINALID
        self.validate_TERMINALID(self.TERMINALID)
        self.MERCHANTREF = MERCHANTREF
        self.validate_MERCHANTREF(self.MERCHANTREF)
        self.DATETIME = DATETIME
        self.validate_DATETIME(self.DATETIME)
        self.HASH = HASH
        self.validate_HASH(self.HASH)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GET)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GET.subclass:
            return GET.subclass(*args_, **kwargs_)
        else:
            return GET(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TERMINALID(self): return self.TERMINALID
    def set_TERMINALID(self, TERMINALID): self.TERMINALID = TERMINALID
    def get_MERCHANTREF(self): return self.MERCHANTREF
    def set_MERCHANTREF(self, MERCHANTREF): self.MERCHANTREF = MERCHANTREF
    def get_DATETIME(self): return self.DATETIME
    def set_DATETIME(self, DATETIME): self.DATETIME = DATETIME
    def get_HASH(self): return self.HASH
    def set_HASH(self, HASH): self.HASH = HASH
    def validate_TERMINALID(self, value):
        # Validate type TERMINALID, a restriction on xs:string.
        pass
    def validate_MERCHANTREF(self, value):
        # Validate type MERCHANTREF, a restriction on xs:string.
        pass
    def validate_DATETIME(self, value):
        # Validate type DATETIME, a restriction on xs:string.
        pass
    def validate_HASH(self, value):
        # Validate type HASH, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (
            self.TERMINALID is not None or
            self.MERCHANTREF is not None or
            self.DATETIME is not None or
            self.HASH is not None
        ):
            return True
        else:
            return False
    def to_etree(self, parent_element=None, name_='GET', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.TERMINALID is not None:
            TERMINALID_ = self.TERMINALID
            etree_.SubElement(element, '{}TERMINALID').text = self.gds_format_string(TERMINALID_)
        if self.MERCHANTREF is not None:
            MERCHANTREF_ = self.MERCHANTREF
            etree_.SubElement(element, '{}MERCHANTREF').text = self.gds_format_string(MERCHANTREF_)
        if self.DATETIME is not None:
            DATETIME_ = self.DATETIME
            etree_.SubElement(element, '{}DATETIME').text = self.gds_format_string(DATETIME_)
        if self.HASH is not None:
            HASH_ = self.HASH
            etree_.SubElement(element, '{}HASH').text = self.gds_format_string(HASH_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def exportLiteral(self, outfile, level, name_='GET'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.TERMINALID is not None:
            showIndent(outfile, level)
            outfile.write('TERMINALID=%s,\n' % self.gds_encode(quote_python(self.TERMINALID)))
        if self.MERCHANTREF is not None:
            showIndent(outfile, level)
            outfile.write('MERCHANTREF=%s,\n' % self.gds_encode(quote_python(self.MERCHANTREF)))
        if self.DATETIME is not None:
            showIndent(outfile, level)
            outfile.write('DATETIME=%s,\n' % self.gds_encode(quote_python(self.DATETIME)))
        if self.HASH is not None:
            showIndent(outfile, level)
            outfile.write('HASH=%s,\n' % self.gds_encode(quote_python(self.HASH)))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TERMINALID':
            TERMINALID_ = child_.text
            TERMINALID_ = self.gds_validate_string(TERMINALID_, node, 'TERMINALID')
            self.TERMINALID = TERMINALID_
            # validate type TERMINALID
            self.validate_TERMINALID(self.TERMINALID)
        elif nodeName_ == 'MERCHANTREF':
            MERCHANTREF_ = child_.text
            MERCHANTREF_ = self.gds_validate_string(MERCHANTREF_, node, 'MERCHANTREF')
            self.MERCHANTREF = MERCHANTREF_
            # validate type MERCHANTREF
            self.validate_MERCHANTREF(self.MERCHANTREF)
        elif nodeName_ == 'DATETIME':
            DATETIME_ = child_.text
            DATETIME_ = self.gds_validate_string(DATETIME_, node, 'DATETIME')
            self.DATETIME = DATETIME_
            # validate type DATETIME
            self.validate_DATETIME(self.DATETIME)
        elif nodeName_ == 'HASH':
            HASH_ = child_.text
            HASH_ = self.gds_validate_string(HASH_, node, 'HASH')
            self.HASH = HASH_
            # validate type HASH
            self.validate_HASH(self.HASH)
# end class GET


class GET_RESPONSE(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('TERMINALID', ['TERMINALID', 'xs:string'], 0, 0, {'ref': 'TERMINALID', 'name': 'TERMINALID', 'type': 'xs:string'}, None),
        MemberSpec_('MERCHANTREF', ['MERCHANTREF', 'xs:string'], 0, 0, {'ref': 'MERCHANTREF', 'name': 'MERCHANTREF', 'type': 'xs:string'}, None),
        MemberSpec_('ORDERID', ['ORDERID', 'xs:string'], 0, 0, {'ref': 'ORDERID', 'name': 'ORDERID', 'type': 'xs:string'}, None),
        MemberSpec_('EXPIRATION_DATE', ['EXPIRATION_DATE', 'xs:string'], 0, 1, {'ref': 'EXPIRATION_DATE', 'minOccurs': '0', 'name': 'EXPIRATION_DATE', 'type': 'xs:string'}, None),
        MemberSpec_('AUTH_TYPE', ['AUTH_TYPE', 'xs:string'], 0, 0, {'ref': 'AUTH_TYPE', 'name': 'AUTH_TYPE', 'type': 'xs:string'}, None),
        MemberSpec_('DESCRIPTION', ['DESCRIPTION', 'xs:string'], 0, 1, {'ref': 'DESCRIPTION', 'minOccurs': '0', 'name': 'DESCRIPTION', 'type': 'xs:string'}, None),
        MemberSpec_('CURRENCY', ['CURRENCY', 'xs:string'], 0, 0, {'ref': 'CURRENCY', 'name': 'CURRENCY', 'type': 'xs:string'}, None),
        MemberSpec_('TOTAL_AMOUNT', ['TOTAL_AMOUNT', 'xs:decimal'], 0, 0, {'ref': 'TOTAL_AMOUNT', 'name': 'TOTAL_AMOUNT', 'type': 'xs:decimal'}, None),
        MemberSpec_('CREATION_DATE', ['CREATION_DATE', 'xs:string'], 0, 0, {'ref': 'CREATION_DATE', 'name': 'CREATION_DATE', 'type': 'xs:string'}, None),
        MemberSpec_('URL', 'xs:string', 0, 0, {'name': 'URL', 'type': 'xs:string'}, None),
        MemberSpec_('STATUS', ['STATUS', 'xs:string'], 0, 0, {'ref': 'STATUS', 'name': 'STATUS', 'type': 'xs:string'}, None),
        MemberSpec_('ADDITIONAL_MESSAGE', 'xs:string', 0, 1, {'name': 'ADDITIONAL_MESSAGE', 'type': 'xs:string', 'minOccurs': '0'}, None),
        MemberSpec_('CUSTOMER', 'CUSTOMER', 0, 1, {'ref': 'CUSTOMER', 'minOccurs': '0', 'name': 'CUSTOMER', 'type': 'CUSTOMER'}, None),
        MemberSpec_('PAYMENT_ATTEMPTS_TOTAL', 'xs:int', 0, 0, {'name': 'PAYMENT_ATTEMPTS_TOTAL', 'type': 'xs:int'}, None),
        MemberSpec_('PAYMENT_ATTEMPTS', 'PAYMENT_ATTEMPTSType', 0, 1, {'name': 'PAYMENT_ATTEMPTS', 'minOccurs': '0', 'type': 'PAYMENT_ATTEMPTSType'}, None),
        MemberSpec_('DATETIME', ['DATETIME', 'xs:string'], 0, 0, {'ref': 'DATETIME', 'name': 'DATETIME', 'type': 'xs:string'}, None),
        MemberSpec_('HASH', ['HASH', 'xs:string'], 0, 0, {'ref': 'HASH', 'name': 'HASH', 'type': 'xs:string'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, TERMINALID=None, MERCHANTREF=None, ORDERID=None, EXPIRATION_DATE=None, AUTH_TYPE=None, DESCRIPTION=None, CURRENCY=None, TOTAL_AMOUNT=None, CREATION_DATE=None, URL=None, STATUS=None, ADDITIONAL_MESSAGE=None, CUSTOMER=None, PAYMENT_ATTEMPTS_TOTAL=None, PAYMENT_ATTEMPTS=None, DATETIME=None, HASH=None):
        self.original_tagname_ = None
        self.TERMINALID = TERMINALID
        self.validate_TERMINALID(self.TERMINALID)
        self.MERCHANTREF = MERCHANTREF
        self.validate_MERCHANTREF(self.MERCHANTREF)
        self.ORDERID = ORDERID
        self.validate_ORDERID(self.ORDERID)
        self.EXPIRATION_DATE = EXPIRATION_DATE
        self.validate_EXPIRATION_DATE(self.EXPIRATION_DATE)
        self.AUTH_TYPE = AUTH_TYPE
        self.validate_AUTH_TYPE(self.AUTH_TYPE)
        self.DESCRIPTION = DESCRIPTION
        self.validate_DESCRIPTION(self.DESCRIPTION)
        self.CURRENCY = CURRENCY
        self.validate_CURRENCY(self.CURRENCY)
        self.TOTAL_AMOUNT = TOTAL_AMOUNT
        self.validate_TOTAL_AMOUNT(self.TOTAL_AMOUNT)
        self.CREATION_DATE = CREATION_DATE
        self.validate_CREATION_DATE(self.CREATION_DATE)
        self.URL = URL
        self.STATUS = STATUS
        self.validate_STATUS(self.STATUS)
        self.ADDITIONAL_MESSAGE = ADDITIONAL_MESSAGE
        self.CUSTOMER = CUSTOMER
        self.PAYMENT_ATTEMPTS_TOTAL = PAYMENT_ATTEMPTS_TOTAL
        self.PAYMENT_ATTEMPTS = PAYMENT_ATTEMPTS
        self.DATETIME = DATETIME
        self.validate_DATETIME(self.DATETIME)
        self.HASH = HASH
        self.validate_HASH(self.HASH)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GET_RESPONSE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GET_RESPONSE.subclass:
            return GET_RESPONSE.subclass(*args_, **kwargs_)
        else:
            return GET_RESPONSE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TERMINALID(self): return self.TERMINALID
    def set_TERMINALID(self, TERMINALID): self.TERMINALID = TERMINALID
    def get_MERCHANTREF(self): return self.MERCHANTREF
    def set_MERCHANTREF(self, MERCHANTREF): self.MERCHANTREF = MERCHANTREF
    def get_ORDERID(self): return self.ORDERID
    def set_ORDERID(self, ORDERID): self.ORDERID = ORDERID
    def get_EXPIRATION_DATE(self): return self.EXPIRATION_DATE
    def set_EXPIRATION_DATE(self, EXPIRATION_DATE): self.EXPIRATION_DATE = EXPIRATION_DATE
    def get_AUTH_TYPE(self): return self.AUTH_TYPE
    def set_AUTH_TYPE(self, AUTH_TYPE): self.AUTH_TYPE = AUTH_TYPE
    def get_DESCRIPTION(self): return self.DESCRIPTION
    def set_DESCRIPTION(self, DESCRIPTION): self.DESCRIPTION = DESCRIPTION
    def get_CURRENCY(self): return self.CURRENCY
    def set_CURRENCY(self, CURRENCY): self.CURRENCY = CURRENCY
    def get_TOTAL_AMOUNT(self): return self.TOTAL_AMOUNT
    def set_TOTAL_AMOUNT(self, TOTAL_AMOUNT): self.TOTAL_AMOUNT = TOTAL_AMOUNT
    def get_CREATION_DATE(self): return self.CREATION_DATE
    def set_CREATION_DATE(self, CREATION_DATE): self.CREATION_DATE = CREATION_DATE
    def get_URL(self): return self.URL
    def set_URL(self, URL): self.URL = URL
    def get_STATUS(self): return self.STATUS
    def set_STATUS(self, STATUS): self.STATUS = STATUS
    def get_ADDITIONAL_MESSAGE(self): return self.ADDITIONAL_MESSAGE
    def set_ADDITIONAL_MESSAGE(self, ADDITIONAL_MESSAGE): self.ADDITIONAL_MESSAGE = ADDITIONAL_MESSAGE
    def get_CUSTOMER(self): return self.CUSTOMER
    def set_CUSTOMER(self, CUSTOMER): self.CUSTOMER = CUSTOMER
    def get_PAYMENT_ATTEMPTS_TOTAL(self): return self.PAYMENT_ATTEMPTS_TOTAL
    def set_PAYMENT_ATTEMPTS_TOTAL(self, PAYMENT_ATTEMPTS_TOTAL): self.PAYMENT_ATTEMPTS_TOTAL = PAYMENT_ATTEMPTS_TOTAL
    def get_PAYMENT_ATTEMPTS(self): return self.PAYMENT_ATTEMPTS
    def set_PAYMENT_ATTEMPTS(self, PAYMENT_ATTEMPTS): self.PAYMENT_ATTEMPTS = PAYMENT_ATTEMPTS
    def get_DATETIME(self): return self.DATETIME
    def set_DATETIME(self, DATETIME): self.DATETIME = DATETIME
    def get_HASH(self): return self.HASH
    def set_HASH(self, HASH): self.HASH = HASH
    def validate_TERMINALID(self, value):
        # Validate type TERMINALID, a restriction on xs:string.
        pass
    def validate_MERCHANTREF(self, value):
        # Validate type MERCHANTREF, a restriction on xs:string.
        pass
    def validate_ORDERID(self, value):
        # Validate type ORDERID, a restriction on xs:string.
        pass
    def validate_EXPIRATION_DATE(self, value):
        # Validate type EXPIRATION_DATE, a restriction on xs:string.
        pass
    def validate_AUTH_TYPE(self, value):
        # Validate type AUTH_TYPE, a restriction on xs:string.
        pass
    def validate_DESCRIPTION(self, value):
        # Validate type DESCRIPTION, a restriction on xs:string.
        pass
    def validate_CURRENCY(self, value):
        # Validate type CURRENCY, a restriction on xs:string.
        pass
    def validate_TOTAL_AMOUNT(self, value):
        # Validate type TOTAL_AMOUNT, a restriction on xs:decimal.
        pass
    def validate_CREATION_DATE(self, value):
        # Validate type CREATION_DATE, a restriction on xs:string.
        pass
    def validate_STATUS(self, value):
        # Validate type STATUS, a restriction on xs:string.
        pass
    def validate_DATETIME(self, value):
        # Validate type DATETIME, a restriction on xs:string.
        pass
    def validate_HASH(self, value):
        # Validate type HASH, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (
            self.TERMINALID is not None or
            self.MERCHANTREF is not None or
            self.ORDERID is not None or
            self.EXPIRATION_DATE is not None or
            self.AUTH_TYPE is not None or
            self.DESCRIPTION is not None or
            self.CURRENCY is not None or
            self.TOTAL_AMOUNT is not None or
            self.CREATION_DATE is not None or
            self.URL is not None or
            self.STATUS is not None or
            self.ADDITIONAL_MESSAGE is not None or
            self.CUSTOMER is not None or
            self.PAYMENT_ATTEMPTS_TOTAL is not None or
            self.PAYMENT_ATTEMPTS is not None or
            self.DATETIME is not None or
            self.HASH is not None
        ):
            return True
        else:
            return False
    def to_etree(self, parent_element=None, name_='GET_RESPONSE', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.TERMINALID is not None:
            TERMINALID_ = self.TERMINALID
            etree_.SubElement(element, '{}TERMINALID').text = self.gds_format_string(TERMINALID_)
        if self.MERCHANTREF is not None:
            MERCHANTREF_ = self.MERCHANTREF
            etree_.SubElement(element, '{}MERCHANTREF').text = self.gds_format_string(MERCHANTREF_)
        if self.ORDERID is not None:
            ORDERID_ = self.ORDERID
            etree_.SubElement(element, '{}ORDERID').text = self.gds_format_string(ORDERID_)
        if self.EXPIRATION_DATE is not None:
            EXPIRATION_DATE_ = self.EXPIRATION_DATE
            etree_.SubElement(element, '{}EXPIRATION_DATE').text = self.gds_format_string(EXPIRATION_DATE_)
        if self.AUTH_TYPE is not None:
            AUTH_TYPE_ = self.AUTH_TYPE
            etree_.SubElement(element, '{}AUTH_TYPE').text = self.gds_format_string(AUTH_TYPE_)
        if self.DESCRIPTION is not None:
            DESCRIPTION_ = self.DESCRIPTION
            etree_.SubElement(element, '{}DESCRIPTION').text = self.gds_format_string(DESCRIPTION_)
        if self.CURRENCY is not None:
            CURRENCY_ = self.CURRENCY
            etree_.SubElement(element, '{}CURRENCY').text = self.gds_format_string(CURRENCY_)
        if self.TOTAL_AMOUNT is not None:
            TOTAL_AMOUNT_ = self.TOTAL_AMOUNT
            etree_.SubElement(element, '{}TOTAL_AMOUNT').text = self.gds_format_float(TOTAL_AMOUNT_)
        if self.CREATION_DATE is not None:
            CREATION_DATE_ = self.CREATION_DATE
            etree_.SubElement(element, '{}CREATION_DATE').text = self.gds_format_string(CREATION_DATE_)
        if self.URL is not None:
            URL_ = self.URL
            etree_.SubElement(element, '{}URL').text = self.gds_format_string(URL_)
        if self.STATUS is not None:
            STATUS_ = self.STATUS
            etree_.SubElement(element, '{}STATUS').text = self.gds_format_string(STATUS_)
        if self.ADDITIONAL_MESSAGE is not None:
            ADDITIONAL_MESSAGE_ = self.ADDITIONAL_MESSAGE
            etree_.SubElement(element, '{}ADDITIONAL_MESSAGE').text = self.gds_format_string(ADDITIONAL_MESSAGE_)
        if self.CUSTOMER is not None:
            CUSTOMER_ = self.CUSTOMER
            CUSTOMER_.to_etree(element, name_='CUSTOMER', mapping_=mapping_)
        if self.PAYMENT_ATTEMPTS_TOTAL is not None:
            PAYMENT_ATTEMPTS_TOTAL_ = self.PAYMENT_ATTEMPTS_TOTAL
            etree_.SubElement(element, '{}PAYMENT_ATTEMPTS_TOTAL').text = self.gds_format_integer(PAYMENT_ATTEMPTS_TOTAL_)
        if self.PAYMENT_ATTEMPTS is not None:
            PAYMENT_ATTEMPTS_ = self.PAYMENT_ATTEMPTS
            PAYMENT_ATTEMPTS_.to_etree(element, name_='PAYMENT_ATTEMPTS', mapping_=mapping_)
        if self.DATETIME is not None:
            DATETIME_ = self.DATETIME
            etree_.SubElement(element, '{}DATETIME').text = self.gds_format_string(DATETIME_)
        if self.HASH is not None:
            HASH_ = self.HASH
            etree_.SubElement(element, '{}HASH').text = self.gds_format_string(HASH_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def exportLiteral(self, outfile, level, name_='GET_RESPONSE'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.TERMINALID is not None:
            showIndent(outfile, level)
            outfile.write('TERMINALID=%s,\n' % self.gds_encode(quote_python(self.TERMINALID)))
        if self.MERCHANTREF is not None:
            showIndent(outfile, level)
            outfile.write('MERCHANTREF=%s,\n' % self.gds_encode(quote_python(self.MERCHANTREF)))
        if self.ORDERID is not None:
            showIndent(outfile, level)
            outfile.write('ORDERID=%s,\n' % self.gds_encode(quote_python(self.ORDERID)))
        if self.EXPIRATION_DATE is not None:
            showIndent(outfile, level)
            outfile.write('EXPIRATION_DATE=%s,\n' % self.gds_encode(quote_python(self.EXPIRATION_DATE)))
        if self.AUTH_TYPE is not None:
            showIndent(outfile, level)
            outfile.write('AUTH_TYPE=%s,\n' % self.gds_encode(quote_python(self.AUTH_TYPE)))
        if self.DESCRIPTION is not None:
            showIndent(outfile, level)
            outfile.write('DESCRIPTION=%s,\n' % self.gds_encode(quote_python(self.DESCRIPTION)))
        if self.CURRENCY is not None:
            showIndent(outfile, level)
            outfile.write('CURRENCY=%s,\n' % self.gds_encode(quote_python(self.CURRENCY)))
        if self.TOTAL_AMOUNT is not None:
            showIndent(outfile, level)
            outfile.write('TOTAL_AMOUNT=%f,\n' % self.TOTAL_AMOUNT)
        if self.CREATION_DATE is not None:
            showIndent(outfile, level)
            outfile.write('CREATION_DATE=%s,\n' % self.gds_encode(quote_python(self.CREATION_DATE)))
        if self.URL is not None:
            showIndent(outfile, level)
            outfile.write('URL=%s,\n' % self.gds_encode(quote_python(self.URL)))
        if self.STATUS is not None:
            showIndent(outfile, level)
            outfile.write('STATUS=%s,\n' % self.gds_encode(quote_python(self.STATUS)))
        if self.ADDITIONAL_MESSAGE is not None:
            showIndent(outfile, level)
            outfile.write('ADDITIONAL_MESSAGE=%s,\n' % self.gds_encode(quote_python(self.ADDITIONAL_MESSAGE)))
        if self.CUSTOMER is not None:
            showIndent(outfile, level)
            outfile.write('CUSTOMER=model_.CUSTOMER(\n')
            self.CUSTOMER.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PAYMENT_ATTEMPTS_TOTAL is not None:
            showIndent(outfile, level)
            outfile.write('PAYMENT_ATTEMPTS_TOTAL=%d,\n' % self.PAYMENT_ATTEMPTS_TOTAL)
        if self.PAYMENT_ATTEMPTS is not None:
            showIndent(outfile, level)
            outfile.write('PAYMENT_ATTEMPTS=model_.PAYMENT_ATTEMPTSType(\n')
            self.PAYMENT_ATTEMPTS.exportLiteral(outfile, level, name_='PAYMENT_ATTEMPTS')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DATETIME is not None:
            showIndent(outfile, level)
            outfile.write('DATETIME=%s,\n' % self.gds_encode(quote_python(self.DATETIME)))
        if self.HASH is not None:
            showIndent(outfile, level)
            outfile.write('HASH=%s,\n' % self.gds_encode(quote_python(self.HASH)))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TERMINALID':
            TERMINALID_ = child_.text
            TERMINALID_ = self.gds_validate_string(TERMINALID_, node, 'TERMINALID')
            self.TERMINALID = TERMINALID_
            # validate type TERMINALID
            self.validate_TERMINALID(self.TERMINALID)
        elif nodeName_ == 'MERCHANTREF':
            MERCHANTREF_ = child_.text
            MERCHANTREF_ = self.gds_validate_string(MERCHANTREF_, node, 'MERCHANTREF')
            self.MERCHANTREF = MERCHANTREF_
            # validate type MERCHANTREF
            self.validate_MERCHANTREF(self.MERCHANTREF)
        elif nodeName_ == 'ORDERID':
            ORDERID_ = child_.text
            ORDERID_ = self.gds_validate_string(ORDERID_, node, 'ORDERID')
            self.ORDERID = ORDERID_
            # validate type ORDERID
            self.validate_ORDERID(self.ORDERID)
        elif nodeName_ == 'EXPIRATION_DATE':
            EXPIRATION_DATE_ = child_.text
            EXPIRATION_DATE_ = self.gds_validate_string(EXPIRATION_DATE_, node, 'EXPIRATION_DATE')
            self.EXPIRATION_DATE = EXPIRATION_DATE_
            # validate type EXPIRATION_DATE
            self.validate_EXPIRATION_DATE(self.EXPIRATION_DATE)
        elif nodeName_ == 'AUTH_TYPE':
            AUTH_TYPE_ = child_.text
            AUTH_TYPE_ = self.gds_validate_string(AUTH_TYPE_, node, 'AUTH_TYPE')
            self.AUTH_TYPE = AUTH_TYPE_
            # validate type AUTH_TYPE
            self.validate_AUTH_TYPE(self.AUTH_TYPE)
        elif nodeName_ == 'DESCRIPTION':
            DESCRIPTION_ = child_.text
            DESCRIPTION_ = self.gds_validate_string(DESCRIPTION_, node, 'DESCRIPTION')
            self.DESCRIPTION = DESCRIPTION_
            # validate type DESCRIPTION
            self.validate_DESCRIPTION(self.DESCRIPTION)
        elif nodeName_ == 'CURRENCY':
            CURRENCY_ = child_.text
            CURRENCY_ = self.gds_validate_string(CURRENCY_, node, 'CURRENCY')
            self.CURRENCY = CURRENCY_
            # validate type CURRENCY
            self.validate_CURRENCY(self.CURRENCY)
        elif nodeName_ == 'TOTAL_AMOUNT' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TOTAL_AMOUNT')
            self.TOTAL_AMOUNT = fval_
            # validate type TOTAL_AMOUNT
            self.validate_TOTAL_AMOUNT(self.TOTAL_AMOUNT)
        elif nodeName_ == 'CREATION_DATE':
            CREATION_DATE_ = child_.text
            CREATION_DATE_ = self.gds_validate_string(CREATION_DATE_, node, 'CREATION_DATE')
            self.CREATION_DATE = CREATION_DATE_
            # validate type CREATION_DATE
            self.validate_CREATION_DATE(self.CREATION_DATE)
        elif nodeName_ == 'URL':
            URL_ = child_.text
            URL_ = self.gds_validate_string(URL_, node, 'URL')
            self.URL = URL_
        elif nodeName_ == 'STATUS':
            STATUS_ = child_.text
            STATUS_ = self.gds_validate_string(STATUS_, node, 'STATUS')
            self.STATUS = STATUS_
            # validate type STATUS
            self.validate_STATUS(self.STATUS)
        elif nodeName_ == 'ADDITIONAL_MESSAGE':
            ADDITIONAL_MESSAGE_ = child_.text
            ADDITIONAL_MESSAGE_ = self.gds_validate_string(ADDITIONAL_MESSAGE_, node, 'ADDITIONAL_MESSAGE')
            self.ADDITIONAL_MESSAGE = ADDITIONAL_MESSAGE_
        elif nodeName_ == 'CUSTOMER':
            obj_ = CUSTOMER.factory()
            obj_.build(child_)
            self.CUSTOMER = obj_
            obj_.original_tagname_ = 'CUSTOMER'
        elif nodeName_ == 'PAYMENT_ATTEMPTS_TOTAL' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'PAYMENT_ATTEMPTS_TOTAL')
            self.PAYMENT_ATTEMPTS_TOTAL = ival_
        elif nodeName_ == 'PAYMENT_ATTEMPTS':
            obj_ = PAYMENT_ATTEMPTSType.factory()
            obj_.build(child_)
            self.PAYMENT_ATTEMPTS = obj_
            obj_.original_tagname_ = 'PAYMENT_ATTEMPTS'
        elif nodeName_ == 'DATETIME':
            DATETIME_ = child_.text
            DATETIME_ = self.gds_validate_string(DATETIME_, node, 'DATETIME')
            self.DATETIME = DATETIME_
            # validate type DATETIME
            self.validate_DATETIME(self.DATETIME)
        elif nodeName_ == 'HASH':
            HASH_ = child_.text
            HASH_ = self.gds_validate_string(HASH_, node, 'HASH')
            self.HASH = HASH_
            # validate type HASH
            self.validate_HASH(self.HASH)
# end class GET_RESPONSE


class SEND(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('TERMINALID', ['TERMINALID', 'xs:string'], 0, 0, {'ref': 'TERMINALID', 'name': 'TERMINALID', 'type': 'xs:string'}, None),
        MemberSpec_('MERCHANTREF', ['MERCHANTREF', 'xs:string'], 0, 0, {'ref': 'MERCHANTREF', 'name': 'MERCHANTREF', 'type': 'xs:string'}, None),
        MemberSpec_('ADDITIONAL_MESSAGE', ['ADDITIONAL_MESSAGE', 'xs:string'], 0, 1, {'ref': 'ADDITIONAL_MESSAGE', 'minOccurs': '0', 'name': 'ADDITIONAL_MESSAGE', 'type': 'xs:string'}, None),
        MemberSpec_('CUSTOMER_MERCHANTREF', ['CUSTOMER_MERCHANTREF', 'xs:string'], 0, 0, {'ref': 'CUSTOMER_MERCHANTREF', 'name': 'CUSTOMER_MERCHANTREF', 'type': 'xs:string'}, 1),
        MemberSpec_('CUSTOMER', 'CUSTOMER', 0, 0, {'ref': 'CUSTOMER', 'name': 'CUSTOMER', 'type': 'CUSTOMER'}, 1),
        MemberSpec_('DATETIME', ['DATETIME', 'xs:string'], 0, 0, {'ref': 'DATETIME', 'name': 'DATETIME', 'type': 'xs:string'}, None),
        MemberSpec_('HASH', ['HASH', 'xs:string'], 0, 0, {'ref': 'HASH', 'name': 'HASH', 'type': 'xs:string'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, TERMINALID=None, MERCHANTREF=None, ADDITIONAL_MESSAGE=None, CUSTOMER_MERCHANTREF=None, CUSTOMER=None, DATETIME=None, HASH=None):
        self.original_tagname_ = None
        self.TERMINALID = TERMINALID
        self.validate_TERMINALID(self.TERMINALID)
        self.MERCHANTREF = MERCHANTREF
        self.validate_MERCHANTREF(self.MERCHANTREF)
        self.ADDITIONAL_MESSAGE = ADDITIONAL_MESSAGE
        self.validate_ADDITIONAL_MESSAGE(self.ADDITIONAL_MESSAGE)
        self.CUSTOMER_MERCHANTREF = CUSTOMER_MERCHANTREF
        self.validate_CUSTOMER_MERCHANTREF(self.CUSTOMER_MERCHANTREF)
        self.CUSTOMER = CUSTOMER
        self.DATETIME = DATETIME
        self.validate_DATETIME(self.DATETIME)
        self.HASH = HASH
        self.validate_HASH(self.HASH)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SEND)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SEND.subclass:
            return SEND.subclass(*args_, **kwargs_)
        else:
            return SEND(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TERMINALID(self): return self.TERMINALID
    def set_TERMINALID(self, TERMINALID): self.TERMINALID = TERMINALID
    def get_MERCHANTREF(self): return self.MERCHANTREF
    def set_MERCHANTREF(self, MERCHANTREF): self.MERCHANTREF = MERCHANTREF
    def get_ADDITIONAL_MESSAGE(self): return self.ADDITIONAL_MESSAGE
    def set_ADDITIONAL_MESSAGE(self, ADDITIONAL_MESSAGE): self.ADDITIONAL_MESSAGE = ADDITIONAL_MESSAGE
    def get_CUSTOMER_MERCHANTREF(self): return self.CUSTOMER_MERCHANTREF
    def set_CUSTOMER_MERCHANTREF(self, CUSTOMER_MERCHANTREF): self.CUSTOMER_MERCHANTREF = CUSTOMER_MERCHANTREF
    def get_CUSTOMER(self): return self.CUSTOMER
    def set_CUSTOMER(self, CUSTOMER): self.CUSTOMER = CUSTOMER
    def get_DATETIME(self): return self.DATETIME
    def set_DATETIME(self, DATETIME): self.DATETIME = DATETIME
    def get_HASH(self): return self.HASH
    def set_HASH(self, HASH): self.HASH = HASH
    def validate_TERMINALID(self, value):
        # Validate type TERMINALID, a restriction on xs:string.
        pass
    def validate_MERCHANTREF(self, value):
        # Validate type MERCHANTREF, a restriction on xs:string.
        pass
    def validate_ADDITIONAL_MESSAGE(self, value):
        # Validate type ADDITIONAL_MESSAGE, a restriction on xs:string.
        pass
    def validate_CUSTOMER_MERCHANTREF(self, value):
        # Validate type CUSTOMER_MERCHANTREF, a restriction on xs:string.
        pass
    def validate_DATETIME(self, value):
        # Validate type DATETIME, a restriction on xs:string.
        pass
    def validate_HASH(self, value):
        # Validate type HASH, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (
            self.TERMINALID is not None or
            self.MERCHANTREF is not None or
            self.ADDITIONAL_MESSAGE is not None or
            self.CUSTOMER_MERCHANTREF is not None or
            self.CUSTOMER is not None or
            self.DATETIME is not None or
            self.HASH is not None
        ):
            return True
        else:
            return False
    def to_etree(self, parent_element=None, name_='SEND', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.TERMINALID is not None:
            TERMINALID_ = self.TERMINALID
            etree_.SubElement(element, '{}TERMINALID').text = self.gds_format_string(TERMINALID_)
        if self.MERCHANTREF is not None:
            MERCHANTREF_ = self.MERCHANTREF
            etree_.SubElement(element, '{}MERCHANTREF').text = self.gds_format_string(MERCHANTREF_)
        if self.ADDITIONAL_MESSAGE is not None:
            ADDITIONAL_MESSAGE_ = self.ADDITIONAL_MESSAGE
            etree_.SubElement(element, '{}ADDITIONAL_MESSAGE').text = self.gds_format_string(ADDITIONAL_MESSAGE_)
        if self.CUSTOMER_MERCHANTREF is not None:
            CUSTOMER_MERCHANTREF_ = self.CUSTOMER_MERCHANTREF
            etree_.SubElement(element, '{}CUSTOMER_MERCHANTREF').text = self.gds_format_string(CUSTOMER_MERCHANTREF_)
        if self.CUSTOMER is not None:
            CUSTOMER_ = self.CUSTOMER
            CUSTOMER_.to_etree(element, name_='CUSTOMER', mapping_=mapping_)
        if self.DATETIME is not None:
            DATETIME_ = self.DATETIME
            etree_.SubElement(element, '{}DATETIME').text = self.gds_format_string(DATETIME_)
        if self.HASH is not None:
            HASH_ = self.HASH
            etree_.SubElement(element, '{}HASH').text = self.gds_format_string(HASH_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def exportLiteral(self, outfile, level, name_='SEND'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.TERMINALID is not None:
            showIndent(outfile, level)
            outfile.write('TERMINALID=%s,\n' % self.gds_encode(quote_python(self.TERMINALID)))
        if self.MERCHANTREF is not None:
            showIndent(outfile, level)
            outfile.write('MERCHANTREF=%s,\n' % self.gds_encode(quote_python(self.MERCHANTREF)))
        if self.ADDITIONAL_MESSAGE is not None:
            showIndent(outfile, level)
            outfile.write('ADDITIONAL_MESSAGE=%s,\n' % self.gds_encode(quote_python(self.ADDITIONAL_MESSAGE)))
        if self.CUSTOMER_MERCHANTREF is not None:
            showIndent(outfile, level)
            outfile.write('CUSTOMER_MERCHANTREF=%s,\n' % self.gds_encode(quote_python(self.CUSTOMER_MERCHANTREF)))
        if self.CUSTOMER is not None:
            showIndent(outfile, level)
            outfile.write('CUSTOMER=model_.CUSTOMER(\n')
            self.CUSTOMER.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DATETIME is not None:
            showIndent(outfile, level)
            outfile.write('DATETIME=%s,\n' % self.gds_encode(quote_python(self.DATETIME)))
        if self.HASH is not None:
            showIndent(outfile, level)
            outfile.write('HASH=%s,\n' % self.gds_encode(quote_python(self.HASH)))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TERMINALID':
            TERMINALID_ = child_.text
            TERMINALID_ = self.gds_validate_string(TERMINALID_, node, 'TERMINALID')
            self.TERMINALID = TERMINALID_
            # validate type TERMINALID
            self.validate_TERMINALID(self.TERMINALID)
        elif nodeName_ == 'MERCHANTREF':
            MERCHANTREF_ = child_.text
            MERCHANTREF_ = self.gds_validate_string(MERCHANTREF_, node, 'MERCHANTREF')
            self.MERCHANTREF = MERCHANTREF_
            # validate type MERCHANTREF
            self.validate_MERCHANTREF(self.MERCHANTREF)
        elif nodeName_ == 'ADDITIONAL_MESSAGE':
            ADDITIONAL_MESSAGE_ = child_.text
            ADDITIONAL_MESSAGE_ = self.gds_validate_string(ADDITIONAL_MESSAGE_, node, 'ADDITIONAL_MESSAGE')
            self.ADDITIONAL_MESSAGE = ADDITIONAL_MESSAGE_
            # validate type ADDITIONAL_MESSAGE
            self.validate_ADDITIONAL_MESSAGE(self.ADDITIONAL_MESSAGE)
        elif nodeName_ == 'CUSTOMER_MERCHANTREF':
            CUSTOMER_MERCHANTREF_ = child_.text
            CUSTOMER_MERCHANTREF_ = self.gds_validate_string(CUSTOMER_MERCHANTREF_, node, 'CUSTOMER_MERCHANTREF')
            self.CUSTOMER_MERCHANTREF = CUSTOMER_MERCHANTREF_
            # validate type CUSTOMER_MERCHANTREF
            self.validate_CUSTOMER_MERCHANTREF(self.CUSTOMER_MERCHANTREF)
        elif nodeName_ == 'CUSTOMER':
            obj_ = CUSTOMER.factory()
            obj_.build(child_)
            self.CUSTOMER = obj_
            obj_.original_tagname_ = 'CUSTOMER'
        elif nodeName_ == 'DATETIME':
            DATETIME_ = child_.text
            DATETIME_ = self.gds_validate_string(DATETIME_, node, 'DATETIME')
            self.DATETIME = DATETIME_
            # validate type DATETIME
            self.validate_DATETIME(self.DATETIME)
        elif nodeName_ == 'HASH':
            HASH_ = child_.text
            HASH_ = self.gds_validate_string(HASH_, node, 'HASH')
            self.HASH = HASH_
            # validate type HASH
            self.validate_HASH(self.HASH)


    @property
    def hash_string(self):
        hash_list = [self.TERMINALID]
        hash_list.append(self.MERCHANTREF)
        if self.ADDITIONAL_MESSAGE:
            hash_list.append(self.ADDITIONAL_MESSAGE)
        if self.CUSTOMER_MERCHANTREF:
            hash_list.append(self.CUSTOMER_MERCHANTREF)
        if self.CUSTOMER:
            hash_list.append(self.CUSTOMER.hash_string)
        hash_list.append(self.DATETIME)
        return ':'.join(hash_list)
# end class SEND


class SEND_RESPONSE(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('TERMINALID', ['TERMINALID', 'xs:string'], 0, 0, {'ref': 'TERMINALID', 'name': 'TERMINALID', 'type': 'xs:string'}, None),
        MemberSpec_('MERCHANTREF', ['MERCHANTREF', 'xs:string'], 0, 0, {'ref': 'MERCHANTREF', 'name': 'MERCHANTREF', 'type': 'xs:string'}, None),
        MemberSpec_('ADDITIONAL_MESSAGE', ['ADDITIONAL_MESSAGE', 'xs:string'], 0, 1, {'ref': 'ADDITIONAL_MESSAGE', 'minOccurs': '0', 'name': 'ADDITIONAL_MESSAGE', 'type': 'xs:string'}, None),
        MemberSpec_('CUSTOMER', 'CUSTOMER', 0, 0, {'ref': 'CUSTOMER', 'name': 'CUSTOMER', 'type': 'CUSTOMER'}, None),
        MemberSpec_('DATETIME', ['DATETIME', 'xs:string'], 0, 0, {'ref': 'DATETIME', 'name': 'DATETIME', 'type': 'xs:string'}, None),
        MemberSpec_('HASH', ['HASH', 'xs:string'], 0, 0, {'ref': 'HASH', 'name': 'HASH', 'type': 'xs:string'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, TERMINALID=None, MERCHANTREF=None, ADDITIONAL_MESSAGE=None, CUSTOMER=None, DATETIME=None, HASH=None):
        self.original_tagname_ = None
        self.TERMINALID = TERMINALID
        self.validate_TERMINALID(self.TERMINALID)
        self.MERCHANTREF = MERCHANTREF
        self.validate_MERCHANTREF(self.MERCHANTREF)
        self.ADDITIONAL_MESSAGE = ADDITIONAL_MESSAGE
        self.validate_ADDITIONAL_MESSAGE(self.ADDITIONAL_MESSAGE)
        self.CUSTOMER = CUSTOMER
        self.DATETIME = DATETIME
        self.validate_DATETIME(self.DATETIME)
        self.HASH = HASH
        self.validate_HASH(self.HASH)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SEND_RESPONSE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SEND_RESPONSE.subclass:
            return SEND_RESPONSE.subclass(*args_, **kwargs_)
        else:
            return SEND_RESPONSE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TERMINALID(self): return self.TERMINALID
    def set_TERMINALID(self, TERMINALID): self.TERMINALID = TERMINALID
    def get_MERCHANTREF(self): return self.MERCHANTREF
    def set_MERCHANTREF(self, MERCHANTREF): self.MERCHANTREF = MERCHANTREF
    def get_ADDITIONAL_MESSAGE(self): return self.ADDITIONAL_MESSAGE
    def set_ADDITIONAL_MESSAGE(self, ADDITIONAL_MESSAGE): self.ADDITIONAL_MESSAGE = ADDITIONAL_MESSAGE
    def get_CUSTOMER(self): return self.CUSTOMER
    def set_CUSTOMER(self, CUSTOMER): self.CUSTOMER = CUSTOMER
    def get_DATETIME(self): return self.DATETIME
    def set_DATETIME(self, DATETIME): self.DATETIME = DATETIME
    def get_HASH(self): return self.HASH
    def set_HASH(self, HASH): self.HASH = HASH
    def validate_TERMINALID(self, value):
        # Validate type TERMINALID, a restriction on xs:string.
        pass
    def validate_MERCHANTREF(self, value):
        # Validate type MERCHANTREF, a restriction on xs:string.
        pass
    def validate_ADDITIONAL_MESSAGE(self, value):
        # Validate type ADDITIONAL_MESSAGE, a restriction on xs:string.
        pass
    def validate_DATETIME(self, value):
        # Validate type DATETIME, a restriction on xs:string.
        pass
    def validate_HASH(self, value):
        # Validate type HASH, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (
            self.TERMINALID is not None or
            self.MERCHANTREF is not None or
            self.ADDITIONAL_MESSAGE is not None or
            self.CUSTOMER is not None or
            self.DATETIME is not None or
            self.HASH is not None
        ):
            return True
        else:
            return False
    def to_etree(self, parent_element=None, name_='SEND_RESPONSE', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.TERMINALID is not None:
            TERMINALID_ = self.TERMINALID
            etree_.SubElement(element, '{}TERMINALID').text = self.gds_format_string(TERMINALID_)
        if self.MERCHANTREF is not None:
            MERCHANTREF_ = self.MERCHANTREF
            etree_.SubElement(element, '{}MERCHANTREF').text = self.gds_format_string(MERCHANTREF_)
        if self.ADDITIONAL_MESSAGE is not None:
            ADDITIONAL_MESSAGE_ = self.ADDITIONAL_MESSAGE
            etree_.SubElement(element, '{}ADDITIONAL_MESSAGE').text = self.gds_format_string(ADDITIONAL_MESSAGE_)
        if self.CUSTOMER is not None:
            CUSTOMER_ = self.CUSTOMER
            CUSTOMER_.to_etree(element, name_='CUSTOMER', mapping_=mapping_)
        if self.DATETIME is not None:
            DATETIME_ = self.DATETIME
            etree_.SubElement(element, '{}DATETIME').text = self.gds_format_string(DATETIME_)
        if self.HASH is not None:
            HASH_ = self.HASH
            etree_.SubElement(element, '{}HASH').text = self.gds_format_string(HASH_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def exportLiteral(self, outfile, level, name_='SEND_RESPONSE'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.TERMINALID is not None:
            showIndent(outfile, level)
            outfile.write('TERMINALID=%s,\n' % self.gds_encode(quote_python(self.TERMINALID)))
        if self.MERCHANTREF is not None:
            showIndent(outfile, level)
            outfile.write('MERCHANTREF=%s,\n' % self.gds_encode(quote_python(self.MERCHANTREF)))
        if self.ADDITIONAL_MESSAGE is not None:
            showIndent(outfile, level)
            outfile.write('ADDITIONAL_MESSAGE=%s,\n' % self.gds_encode(quote_python(self.ADDITIONAL_MESSAGE)))
        if self.CUSTOMER is not None:
            showIndent(outfile, level)
            outfile.write('CUSTOMER=model_.CUSTOMER(\n')
            self.CUSTOMER.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DATETIME is not None:
            showIndent(outfile, level)
            outfile.write('DATETIME=%s,\n' % self.gds_encode(quote_python(self.DATETIME)))
        if self.HASH is not None:
            showIndent(outfile, level)
            outfile.write('HASH=%s,\n' % self.gds_encode(quote_python(self.HASH)))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TERMINALID':
            TERMINALID_ = child_.text
            TERMINALID_ = self.gds_validate_string(TERMINALID_, node, 'TERMINALID')
            self.TERMINALID = TERMINALID_
            # validate type TERMINALID
            self.validate_TERMINALID(self.TERMINALID)
        elif nodeName_ == 'MERCHANTREF':
            MERCHANTREF_ = child_.text
            MERCHANTREF_ = self.gds_validate_string(MERCHANTREF_, node, 'MERCHANTREF')
            self.MERCHANTREF = MERCHANTREF_
            # validate type MERCHANTREF
            self.validate_MERCHANTREF(self.MERCHANTREF)
        elif nodeName_ == 'ADDITIONAL_MESSAGE':
            ADDITIONAL_MESSAGE_ = child_.text
            ADDITIONAL_MESSAGE_ = self.gds_validate_string(ADDITIONAL_MESSAGE_, node, 'ADDITIONAL_MESSAGE')
            self.ADDITIONAL_MESSAGE = ADDITIONAL_MESSAGE_
            # validate type ADDITIONAL_MESSAGE
            self.validate_ADDITIONAL_MESSAGE(self.ADDITIONAL_MESSAGE)
        elif nodeName_ == 'CUSTOMER':
            obj_ = CUSTOMER.factory()
            obj_.build(child_)
            self.CUSTOMER = obj_
            obj_.original_tagname_ = 'CUSTOMER'
        elif nodeName_ == 'DATETIME':
            DATETIME_ = child_.text
            DATETIME_ = self.gds_validate_string(DATETIME_, node, 'DATETIME')
            self.DATETIME = DATETIME_
            # validate type DATETIME
            self.validate_DATETIME(self.DATETIME)
        elif nodeName_ == 'HASH':
            HASH_ = child_.text
            HASH_ = self.gds_validate_string(HASH_, node, 'HASH')
            self.HASH = HASH_
            # validate type HASH
            self.validate_HASH(self.HASH)
# end class SEND_RESPONSE


class PAYMENT_ATTEMPTSType(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('PAYMENT_ATTEMPT', 'PAYMENT_ATTEMPTType', 1, 1, {'name': 'PAYMENT_ATTEMPT', 'minOccurs': '0', 'maxOccurs': 'unbounded', 'type': 'PAYMENT_ATTEMPTType'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, PAYMENT_ATTEMPT=None):
        self.original_tagname_ = None
        if PAYMENT_ATTEMPT is None:
            self.PAYMENT_ATTEMPT = []
        else:
            self.PAYMENT_ATTEMPT = PAYMENT_ATTEMPT
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PAYMENT_ATTEMPTSType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PAYMENT_ATTEMPTSType.subclass:
            return PAYMENT_ATTEMPTSType.subclass(*args_, **kwargs_)
        else:
            return PAYMENT_ATTEMPTSType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PAYMENT_ATTEMPT(self): return self.PAYMENT_ATTEMPT
    def set_PAYMENT_ATTEMPT(self, PAYMENT_ATTEMPT): self.PAYMENT_ATTEMPT = PAYMENT_ATTEMPT
    def add_PAYMENT_ATTEMPT(self, value): self.PAYMENT_ATTEMPT.append(value)
    def insert_PAYMENT_ATTEMPT_at(self, index, value): self.PAYMENT_ATTEMPT.insert(index, value)
    def replace_PAYMENT_ATTEMPT_at(self, index, value): self.PAYMENT_ATTEMPT[index] = value
    def hasContent_(self):
        if (
            self.PAYMENT_ATTEMPT
        ):
            return True
        else:
            return False
    def to_etree(self, parent_element=None, name_='PAYMENT_ATTEMPTSType', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        for PAYMENT_ATTEMPT_ in self.PAYMENT_ATTEMPT:
            PAYMENT_ATTEMPT_.to_etree(element, name_='PAYMENT_ATTEMPT', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def exportLiteral(self, outfile, level, name_='PAYMENT_ATTEMPTSType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('PAYMENT_ATTEMPT=[\n')
        level += 1
        for PAYMENT_ATTEMPT_ in self.PAYMENT_ATTEMPT:
            showIndent(outfile, level)
            outfile.write('model_.PAYMENT_ATTEMPTType(\n')
            PAYMENT_ATTEMPT_.exportLiteral(outfile, level, name_='PAYMENT_ATTEMPTType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PAYMENT_ATTEMPT':
            obj_ = PAYMENT_ATTEMPTType.factory()
            obj_.build(child_)
            self.PAYMENT_ATTEMPT.append(obj_)
            obj_.original_tagname_ = 'PAYMENT_ATTEMPT'
# end class PAYMENT_ATTEMPTSType


class PAYMENT_ATTEMPTType(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('UNIQUEREF', ['UNIQUEREFType', 'xs:string'], 0, 0, {'name': 'UNIQUEREF', 'type': 'xs:string'}, None),
        MemberSpec_('DATE', ['DATEType', 'xs:string'], 0, 0, {'name': 'DATE', 'type': 'xs:string'}, None),
        MemberSpec_('STATUS', 'xs:string', 0, 0, {'name': 'STATUS', 'type': 'xs:string'}, None),
        MemberSpec_('AMOUNT', 'xs:double', 0, 0, {'name': 'AMOUNT', 'type': 'xs:double'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, UNIQUEREF=None, DATE=None, STATUS=None, AMOUNT=None):
        self.original_tagname_ = None
        self.UNIQUEREF = UNIQUEREF
        self.validate_UNIQUEREFType(self.UNIQUEREF)
        self.DATE = DATE
        self.validate_DATEType(self.DATE)
        self.STATUS = STATUS
        self.AMOUNT = AMOUNT
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PAYMENT_ATTEMPTType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PAYMENT_ATTEMPTType.subclass:
            return PAYMENT_ATTEMPTType.subclass(*args_, **kwargs_)
        else:
            return PAYMENT_ATTEMPTType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_UNIQUEREF(self): return self.UNIQUEREF
    def set_UNIQUEREF(self, UNIQUEREF): self.UNIQUEREF = UNIQUEREF
    def get_DATE(self): return self.DATE
    def set_DATE(self, DATE): self.DATE = DATE
    def get_STATUS(self): return self.STATUS
    def set_STATUS(self, STATUS): self.STATUS = STATUS
    def get_AMOUNT(self): return self.AMOUNT
    def set_AMOUNT(self, AMOUNT): self.AMOUNT = AMOUNT
    def validate_UNIQUEREFType(self, value):
        # Validate type UNIQUEREFType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 10:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on UNIQUEREFType' % {"value" : value.encode("utf-8")} )
            if len(value) < 10:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on UNIQUEREFType' % {"value" : value.encode("utf-8")} )
    def validate_DATEType(self, value):
        # Validate type DATEType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 10:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on DATEType' % {"value" : value.encode("utf-8")} )
            if len(value) < 10:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on DATEType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.UNIQUEREF is not None or
            self.DATE is not None or
            self.STATUS is not None or
            self.AMOUNT is not None
        ):
            return True
        else:
            return False
    def to_etree(self, parent_element=None, name_='PAYMENT_ATTEMPTType', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{}' + name_)
        if self.UNIQUEREF is not None:
            UNIQUEREF_ = self.UNIQUEREF
            etree_.SubElement(element, '{}UNIQUEREF').text = self.gds_format_string(UNIQUEREF_)
        if self.DATE is not None:
            DATE_ = self.DATE
            etree_.SubElement(element, '{}DATE').text = self.gds_format_string(DATE_)
        if self.STATUS is not None:
            STATUS_ = self.STATUS
            etree_.SubElement(element, '{}STATUS').text = self.gds_format_string(STATUS_)
        if self.AMOUNT is not None:
            AMOUNT_ = self.AMOUNT
            etree_.SubElement(element, '{}AMOUNT').text = self.gds_format_double(AMOUNT_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def exportLiteral(self, outfile, level, name_='PAYMENT_ATTEMPTType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.UNIQUEREF is not None:
            showIndent(outfile, level)
            outfile.write('UNIQUEREF=%s,\n' % self.gds_encode(quote_python(self.UNIQUEREF)))
        if self.DATE is not None:
            showIndent(outfile, level)
            outfile.write('DATE=%s,\n' % self.gds_encode(quote_python(self.DATE)))
        if self.STATUS is not None:
            showIndent(outfile, level)
            outfile.write('STATUS=%s,\n' % self.gds_encode(quote_python(self.STATUS)))
        if self.AMOUNT is not None:
            showIndent(outfile, level)
            outfile.write('AMOUNT=%e,\n' % self.AMOUNT)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'UNIQUEREF':
            UNIQUEREF_ = child_.text
            UNIQUEREF_ = self.gds_validate_string(UNIQUEREF_, node, 'UNIQUEREF')
            self.UNIQUEREF = UNIQUEREF_
            # validate type UNIQUEREFType
            self.validate_UNIQUEREFType(self.UNIQUEREF)
        elif nodeName_ == 'DATE':
            DATE_ = child_.text
            DATE_ = self.gds_validate_string(DATE_, node, 'DATE')
            self.DATE = DATE_
            # validate type DATEType
            self.validate_DATEType(self.DATE)
        elif nodeName_ == 'STATUS':
            STATUS_ = child_.text
            STATUS_ = self.gds_validate_string(STATUS_, node, 'STATUS')
            self.STATUS = STATUS_
        elif nodeName_ == 'AMOUNT' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'AMOUNT')
            self.AMOUNT = fval_
# end class PAYMENT_ATTEMPTType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'xs_string'
        rootClass = xs_string
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'xs_string'
        rootClass = xs_string
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'xs_string'
        rootClass = xs_string
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'xs_string'
        rootClass = xs_string
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from paylink import *\n\n')
        sys.stdout.write('import paylink as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "ADDITIONAL_MESSAGE",
    "AUTH_TYPE",
    "CREATE",
    "CREATE_RESPONSE",
    "CREATION_DATE",
    "CURRENCY",
    "CUSTOMER",
    "CUSTOMER_MERCHANTREF",
    "DATETIME",
    "DESCRIPTION",
    "EMAIL",
    "EXPIRATION_DATE",
    "GET",
    "GET_RESPONSE",
    "HASH",
    "MERCHANTREF",
    "ORDERID",
    "PAYMENT_ATTEMPTSType",
    "PAYMENT_ATTEMPTType",
    "PHONE",
    "SEND",
    "SEND_RESPONSE",
    "STATUS",
    "TERMINALID",
    "TOTAL_AMOUNT"
]
